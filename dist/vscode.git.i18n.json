{
  "version": "1.0.0",
  "contents": {
    "dist/askpass-main": {
      "missOrInvalid": "凭证缺失或无效。"
    },
    "dist/autofetch": {
      "yes": "执行",
      "no": "不执行",
      "not now": "稍后询问",
      "suggest auto fetch": "是否定期执行“抓取”操作？[了解详细信息]({0})"
    },
    "dist/commands": {
      "tag at": "标签于 {0}",
      "remote branch at": "远程分支于 {0}",
      "create branch": "创建分支…",
      "create branch from": "创建分支从…",
      "checkout detached": "签出（分离）…",
      "add remote": "添加远程…",
      "current": "当前",
      "select log level": "选择日志级别",
      "changed": "日志级别更改为：{0}",
      "clonefrom": "从 {0} 克隆",
      "repourl": "从 URL 克隆",
      "selectFolder": "选择仓库未知",
      "cloning": "正在克隆仓库“{0}”…",
      "proposeopen": "是否打开克隆的仓库？",
      "openrepo": "打开",
      "openreponew": "在新窗口中打开",
      "add": "添加到工作区",
      "proposeopen2": "打开克隆的仓库，还是将其添加到工作区？",
      "init": "选择初始化 Git 仓库的工作区文件夹",
      "choose": "选择文件夹…",
      "init repo": "初始化仓库",
      "create repo": "添加到工作区",
      "are you sure": "是否在文件夹“{0}”中创建 Git 仓库？",
      "proposeopen init": "是否打开创建的仓库？",
      "proposeopen2 init": "打开创建的仓库，还是将其添加到工作区？",
      "open repo": "打开仓库",
      "HEAD not available": "“{0}”的 HEAD 不可用。",
      "confirm stage files with merge conflicts": "是否贮存合并冲突的 {0} 个文件？",
      "confirm stage file with merge conflicts": "是否贮存合并冲突的文件“{0}”？",
      "yes": "贮存",
      "keep ours": "保留当前版本",
      "delete": "删除文件",
      "deleted by them": "文件“{0}”在传入版本中被删除，在当前中被修改。\n\n如何处理该文件？",
      "keep theirs": "保留传入版本",
      "deleted by us": "文件“{0}”在当前版本中被删除，在传入中被修改。\n\n如何处理该文件？",
      "discard": "放弃更改",
      "confirm delete": "是否删除文件“{0}”？\n此操作不可撤销。\n删除后文件将永远丢失。",
      "delete file": "删除文件",
      "restore file": "还原文件",
      "confirm restore": "是否还原文件“{0}”？",
      "confirm discard": "是否放弃文件“{0}”中的更改？",
      "restore files": "还原文件",
      "confirm restore multiple": "是否还原 {0} 个文件？",
      "confirm discard multiple": "是否放弃 {0} 个文件中的更改？",
      "warn untracked": "是否删除 {0} 个未跟踪的文件？\n此操作不可撤销。删除后文件将永远丢失。",
      "there are untracked files single": "放弃更改后，未跟踪的文件“{0}”将被删除。",
      "there are untracked files": "放弃更改后，{0} 个未跟踪的文件将被删除。",
      "confirm discard all 2": "{0}\n\n此操作不可撤销。放弃后当前工作集将永远丢失。",
      "yes discard tracked": "放弃 1 个已跟踪的文件",
      "yes discard tracked multiple": "放弃 {0} 个已跟踪的文件",
      "discardAll": "放弃全部 {0} 个文件",
      "confirm discard all single": "是否放弃文件“{0}”中的更改？",
      "confirm discard all": "是否放弃 {0} 个文件中的全部更改？\n此操作不可撤销。放弃后当前工作集将永远丢失。",
      "discardAll multiple": "放弃 1 个文件",
      "confirm delete multiple": "是否删除 {0} 个文件？\n此操作不可撤销。删除后文件将永远丢失。",
      "delete files": "删除文件",
      "unsaved files single": "文件“{0}”中未保存的更改不会包含在提交中。\n\n是否在提交前保存文件？",
      "unsaved files": "{0} 个文件中未保存的更改不会包含在提交中。\n\n是否在提交前保存文件？",
      "save and commit": "全部保存并提交",
      "commit": "直接提交",
      "no staged changes": "没有暂存任何更改。\n\n是否暂存所有更改并提交？",
      "always": "总是",
      "never": "不暂存",
      "commit anyway": "创建空提交",
      "no changes": "没有要提交的更改。",
      "no verify commit not allowed": "禁止不验证的提交。要允许这些提交，请修改设置 `git.allowNoVerifyCommit`。",
      "confirm no verify commit": "是否不在提交前进行验证？将会跳过提交前钩子。",
      "ok": "提交",
      "never ask again": "提交，不再询问",
      "commitMessageWithHeadLabel2": "消息（在“{0}”上提交）",
      "commit message": "提交消息",
      "provide commit message": "请输入提交消息",
      "confirm emtpy commit": "是否创建空提交？",
      "yes never again": "是，不再询问",
      "no more": "不能撤销，因为 HEAD 不位于任何提交。",
      "undo commit": "撤销合并提交",
      "merge commit": "上一个提交是合并提交，是否撤销？",
      "select a ref to checkout detached": "选择要以分离模式签出的引用",
      "select a ref to checkout": "选择要签出的引用",
      "force": "强制签出",
      "stashcheckout": "贮存并签出",
      "local changes": "本地更改将被签出覆盖。",
      "branch name": "分支名",
      "provide branch name": "请输入新分支名",
      "branch name format invalid": "分支名不符合格式“{0}”",
      "select a ref to create a new branch from": "选择分支“{0}”指向的引用",
      "select branch to delete": "选择要删除的分支",
      "confirm force delete branch": "分支“{0}”没有完全合并，是否删除？",
      "delete branch": "删除分支",
      "invalid branch name": "分支名无效",
      "branch already exists": "分支“{0}”已存在",
      "select a branch to merge from": "选择要从中合并的分支",
      "select a branch to rebase onto": "选择要变基到的分支",
      "tag name": "标签名",
      "provide tag name": "请输入标签名",
      "tag message": "消息",
      "provide tag message": "请为标签输入消息",
      "no tags": "仓库中没有标签。",
      "select a tag to delete": "选择要删除的标签",
      "no remotes to fetch": "仓库没有可以抓取的远程。",
      "no remotes to pull": "仓库没有可以拉取的远程。",
      "pick remote pull repo": "选择要从中拉取该分支的远程",
      "pick branch pull": "选择要从中拉取的远程",
      "addremote": "添加远程",
      "no remotes to push": "仓库没有可以推送到的远程。",
      "force push not allowed": "已禁止强制推送。要允许强制推送，请修改设置 `git.allowForcePush`。",
      "confirm force push": "是否进行强制推送？强制推送是破坏性的，可能不经意地覆盖他人做出的更改。",
      "nobranch": "要推送到远程，请先签出一个分支。",
      "confirm publish branch": "分支“{0}”没有上游分支，是否发布该分支？",
      "pick remote": "选择要将分支“{0}”发布到的远程",
      "commit hash": "提交哈希值",
      "provide commit hash": "请输入提交哈希值",
      "addfrom": "从 {0} 添加远程",
      "addFrom": "从 URL 添加远程",
      "remote name": "远程名称",
      "provide remote name": "请输入远程名称",
      "remote name format invalid": "远程名称无效",
      "remote already exists": "远程“{0}”已存在。",
      "no remotes added": "仓库中没有远程。",
      "remove remote": "选择要删除的远程",
      "sync is unpredictable": "将从“{0}/{1}”推送和拉取更改。",
      "never again": "确定，不再显示",
      "no remotes to publish": "仓库没有可以发布到的远程。",
      "publish to": "发布到 {0}",
      "pick provider": "选择要将分支“{0}”发布到的远程服务",
      "no changes stash": "没有要贮存的更改。",
      "unsaved stash files single": "文件“{0}”中未保存的更改不会包含在贮存中。\n\n是否在贮存前保存文件？",
      "unsaved stash files": "{0} 个文件中未保存的更改不会包含在贮存中。\n\n是否在贮存前保存文件？",
      "save and stash": "全部保存并贮存",
      "stash": "直接贮存",
      "provide stash message": "输入贮存消息，可选",
      "stash message": "贮存消息",
      "pick stash to pop": "选择要弹出的贮存",
      "no stashes": "仓库中没有贮存。",
      "pick stash to apply": "选择要应用的贮存",
      "pick stash to drop": "选择要放弃的贮存",
      "sure drop": "是否放弃贮存“{0}”？",
      "git.title.workingTree": "{0}（工作树）",
      "git.title.index": "{0}（索引）",
      "git.title.diffRefs": "{0}（{1}）⟷（{2}）",
      "git.title.ref": "{0}（{1}）",
      "git.title.diff": "{0} ⟷ {1}",
      "no rebase": "没有进行中的变基。",
      "open git log": "打开 Git 日志",
      "show command output": "显示命令输出",
      "clean repo": "请在签出前清理仓库的工作树。",
      "cant push": "推送到远程失败。请先执行“拉取”以合并您的更改。",
      "merge conflicts": "存在合并冲突。在提交前请先解决冲突。",
      "stash merge conflicts": "应用贮存时发生合并冲突。",
      "auth failed specific": "连接到远程时身份验证失败：\n\n{0}",
      "auth failed": "连接到远程时身份验证失败。",
      "missing user info": "请确保在 Git 中设置了“user.name”（用户名）和“user.email”（用户邮箱）。",
      "learn more": "详细信息",
      "git error details": "Git 错误：{0}",
      "git error": "Git 错误"
    },
    "dist/main": {
      "validating": "正在验证 Git：{0}",
      "skipped": "已跳过 Git：{0}",
      "using git": "使用 Git 版本 {0} 来自：{1}",
      "downloadgit": "下载 Git",
      "neverShowAgain": "不再显示",
      "notfound": "没有 Git。请安装 Git 或在设置“git.path”中指定其位置。",
      "updateGit": "升级 Git",
      "git20": "安装了 Git 版本 {0}。VS Code 要求使用 Git 版本 2 以上。",
      "git2526": "安装的 Git 版本 {0} 存在已知问题。请升级到 Git 版本 2.27 以上以确保 Git 功能正常工作。"
    },
    "dist/model": {
      "not supported": "设置“git.scanRepositories”中不支持绝对路径。",
      "too many submodules": "仓库“{0}”含有 {1} 个子仓库，这些子仓库不会被自动加载。打开子仓库中的文件时，将加载对应子仓库。",
      "no repositories": "没有仓库",
      "pick repo": "选择仓库"
    },
    "dist/remoteSource": {
      "type to search": "仓库名（可搜索）",
      "type to filter": "仓库名",
      "none found": "没有远程仓库。",
      "error": "$(error) 错误：{0}",
      "provide url": "请输入仓库 URL",
      "provide url or pick": "请输入仓库 URL 或选择仓库来源",
      "url": "URL",
      "pick url": "选择要克隆的 URL",
      "branch name": "分支名"
    },
    "dist/repository": {
      "index modified": "索引已修改",
      "modified": "已修改",
      "index added": "索引已添加",
      "index deleted": "索引已删除",
      "deleted": "已删除",
      "index renamed": "索引已重命名",
      "index copied": "索引已复制",
      "untracked": "未跟踪",
      "ignored": "已忽略",
      "intent to add": "将要添加",
      "both deleted": "冲突：在两方中删除",
      "added by us": "冲突：在当前中添加",
      "deleted by them": "冲突：在传入中删除",
      "added by them": "冲突：在传入中添加",
      "deleted by us": "冲突：在当前中删除",
      "both added": "冲突：在两方中添加",
      "both modified": "冲突：在两方中修改",
      "open": "打开",
      "git.title.index": "{0}（索引）",
      "git.title.workingTree": "{0}（工作树）",
      "git.title.deleted": "{0}（已删除）",
      "git.title.theirs": "{0}（传入）",
      "git.title.ours": "{0}（当前）",
      "git.title.untracked": "{0}（未跟踪）",
      "commit": "提交",
      "merge changes": "合并更改",
      "staged changes": "已暂存的更改",
      "changes": "更改",
      "untracked changes": "未跟踪的更改",
      "push success": "成功推送。",
      "tooManyChangesWarning": "更改过多。以下只显示前 {0} 个更改。",
      "commit in rebase": "不能在变基中修改提交消息。请完成变基，然后使用交互式变基。",
      "commitMessageWhitespacesOnlyWarning": "当前提交消息只包含空白字符",
      "commitMessageCountdown": "当前行剩余 {0} 字符",
      "commitMessageWarning": "当前行较 {1} 限制超出 {0} 字符",
      "sync is unpredictable": "正在同步。取消同步可能损坏仓库…",
      "always pull": "总是拉取",
      "pull": "拉取",
      "dont pull": "不拉取",
      "pull branch maybe rebased": "当前分支“{0}”可能已被变基，是否仍要拉取该分支？",
      "pull maybe rebased": "当前分支可能已被变基，是否仍要拉取该分支？",
      "huge": "Git 仓库“{0}”含有过多活动更改。部分 Git 功能受限。",
      "neveragain": "不再显示",
      "add known": "是否将文件夹“{0}”添加到 .gitignore？",
      "yes": "添加",
      "no": "不",
      "ok": "好",
      "scm button sync title": "同步更改 $(sync){0}{1}",
      "scm button publish title": "$(cloud-upload) 发布更改",
      "scm button publish tooltip": "发布更改",
      "sync changes": "同步更改",
      "pull n": "从“{1}/{2}”拉取 {0} 个更改",
      "push n": "推送 {0} 个更改到“{1}/{2}”",
      "pull push n": "向“{2}/{3}”拉取 {0} 个更改，推送 {1} 个更改",
      "commitMessageWithHeadLabel": "消息（按 {0} 键在“{1}”上提交）",
      "commitMessage": "消息（按 {0} 键提交）"
    },
    "dist/statusbar": {
      "rebasing": "正在变基",
      "checkout": "签出分支或标签…",
      "publish to": "发布到 {0}",
      "publish to...": "发布到…",
      "publish changes": "发布更改",
      "syncing changes": "正在同步更改"
    },
    "dist/timelineProvider": {
      "git.timeline.source": "Git 历史",
      "git.timeline.you": "您",
      "git.timeline.stagedChanges": "已暂存的更改",
      "git.timeline.detail": "{0}  — {1}\n{2}\n\n{3}",
      "git.index": "索引",
      "git.timeline.uncommitedChanges": "未提交的更改",
      "git.workingTree": "工作树"
    },
    "package": {
      "displayName": "Git",
      "description": "Git 版本控制集成。",
      "command.setLogLevel": "设置日志级别…",
      "command.clone": "克隆",
      "command.cloneRecursive": "克隆（递归）",
      "command.init": "初始化仓库",
      "command.openRepository": "打开仓库",
      "command.close": "关闭仓库",
      "command.refresh": "刷新",
      "command.openChange": "打开更改",
      "command.openAllChanges": "打开所有更改",
      "command.openFile": "打开文件",
      "command.openHEADFile": "打开文件（HEAD）",
      "command.stage": "暂存更改",
      "command.stageAll": "暂存所有更改",
      "command.stageAllTracked": "暂存所有跟踪的更改",
      "command.stageAllUntracked": "暂存所有未跟踪的更改",
      "command.stageAllMerge": "暂存所有合并更改",
      "command.stageSelectedRanges": "暂存选中范围",
      "command.revertSelectedRanges": "还原选中更改",
      "command.stageChange": "暂存更改",
      "command.revertChange": "还原更改",
      "command.unstage": "取消暂存更改",
      "command.unstageAll": "取消暂存所有更改",
      "command.unstageSelectedRanges": "取消暂存选中范围",
      "command.rename": "重命名",
      "command.clean": "放弃更改",
      "command.cleanAll": "放弃所有更改",
      "command.cleanAllTracked": "放弃所有跟踪的更改",
      "command.cleanAllUntracked": "放弃所有未跟踪的更改",
      "command.commit": "提交",
      "command.commitStaged": "提交已暂存文件",
      "command.commitEmpty": "创建空提交",
      "command.commitStagedSigned": "提交已暂存文件（署名）",
      "command.commitStagedAmend": "提交已暂存文件（修正）",
      "command.commitAll": "全部提交",
      "command.commitAllSigned": "全部提交（署名）",
      "command.commitAllAmend": "全部提交（修正）",
      "command.commitNoVerify": "提交（不验证）",
      "command.commitStagedNoVerify": "提交已暂存文件（不验证）",
      "command.commitEmptyNoVerify": "空提交（不验证）",
      "command.commitStagedSignedNoVerify": "提交已暂存文件（署名，不验证）",
      "command.commitStagedAmendNoVerify": "提交已暂存文件（修正，不验证）",
      "command.commitAllNoVerify": "全部提交（不验证）",
      "command.commitAllSignedNoVerify": "全部提交（署名，不验证）",
      "command.commitAllAmendNoVerify": "全部提交（修正，不验证）",
      "command.restoreCommitTemplate": "还原提交模板",
      "command.undoCommit": "撤销上次提交",
      "command.checkout": "签出到…",
      "command.checkoutDetached": "签出到（分离）…",
      "command.branch": "创建分支…",
      "command.branchFrom": "创建分支自…",
      "command.deleteBranch": "删除分支…",
      "command.renameBranch": "重命名分支…",
      "command.cherryPick": "拣选…",
      "command.merge": "合并分支…",
      "command.rebase": "变基分支…",
      "command.createTag": "创建标签",
      "command.deleteTag": "删除标签",
      "command.fetch": "抓取",
      "command.fetchPrune": "抓取（清理标签）",
      "command.fetchAll": "抓取所有远程仓库",
      "command.pull": "拉取",
      "command.pullRebase": "拉取（变基）",
      "command.pullFrom": "拉取自…",
      "command.push": "推送",
      "command.pushForce": "推送（强制）",
      "command.pushTo": "推送到…",
      "command.pushToForce": "推送到（强制）…",
      "command.pushFollowTags": "推送（跟随标签）",
      "command.pushFollowTagsForce": "推送（跟随标签，强制）",
      "command.pushTags": "推送标签",
      "command.addRemote": "添加远程仓库…",
      "command.removeRemote": "删除远程仓库",
      "command.sync": "同步",
      "command.syncRebase": "同步（变基）",
      "command.publish": "发布分支…",
      "command.showOutput": "显示 Git 输出",
      "command.ignore": "添加到 .gitignore",
      "command.revealInExplorer": "在侧边栏显示",
      "command.rebaseAbort": "中止变基",
      "command.stashIncludeUntracked": "贮存（包括未跟踪）",
      "command.stash": "贮存",
      "command.stashPop": "弹出贮存…",
      "command.stashPopLatest": "弹出最新贮存",
      "command.stashApply": "应用贮存…",
      "command.stashApplyLatest": "应用最新贮存",
      "command.stashDrop": "删除贮存…",
      "command.timelineOpenDiff": "打开更改",
      "command.timelineCopyCommitId": "拷贝提交 ID",
      "command.timelineCopyCommitMessage": "拷贝提交消息",
      "command.timelineSelectForCompare": "选择以进行比较",
      "command.timelineCompareWithSelected": "与已选项目进行比较",
      "config.enabled": "是否启用 Git。",
      "config.path": "Git 可执行文件的路径和文件名，如 `C:\\Program Files\\Git\\bin\\git.exe`（Windows）。可为路径列表，表示依次查找文件。",
      "config.autoRepositoryDetection": "是否自动扫描和检测仓库。",
      "config.autoRepositoryDetection.true": "扫描当前打开文件夹的子文件夹，与当前打开文件所在文件夹。",
      "config.autoRepositoryDetection.false": "不自动扫描仓库。",
      "config.autoRepositoryDetection.subFolders": "扫描当前打开文件夹的子文件夹。",
      "config.autoRepositoryDetection.openEditors": "扫描当前打开文件所在文件夹。",
      "config.autorefresh": "启用自动刷新。",
      "config.autofetch": "自动从当前 Git 仓库的默认远程库抓取。设置为 `all` 表示从所有远程仓库抓取。",
      "config.autofetchPeriod": "自动执行“抓取”操作之间的间隔时间，单位为秒。适用于 `#git.autofetch#` 设置为开启时。",
      "config.confirmSync": "同步 Git 仓库前请请求确认。",
      "config.countBadge": "如何显示 Git 角标计数。",
      "config.countBadge.all": "显示所有更改总数。",
      "config.countBadge.tracked": "显示已跟踪的更改数量。",
      "config.countBadge.off": "不显示角标计数。",
      "config.checkoutType": "在执行“签出到…”命令时，可选的引用类型。",
      "config.checkoutType.local": "显示本地分支。",
      "config.checkoutType.tags": "显示标签。",
      "config.checkoutType.remote": "显示远程分支。",
      "config.branchValidationRegex": "用于验证新分支名称的正则表达式。",
      "config.branchWhitespaceChar": "在新分支名称中替换空白字符的字符。",
      "config.ignoreLegacyWarning": "忽略“旧版 Git”警告。",
      "config.ignoreMissingGitWarning": "忽略“缺失 Git”警告。",
      "config.ignoreWindowsGit27Warning": "如果 Windows 上安装了 Git 版本 2.25 或 2.26，则忽略警告。",
      "config.ignoreLimitWarning": "忽略“仓库中存在大量更改”警告。",
      "config.ignoreRebaseWarning": "忽略“拉取时的分支似乎已变基”警告。",
      "config.defaultCloneDirectory": "克隆 Git 仓库的默认位置。",
      "config.enableSmartCommit": "智能提交：如果提交时没有暂存的更改，则提交所有更改。",
      "config.smartCommitChanges": "“智能提交”时自动暂存的更改类型。",
      "config.smartCommitChanges.all": "自动暂存所有更改。",
      "config.smartCommitChanges.tracked": "仅自动暂存已跟踪的更改。",
      "config.suggestSmartCommit": "建议启用“智能提交”（在无暂存更改时提交所有更改）。",
      "config.enableCommitSigning": "使用 GPG 或 X.509 签名提交。",
      "config.discardAllScope": "执行“放弃所有更改”命令时，放弃的更改类型。设置为 `all` 表示放弃所有更改，设置为 `tracked` 表示只放弃跟踪的文件，设置为 `prompt` 表示在每次运行此操作时询问。",
      "config.decorations.enabled": "在“资源”面板和“打开的编辑器”视图中，通过颜色和角标指示 Git 文件状态。",
      "config.enableStatusBarSync": "在状态栏中显示“同步 Git”图标。",
      "config.followTagsWhenSync": "同步时跟随推送所有标签。",
      "config.promptToSaveFilesBeforeStash": "在贮存更改前，检查有无文件未保存。",
      "config.promptToSaveFilesBeforeStash.always": "检查任何未保存的文件。",
      "config.promptToSaveFilesBeforeStash.staged": "检查已暂存但未保存的文件。",
      "config.promptToSaveFilesBeforeStash.never": "不做检查。",
      "config.promptToSaveFilesBeforeCommit": "在提交前，检查有无文件未保存。",
      "config.promptToSaveFilesBeforeCommit.always": "检查任何未保存的文件。",
      "config.promptToSaveFilesBeforeCommit.staged": "检查已暂存但未保存的文件。",
      "config.promptToSaveFilesBeforeCommit.never": "不做检查。",
      "config.postCommitCommand": "成功提交后执行指定 Git 命令。",
      "config.postCommitCommand.none": "不执行命令。",
      "config.postCommitCommand.push": "执行“推送”命令。",
      "config.postCommitCommand.sync": "执行“同步”命令。",
      "config.openAfterClone": "在克隆仓库后自动打开。",
      "config.openAfterClone.always": "总是在当前窗口中打开。",
      "config.openAfterClone.alwaysNewWindow": "总是在新窗口中打开。",
      "config.openAfterClone.whenNoFolderOpen": "如果当前窗口没有打开文件夹，则在其中打开。",
      "config.openAfterClone.prompt": "总是询问。",
      "config.showInlineOpenFileAction": "在 Git 更改视图中显示“打开文件”操作。",
      "config.showPushSuccessNotification": "在推送成功时显示通知。",
      "config.inputValidation": "何时显示提交消息输入验证。",
      "config.inputValidationLength": "提交消息的最大长度，超出此值时显示警告。",
      "config.inputValidationSubjectLength": "提交消息中主题行（第一行）的最大长度，超出此值时显示警告。默认为 `#config.inputValidationLength#` 的值。",
      "config.detectSubmodules": "自动检测 Git 子模块。",
      "config.detectSubmodulesLimit": "可检测到的 Git 子模块的限制。",
      "config.alwaysShowStagedChangesResourceGroup": "总是显示“暂存的更改”资源组。",
      "config.alwaysSignOff": "对所有提交执行“签署”（添加 `signoff` 选项）。",
      "config.ignoreSubmodules": "忽略对文件树中子模块的修改。",
      "config.ignoredRepositories": "要忽略的 Git 仓库列表。",
      "config.scanRepositories": "在其中搜索 Git 仓库的路径的列表。",
      "config.showProgress": "显示 Git 操作进度提示。",
      "config.rebaseWhenSync": "在同步时强制选择“变基”。",
      "config.confirmEmptyCommits": "在创建空提交时，总是请求确认。",
      "config.fetchOnPull": "在拉取时拉取所有分支，而非仅当前分支。",
      "config.pullTags": "在拉取时拉取所有标签。",
      "config.pruneOnFetch": "在抓取时选择“清理标签”（删除存在于本地存在但不存在于远程的标签）。",
      "config.autoStash": "自动在拉取前贮存所有更改，在成功拉取后还原。",
      "config.allowForcePush": "启用强制推送（不论 force 还是 force-with-lease）。",
      "config.useForcePushWithLease": "更安全的 force-with-lease 进行强制推送。",
      "config.confirmForcePush": "在强制推送前请求确认。",
      "config.allowNoVerifyCommit": "允许没有运行 `pre-commit` 和 `commit-msg` 钩子的提交。",
      "config.confirmNoVerifyCommit": "在不验证的提交前请求确认。",
      "config.openDiffOnClick": "点击更改时打开差异编辑器，而非打开常规编辑器。",
      "config.supportCancellation": "在同步时显示通知，允许通过通知取消同步。",
      "config.branchSortOrder": "分支的排列顺序。",
      "config.untrackedChanges": "如何处理未跟踪的更改。",
      "config.untrackedChanges.mixed": "将跟踪的和未跟踪的更改显示在一起并同等处理。",
      "config.untrackedChanges.separate": "未跟踪的更改单独显示在“版本”面板中，同时不适用于特定操作。",
      "config.untrackedChanges.hidden": "讲未跟踪的更改隐藏，同时不适用于特定操作。",
      "config.requireGitUserConfig": "要求明确设置 Git 选项，还是允许 Git 在缺少设置时进行猜测。",
      "config.showCommitInput": "在 Git 版本面板中显示提交输入。",
      "config.terminalAuthentication": "通过 VS Code 处理集成终端中产生的 Git 进程的身份验证。设置更改将在重新启动终端后生效。",
      "config.timeline.showAuthor": "在时间线视图中显示提交作者。",
      "config.timeline.date": "时间线视图中项目使用的日期。",
      "config.timeline.date.committed": "提交日期。",
      "config.timeline.date.authored": "编纂日期。",
      "config.useCommitInputAsStashMessage": "将提交输入框中的消息用作默认贮存消息。",
      "submenu.explorer": "Git",
      "submenu.commit": "提交",
      "submenu.commit.amend": "修正",
      "submenu.commit.signoff": "签署",
      "submenu.changes": "更改",
      "submenu.pullpush": "拉取，推送",
      "submenu.branch": "分支",
      "submenu.remotes": "远程",
      "submenu.stash": "贮存",
      "submenu.tags": "标签",
      "colors.added": "已添加资源的颜色。",
      "colors.modified": "已修改资源的颜色。",
      "colors.stageModified": "已修改且暂存资源的颜色。",
      "colors.stageDeleted": "已删除且暂存资源的颜色。",
      "colors.deleted": "已删除资源的颜色。",
      "colors.renamed": "重命名或拷贝的资源的颜色。",
      "colors.untracked": "未跟踪资源的颜色。",
      "colors.ignored": "已忽略资源的颜色。",
      "colors.conflict": "存在冲突的资源的颜色。",
      "colors.submodule": "子模块资源的颜色。",
      "view.workbench.scm.missing": "未检测到有效的 Git 安装，可 [查看 Git 输出](command:git.showOutput) 了解详细信息。\n请 [安装 Git](https://git-scm.com/)，或 [阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。\n如果您使用的是其他版本的控制系统，则可 [搜索商店](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) 以获取其他扩展。",
      "view.workbench.scm.disabled": "如果要使用 Git 功能，请在 [设置](command:workbench.action.openSettings?%5B%22git.enabled%22%5D) 中启用 Git。\n[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "view.workbench.scm.empty": "为了使用 Git 功能，可打开包含 Git 仓库的文件夹或从 URL 克隆。\n[打开文件夹](command:vscode.openFolder)\n[克隆仓库](command:git.clone)\n[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "view.workbench.scm.folder": "当前文件夹中没有 Git 仓库。可初始化一个仓库，它将实现 Git 提供支持的源代码管理功能。\n[初始化仓库](command:git.init?%5Btrue%5D)\n[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "view.workbench.scm.workspace": "当前打开的工作区中没有任何包含 Git 仓库的文件夹。可初始化某文件夹上的一个仓库，该仓库将实现 Git 提供支持的源代码管理功能。\n[初始化仓库](command:git.init)\n[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "view.workbench.scm.emptyWorkspace": "当前打开的工作区没有任何包含 Git 仓库的文件夹。\n[将文件夹添加到工作区](command:workbench.action.addRootFolder)\n[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "view.workbench.cloneRepository": "可以在本地克隆仓库。\n[克隆仓库](command:git.clone)",
      "view.workbench.learnMore": "[阅读文档](https://aka.ms/vscode-scm) 以详细了解在 VS Code 中使用 Git 和源代码管理。",
      "config.showUnpublishedCommitsButton": "在有未上传的提交时，显示“同步”或“发布”命令的操作按钮。",
      "config.showUnpublishedCommitsButton.always": "在有未上传的提交时，总是显示操作按钮。",
      "config.showUnpublishedCommitsButton.whenEmpty": "在有未上传的提交，而无其他更改时，显示操作按钮。",
      "config.showUnpublishedCommitsButton.never": "不显示操作按钮。",
      "config.statusLimit": "从 Git 状态命令输出中读取的更改的最大数量。设置为 `0` 表示没有限制。"
    }
  }
}