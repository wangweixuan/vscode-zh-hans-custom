[dist/askpass-main]
missOrInvalid = 凭据丢失或无效。

[dist/autofetch]
no = 否
not now = 稍后询问
suggest auto fetch = 您希望 VS Code [定期运行“git fetch”]({0})吗？
yes = 是

[dist/commands]
HEAD not available = “{0}”的 HEAD 版本不可用。
add = 添加到工作区
add remote = 添加新的远程访问…
always = 总是
are you sure = 将在“{0}”中创建 Git 存储库。是否继续？
branch already exists = 已存在名为“{0}”的分支
branch name = 分支名称
branch name format invalid = 分支名称必须匹配正则表达式：{0}
cant push = 未能推送 refs 到远端。您可以试着运行“拉取”功能，整合您的更改。
changed = 日志级别更改为 {0}
choose = 选择文件夹…
clean repo = 在签出前，请清理存储库工作树。
cloning = 正在克隆 Git 存储库“{0}”…
commit = 仍要提交
commit message = 提交消息
commitMessageWithHeadLabel2 = 消息（在“{0}”上提交）
confirm delete = 是否删除 {0}？
confirm delete multiple = 是否删除 {0} 个文件？
confirm discard = 是否放弃 {0} 中的更改？
confirm discard all = 是否放弃在 {0} 个文件中的所有更改？\n此操作不可撤销，当前的工作集将会永远丢失。
confirm discard all 2 = {0}\n\n此操作不可撤销，当前的工作集将会永远丢失。
confirm discard all single = 是否放弃 {0} 中的更改？
confirm discard multiple = 是否确实要放弃 {0} 文件中的更改？
confirm emtpy commit = 是否创建空提交？
confirm force delete branch = “{0}”分支未被完全合并。是否仍要删除？
confirm force push = 即将强制推送更改，此操作可能具有破坏性并可能在无意中覆盖其他人的更改。\n\n是否继续？
confirm publish branch = 分支“{0}”没有上游分支。是否发布此分支？
confirm restore = 是否确实要还原 {0}？
confirm restore multiple = 是否还原 {0} 个文件？
confirm stage file with merge conflicts = 是否暂存含有合并冲突的 {0}？
confirm stage files with merge conflicts = 是否暂存含有合并冲突的 {0} 个文件？
create branch = 创建新的分支…
create branch from = 创建新的分支机构…
create repo = 初始化存储库
current = 当前
delete = 删除文件
delete branch = 删除分支
delete file = 删除文件
delete files = 删除文件
deleted by them = 文件“{0}”已在“他们”的分支中删除，但在“我们”的分支中存在改动。\n\n要执行什么操作？
deleted by us = 文件“{0}”已在“我们”的分支中删除，但在“他们”的分支中存在改动。\n\n要执行什么操作？
discard = 放弃更改
discardAll = 放弃所有 {0} 个文件
discardAll multiple = 放弃 1 个文件
force push not allowed = 不允许强制推送，请启用“git.allowForcePush”设置。
git error = Git 错误
git error details = Git：{0}
git.title.diffRefs = {0}（{1}）⟷{0}（{2}）
git.title.index = {0}（索引）
git.title.ours = {0}（我们的）
git.title.theirs = {0}（他们的）
git.title.untracked = {0}（未跟踪）
git.title.workingTree = {0}（工作树）
init = 选择用于初始化 Git 储存库的工作区文件夹
init repo = 初始化存储库
invalid branch name = 分支名称无效
keep ours = 保留“我们”的版本
keep theirs = 保留“他们”的版本
learn more = 了解详细信息
merge commit = 最后一个提交是合并提交。是否撤销它？
merge conflicts = 存在合并冲突。请在提交之前解决这些冲突。
missing user info = 请确保已在 Git 中配置您的“user.name”和“user.email”。
never = 从不
never again = 确定，且不再显示
never ask again = 确定，且不再询问
no changes = 没有要提交的更改。
no changes stash = 没有要储藏的更改。
no more = 未能撤销，因为 HEAD 不指向任何提交。
no remotes added = 您的存储库中没有远程存储库。
no remotes to fetch = 此存储库未配置可以从中抓取的远程存储库。
no remotes to publish = 存储库未配置任何要发布到的远程存储库。
no remotes to pull = 存储库未配置任何从其中进行拉取的远程存储库。
no remotes to push = 存储库未配置任何要推送到的远程存储库。
no staged changes = 现在没有暂存的更改以供提交\n\n是否直接自动暂存所有更改并提交？
no stashes = 此存储库中没有储藏。
no tags = 此存储库没有标记。
nobranch = 请签出一个分支以推送到远程。
ok = 确定
open git log = 打开 Git 日志
open repo = 打开存储库
openrepo = 打开
openreponew = 在新窗口中打开
pick branch pull = 选择拉取的来源分支
pick remote = 选取要将分支“{0}”发布到的远程：
pick remote pull repo = 选择要从其拉取分支的远程位置
pick stash to apply = 选择要应用的储藏
pick stash to drop = 选择要删除的储藏
pick stash to pop = 选择要弹出的储藏
proposeopen = 是否打开已克隆存储库？
proposeopen init = 是否打开初始化的存储库？
proposeopen2 = 您是希望打开克隆的存储库，还是将其添加到当前工作区？
proposeopen2 init = 您是希望打开初始化的存储库，还是将其添加到当前工作区？
provide branch name = 请提供分支名称
provide commit message = 请提供提交消息
provide remote URL = 输入远程仓库“{0}”的 URL
provide remote name = 请提供远程存储库名称
provide stash message = 提供储藏消息（可选）
provide tag message = 请提供消息以对标记进行注释
provide tag name = 已成功带标记进行推送。
remote already exists = 远程存储库“{0}”已存在。
remote branch at = {0} 处的远程分支
remote name = 远程存储库名称
remote name format invalid = 远程仓库名称格式无效
remote url = 远程存储库 URL
remove remote = 选择要删除的远程库
repourl = 存储库 URL
restore file = 恢复文件
restore files = 恢复文件
save and commit = 全部存储并提交
select a branch to merge from = 选择要从其合并的分支
select a ref to checkout = 选择要签出的 ref
select a ref to create a new branch from = 选择一个 ref 创建“{0}”分支
select a tag to delete = 选择要删除的标记
select branch to delete = 选择要删除的分支
select log level = 选择日志级别
selectFolder = 选择存储库位置
stash merge conflicts = 在应用储藏时存在合并冲突。
stash message = 储藏消息
sync is unpredictable = 此操作将推送提交至“{0}/{1}”，并从中拉取提交。
tag at = {0} 处的标记
tag message = 消息
tag name = 标记名称
there are untracked files = 若放弃 {0} 个未跟踪的文件，其将被从硬盘上删除。
there are untracked files single = 若放弃下面未跟踪的文件，其将被从硬盘上删除：{0}。
undo commit = 撤销合并提交
unsaved files = 当前有 {0} 个文件尚未存储。\n\n您要在提交之前存储吗？
unsaved files single = 以下文件尚未存储：{0}。\n\n您要在提交之前存储吗？
warn untracked = 这将删除 {0} 个未跟踪的文件！
yes = 是
yes discard tracked = 放弃 1 个已跟踪的文件
yes discard tracked multiple = 放弃 {0} 个已跟踪的文件
yes never again = 确定，且不再显示

[dist/main]
downloadgit = 下载 Git
git20 = 已安装 Git 版本 {0}。VS Code 适合 Git >= 2
looking = 正在查找 Git：{0}
neverShowAgain = 不再显示
notfound = 未找到 Git。请安装 Git，或在“git.path”设置中配置。
updateGit = 更新 Git
using git = 将使用位于 {1} 的 Git {0}

[dist/model]
no repositories = 没有可用存储库
not supported = 不能在 `git.scanRepositories` 设置中指定绝对路径。
pick repo = 选择存储库
too many submodules = “{0}”存储库中的 {1} 个子模块将不会自动打开。您仍可以通过打开其中的文件来单独打开每个子模块。

[dist/repository]
add known = 是否将“{0}”添加到 .gitignore？
added by them = 已由他们添加
added by us = 已由我们添加
both added = 两者均已添加
both deleted = 两者均已删除
both modified = 二者均已修改
changes = 更改
commit = 提交
commit in rebase = 未能在变基过程中修改提交消息。请完成变基操作，并改用交互式变基。
commitMessage = 消息（按 {0} 键以提交）
commitMessageCountdown = 当前行剩余 {0} 个字符
commitMessageWarning = 当前行比 {1} 超出 {0} 个字符
commitMessageWhitespacesOnlyWarning = 当前提交消息仅包含空白字符
commitMessageWithHeadLabel = 消息（{0} 在“{1}”提交）
deleted = 已删除
deleted by them = 已被他们删除
deleted by us = 已被我们删除
huge = Git 存储库“{0}”中存在大量活动更改，将仅启用部分 Git 功能。
ignored = 已忽略
index added = 已添加索引
index copied = 已复制索引
index deleted = 已删除索引
index modified = 已修改索引
index renamed = 已重命名索引
intent to add = 打算添加
merge changes = 合并更改
modified = 已修改
neveragain = 不再显示
open = 打开
push success = 已成功推送。
staged changes = 暂存的更改
sync is unpredictable = 正在同步。取消同步可能对存储库造成严重破坏。
untracked = 未跟踪的
untracked changes = 未跟踪的更改
yes = 是

[dist/statusbar]
publish changes = 发布更改
rebasing = 正在变基
sync changes = 同步更改
syncing changes = 正在同步更改…

[dist/timelineProvider]
git.index = 索引
git.timeline.detail = {0} — {1}\n{2}\n\n{3}
git.timeline.source = Git 历史记录
git.timeline.stagedChanges = 暂存的更改
git.timeline.uncommitedChanges = 未提交的更改
git.timeline.you = 你
git.workingTree = 工作树

[package]
colors.added = 已添加资源的颜色。
colors.conflict = 存在冲突的资源的颜色。
colors.deleted = 已删除资源的颜色。
colors.ignored = 已忽略资源的颜色。
colors.modified = 已修改资源的颜色。
colors.submodule = 子模块资源的颜色。
colors.untracked = 未跟踪资源的颜色。
command.addRemote = 添加远程库
command.branch = 创建分支…
command.branchFrom = 从…创建分支
command.checkout = 签出到…
command.clean = 放弃更改
command.cleanAll = 放弃所有更改
command.cleanAllTracked = 放弃所有跟踪的更改
command.cleanAllUntracked = 放弃所有未跟踪的更改
command.clone = 克隆
command.close = 关闭存储库
command.commit = 提交
command.commitAll = 全部提交
command.commitAllAmend = 全部提交（修改）
command.commitAllSigned = 全部提交（署名）
command.commitEmpty = 创建空提交
command.commitStaged = 提交已暂存文件
command.commitStagedAmend = 提交已暂存文件（修改）
command.commitStagedSigned = 提交已暂存文件（署名）
command.createTag = 创建标记
command.deleteBranch = 删除分支…
command.deleteTag = 删除标签
command.fetch = 抓取
command.fetchAll = 从所有远程存储库中拉取
command.fetchPrune = 获取（删除）
command.ignore = 将文件添加到 .gitignore
command.init = 初始化存储库
command.merge = 合并分支…
command.openChange = 打开更改
command.openFile = 打开文件
command.openHEADFile = 打开文件（HEAD）
command.openRepository = 打开存储库
command.publish = 发布分支
command.pull = 拉取
command.pullFrom = 拉取自…
command.pullRebase = 拉取（变基）
command.push = 推送
command.pushFollowTags = 推送（跟随标签）
command.pushFollowTagsForce = 推送（跟随标签，强制）
command.pushForce = 推送（强制）
command.pushTo = 推送到…
command.pushToForce = 推送到…（强制）
command.refresh = 刷新
command.removeRemote = 删除远程存储库
command.renameBranch = 重命名分支…
command.restoreCommitTemplate = 还原提交模板
command.revealInExplorer = 在“资源”面板中显示
command.revertChange = 还原更改
command.revertSelectedRanges = 还原所选更改
command.setLogLevel = 设置日志级别…
command.showOutput = 显示 Git 输出
command.stage = 暂存更改
command.stageAll = 暂存所有更改
command.stageAllTracked = 暂存所有跟踪的更改
command.stageAllUntracked = 暂存所有未跟踪的更改
command.stageChange = 暂存更改
command.stageSelectedRanges = 暂存所选范围
command.stash = 储藏
command.stashApply = 应用储藏…
command.stashApplyLatest = 应用最新储藏
command.stashDrop = 删除储藏…
command.stashIncludeUntracked = 储藏（包含未跟踪）
command.stashPop = 弹出储藏…
command.stashPopLatest = 弹出最新储藏
command.sync = 同步
command.syncRebase = 同步（变基）
command.timelineCopyCommitId = 拷贝提交 ID
command.timelineCopyCommitMessage = 拷贝提交消息
command.timelineOpenDiff = 打开更改
command.undoCommit = 撤销上次提交
command.unstage = 取消暂存更改
command.unstageAll = 取消暂存所有更改
command.unstageSelectedRanges = 取消暂存所选范围
config.allowForcePush = 启用强制推送（不论 force 还是 force-with-lease）。
config.alwaysShowStagedChangesResourceGroup = 始终显示“暂存的更改”资源组。
config.alwaysSignOff = 对所有提交添加 signoff 标志。
config.autoRepositoryDetection = 配置何时自动检测存储库。
config.autoRepositoryDetection.false = 禁止自动扫描存储库。
config.autoRepositoryDetection.openEditors = 扫描当前打开文件的父文件夹。
config.autoRepositoryDetection.subFolders = 扫描当前打开文件夹的子文件夹。
config.autoRepositoryDetection.true = 扫描当前打开文件夹与当前打开文件所在文件夹的子文件夹。
config.autoStash = 在拉取前暂存所有更改，在成功拉取后还原这些更改。
config.autofetch = 启用时，提交将自动从当前Git存储库的默认远程获取。
config.autofetchPeriod = 在启用“git.autofetch”情况下每次自动 git fetch 之间的间隔时间，以秒为单位。
config.autorefresh = 是否启用自动刷新。
config.branchSortOrder = 控制分支的排列顺序。
config.branchValidationRegex = 用于验证新分支名称的正则表达式。
config.branchWhitespaceChar = 在新分支名称中替换空白字符的字符。
config.checkoutType = 在运行“推送到…”功能时列出的分支类型。
config.checkoutType.all = 显示全部参考文献。
config.checkoutType.local = 只显示本地分支。
config.checkoutType.remote = 仅显示远程分支。
config.checkoutType.tags = 仅显示标记。
config.confirmEmptyCommits = 在创建空提交时始终进行确认。
config.confirmForcePush = 在强制推送前进行确认。
config.confirmSync = 同步 Git 存储库前请先进行确认。
config.countBadge = 是否显示 Git 徽章计数器。
config.countBadge.all = 对所有更改计数。
config.countBadge.off = 不现实计数器。
config.countBadge.tracked = 仅对跟踪的更改计数。
config.decorations.enabled = 是否在“资源”面板和“打开的编辑器”视图中添加颜色和小标。
config.defaultCloneDirectory = 克隆 Git 存储库的默认位置。
config.detectSubmodules = 自动检测 Git 子模块。
config.detectSubmodulesLimit = 可检测到的 Git 子模块的限制。
config.discardAllScope = 运行“放弃所有更改”命令时放弃的更改类型。“all”放弃所有更改。“tracked”只放弃跟踪的文件。“prompt”表示在每次运行此操作时显示提示对话框。
config.enableCommitSigning = 启用使用 GPG 签名的提交
config.enableSmartCommit = 在没有暂存的更改时提交所有更改。
config.enableStatusBarSync = 控制 Git Sync 命令是否出现在状态栏中。
config.enabled = 是否启用 Git。
config.fetchOnPull = 在拉取时是抓取所有分支还是仅当前分支。
config.ignoreLegacyWarning = 忽略“旧版 Git”警告。
config.ignoreLimitWarning = 忽略“存储库中存在大量更改”的警告。
config.ignoreMissingGitWarning = 忽略“缺失 Git”的警告。
config.ignoredRepositories = 要忽略的 Git 存储库列表。
config.inputValidation = 何时显示提交消息输入验证。
config.inputValidationLength = 显示提交消息长度警告的长度阈值。
config.inputValidationSubjectLength = 显示警告的提交消息主题长度阈值。默认为 `#config.inputValidationLength#` 的值。
config.openDiffOnClick = 点击更改时打开差异编辑器。否则将打开常规编辑器。
config.path = Git 可执行文件的路径和文件名，如 `C:\\Program Files\\Git\\bin\\git.exe`。
config.postCommitCommand = 成功提交后运行 git 命令。
config.postCommitCommand.none = 提交后不要运行任何命令。
config.postCommitCommand.push = 成功提交后运行“Git Push”。
config.postCommitCommand.sync = 成功提交后运行“Git Sync”。
config.promptToSaveFilesBeforeCommit = 在提交之前检查未存储的文件。
config.promptToSaveFilesBeforeCommit.always = 检查是否有任何未存储的文件。
config.promptToSaveFilesBeforeCommit.never = 禁用此检查。
config.promptToSaveFilesBeforeCommit.staged = 只检查未存储的已暂存文件。
config.pullTags = 在拉取时获取全部标签。
config.rebaseWhenSync = 在运行“同步”命令时，强制 Git 使用“变基”。
config.scanRepositories = 在其中搜索 Git 存储库的路径的列表。
config.showInlineOpenFileAction = 在 Git 更改视图中显示内联“打开文件”操作。
config.showProgress = 显示进度提示。
config.showPushSuccessNotification = 在推送成功时显示通知。
config.smartCommitChanges = 控制哪些更改由 Smart Commit 自动暂存。
config.smartCommitChanges.all = 自动暂存所有更改。
config.smartCommitChanges.tracked = 仅自动暂存跟踪的更改。
config.suggestSmartCommit = 建议启用智能提交（在无暂存更改时提交所有更改）。
config.supportCancellation = 控制在运行同步操作时是否出现通知，允许用户取消操作。
config.untrackedChanges = 控制未跟踪的更改的行为。
config.untrackedChanges.hidden = 未跟踪的更改被隐藏，并从多个操作中排除。
config.untrackedChanges.mixed = 所有更改，无论是跟踪的还是未跟踪的，都会一起出现并表现出相同的行为。
config.untrackedChanges.separate = 未跟踪的更改单独显示在“版本”面板中。它们也被排除在几个操作之外。
config.useForcePushWithLease = 更安全的 force-with-lease 进行强制推送。
description = Git 版本控制集成
displayName = Git
view.workbench.cloneRepository = 还可从 URL 克隆存储库。要详细了解如何在 VS Code 中使用 Git 和版本控制，[请阅读我们的文档](https://aka.ms/vscode-scm)。\n[克隆存储库](command:git.clone)
view.workbench.scm.disabled = 如果要使用 git 功能，请在[设置](command:workbench.action.openSettings?%5B%22git.enabled%22%5D)中启用 git。\n要了解有关如何在 VS Code 中使用 Git 和版本控制的更多信息，[请阅读我们的文档](https://aka.ms/vscode-scm)。
view.workbench.scm.empty = 为了使用 git 功能，可打开包含 git 存储库的文件夹或从 URL 克隆。\n[打开文件夹](command:vscode.openFolder)\n[克隆存储库](command:git.clone)\n要详细了解如何在 VS Code 中使用 Git 和版本控制，[请阅读我们的文档](https://aka.ms/vscode-scm)。
view.workbench.scm.emptyWorkspace = 当前打开的工作区没有任何包含 git 存储库的文件夹。\n[将文件夹添加到工作区](command:workbench.action.addRootFolder)\n要详细了解如何在 VS Code 中使用 Git 和版本控制，[请阅读我们的文档](https://aka.ms/vscode-scm)。
view.workbench.scm.folder = 当前打开的文件夹没有 git 存储库。\n[初始化存储库](command:git.init?%5Btrue%5D)\n要详细了解如何在 VS Code 中使用 Git 和版本控制，[请阅读我们的文档](https://aka.ms/vscode-scm)。
view.workbench.scm.missing = 未检测到有效的 git 安装，可在 [git 输出](command:git.showOutput)中找到更多详细信息。\n请[安装 git](https://git-scm.com/)，或在[我们的文档](https://aka.ms/vscode-scm)中详细了解如何在 VS Code中使用 Git 和版本控制。\n如果您使用的是其他版本的控制系统，则可[搜索市场](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22)以获取其他扩展。
view.workbench.scm.workspace = 当前打开的工作区没有任何包含 git 存储库的文件夹。\n[初始化存储库](command:git.init)\n要了解有关如何在 VS Code 中使用 Git 和版本控制的更多信息，[请阅读我们的文档](https://aka.ms/vscode-scm)。
