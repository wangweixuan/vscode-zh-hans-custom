[package]
add.browser.breakpoint = 添加浏览器断点
attach.node.process = 附加到 Node 进程（预览）
browser.address.description = 调试端口的 TCP/IP 地址。
browser.baseUrl.description = 用于解析路径 baseUrl 的基本 URL。 将 URL 映射到磁盘上的文件时，将修剪 baseURL。默认为启动 URL 域。
browser.cwd.description = 运行时程序的工作目录。可选。
browser.disableNetworkCache.description = 控制每次请求是否跳过网络缓存
browser.env.description = 浏览器的环境键/值对的可选字典。
browser.file.description = 由浏览器打开的本地 html 文件
browser.inspectUri.description = 用于重写 inspectUri 的格式：这是一个模板字符串，可插入 {curlyBraces} 中的值。\n可用的值包括：\n - `url.*` 是正在运行的应用程序的解析地址，如 `"{url.port}"`，`"{url.hostname}"`。\n - `port` 是 Chrome 监听的调试端口。\n - `browserInspectUri` 是启动的浏览器上的检查器地址。\n - `wsProtocol` 是默认的 WebSocket 协议。如果原始 URL 为 https，则为 `"wss"`，否则为 `"ws"`。
browser.pathMapping.description = 将 URL 或路径映射到本地文件夹，以将浏览器中的脚本解析为磁盘上的脚本。
browser.port.description = 用于远程调试浏览器的端口。
browser.runtimeArgs.description = 传递给运行时可执行文件的可选参数。
browser.runtimeExecutable.description = 可为 `"canary"`，`"stable"`，`"custom"` 或浏览器可执行文件的路径。 Custom 表示自定义包装器、自定义生成或 CHROME_PATH 环境变量。
browser.server.description = 配置要启动的 Web 服务器。采用与 `"node"` 启动任务相同的配置。
browser.skipFiles.description = 将在调试时跳过的一组文件名、文件夹名或路径的 glob 模式。
browser.smartStep.description = 自动跳过源代码映射文件中未映射代码行，如 TypeScript 在编译 async/await 或其他功能时自动生成的代码。
browser.sourceMapPathOverrides.description = 用于根据源代码映射所述重写源文件位置的一组映射，其将映射到磁盘上所处位置。请参阅自述文件了解详细信息。
browser.sourceMaps.description = 使用 JavaScript 源代码映射。
browser.timeout.description = 重试此毫秒数以连接到浏览器。默认值为 10000 毫秒。
browser.url.description = 将搜索具有此确切网址的标签并附加到该标签。
browser.urlFilter.description = 将搜索 URL 为此的页面，若找到则附加于其之上。可以包含 * 通配符。
browser.userDataDir.description = 默认情况下，浏览器在临时文件夹中使用单独的用户配置文件启动。使用此选项可以覆盖它。设置为 false 以使用默认用户配置文件启动。
browser.webRoot.description = 指定网络服务器根目录的工作区绝对路径。用于将类似 `"/app.js"` 的路径解析到磁盘。隐含为 `"/"` 的 pathMapping 路径
chrome.attach.description = 附加到已处于调试模式的 Chrome 实例
chrome.attach.label = Chrome：附加
chrome.label = Chrome（预览版）
chrome.launch.description = 启动 Chrome 以调试 URL
chrome.launch.label = Chrome：启动
configuration.npmScriptLensLocation = 在 npm 脚本中应显示运行和调试代码透镜的位置。可选值为 `"all"`，`"top"` 和 `"never"`。
configuration.suggestPrettyPrinting = 在单步执行时显示反混淆 JavaScript 代码的选项。
configuration.terminalOptions = JavaScript 调试终端和 npm 脚本的默认启动选项。
configuration.usePreview = 为 Node.js 和 Chrome 使用新的预览版 JavaScript 调试器。
configuration.warnOnLongPrediction = 在断点预测需要较长时间使显示加载提示。
debug.npm.edit = 编辑 package.json
debug.npm.noScripts = 在 package.json 中找不到 npm 脚本
debug.npm.noWorkspaceFolder = 需要打开工作区文件夹来调试 npm 脚本。
debug.npm.parseError = 无法读取 {0}：{1}
debug.npm.script = 调试 npm 脚本
debug.terminal.label = 创建 JavaScript 调试终端
debug.terminal.program.description = 在启动的终端中运行命令。如果未提供命令，则终端将在不启动程序的情况下打开。
debug.terminal.snippet.label = 在调试终端中运行执行“npm start”
edge.attach.description = 附加到已在调试模式下的 Edge 实例
edge.attach.label = Edge：附加
edge.label = Edge（预览版）
edge.launch.description = 启动 Microsoft Edge 以调试 URL
edge.launch.label = Edge：启动
edge.useWebView.description = 适用于 Edge：使调试器将运行时可执行文件视为包含 WebView 的主机应用程序，以便调试 WebView 脚本内容。
errors.timeout = {0}：{1} 毫秒后超时
extension.description = 用于调试 Node.js 程序和 Chrome 的扩展。
extensionHost.label = VS Code 扩展开发（预览版）
extensionHost.launch.config.name = 启动扩展
extensionHost.launch.env.description = 传递到扩展主机的环境变量。
extensionHost.launch.runtimeExecutable.description = VS Code 的绝对路径。
extensionHost.launch.stopOnEntry.description = 启动后自动停止扩展主机。
extensionHost.snippet.launch.description = 在调试模式下启动 VS Code 扩展
extensionHost.snippet.launch.label = VS Code 扩展开发
longPredictionWarning.disable = 不再显示
longPredictionWarning.message = 配置断点需要一段时间。您可通过更新 launch.json 中的 `"outFiles"` 来加快速度。
longPredictionWarning.noFolder = 未打开工作区文件夹。
longPredictionWarning.open = 打开 launch.json 文件
node.address.description = 要调试的进程的 TCP/IP 地址。默认值为 `"localhost"`。
node.attach.attachExistingChildren.description = 尝试附加到已生成的子进程。
node.attach.attachSpawnedProcesses.description = 在附加过程中设置环境变量以跟踪生成的子级。
node.attach.config.name = 附加
node.attach.continueOnAttach = 自动恢复启动的程序并等待 `"--inspect-brk"`。
node.attach.processId.description = 要附加的进程 ID。
node.attach.restart.description = 在失去连接时尝试重新连接到该程序。
node.console.title = Node 调试台
node.disableOptimisticBPs.description = 在加载源代码映射前不要在文件中设置断点。
node.label = Node.js（预览）
node.launch.args.description = 传递给程序的命令行参数。
node.launch.autoAttachChildProcesses.description = 自动将调试器附加到新的子进程。
node.launch.config.name = 启动
node.launch.console.description = 启动调试目标的位置。
node.launch.console.externalTerminal.description = 可通过用户设置来配置的外部终端
node.launch.console.integratedTerminal.description = VS Code 的集成终端
node.launch.console.internalConsole.description = VS Code 调试台（不支持从程序读取输入）
node.launch.cwd.description = 正在进行调试的程序的工作目录的绝对路径。
node.launch.env.description = 传递给程序的环境变量。若为 `"null"`，则将从环境中移除变量。
node.launch.envFile.description = 包含环境变量定义的文件的绝对路径。
node.launch.logging = 日志记录配置
node.launch.logging.cdp = Chrome DevTools 协议消息的日志文件路径
node.launch.logging.dap = 调试适配器协议消息的日志文件的路径
node.launch.outputCapture.description = 捕获输出信息的位置：调试 API 或者 stdout/stderr 流。
node.launch.program.description = 程序的绝对路径。通过查看 package.json 和打开的文件猜测所生成的值。
node.launch.restart.description = 如果程序退出时带有非零的退出码，则尝试重启该程序。
node.launch.runtimeArgs.description = 传递给运行时可执行文件的可选参数。
node.launch.runtimeExecutable.description = 要使用的可执行文件名称。应为绝对路径或在 PATH 上可用的文件名称。默认值为 `"node"`。
node.launch.runtimeVersion.description = 要使用的 node 运行时版本。需要安装 nvm。
node.launch.useWSL.deprecation = 已弃用：请改用“Remote - WSL”扩展。
node.launch.useWSL.description = 使用 Windows 的 Linux 子系统。
node.localRoot.description = 包含该程序的本地目录的路径。
node.pauseForSourceMap.description = 是否等待每个传入脚本的源代码映射加载。 这会产生性能开销，只要没有禁用 rootPath，就可在磁盘空间不足时安全地禁用它。
node.port.description = 调试要附加的端口。默认端口是 5858。
node.processattach.config.name = 附加到进程
node.remoteRoot.description = 包含该程序的远程目录的绝对路径。
node.resolveSourceMapLocations.description = 可用源代码映射来解析本地文件的位置的文件列表。这可用于避免造成外部源代码映射代码中错误地出现中断。使用 `"!"` 开头的模式可将这些中断排除。也可将其设置为空数组或 null 以避免限制。
node.showAsyncStacks.description = 显示引导至当前调用堆栈的异步调用。
node.snippet.attach.description = 附加到正在运行的 Node.js 程序
node.snippet.attach.label = Node.js：附加
node.snippet.attachProcess.description = 打开进程选取器并选择附加到的 node 进程
node.snippet.attachProcess.label = Node.js：附加到进程
node.snippet.electron.description = 调试 Electron 主进程
node.snippet.electron.label = Node.js：Electron 主进程
node.snippet.gulp.description = 调试 Gulp 任务（要求在本地安装 gulp）
node.snippet.gulp.label = Node.js：Gulp 任务
node.snippet.launch.description = 在调试模式下启动 Node.js 项目
node.snippet.launch.label = Node.js：启动程序
node.snippet.mocha.description = 调试 mocha 测试
node.snippet.mocha.label = Node.js：Mocha 测试
node.snippet.nodemon.description = 使用 nodemon 以在源更改时重新启动调试会话
node.snippet.nodemon.label = Node.js：Nodemon 安装程序
node.snippet.npm.description = 通过 npm debug 脚本启动 Node.js 程序
node.snippet.npm.label = Node.js：通过 npm 启动
node.snippet.remoteattach.description = 附加到远程节点计划的调试端口
node.snippet.remoteattach.label = Node.js：附加到远程程序
node.snippet.yo.description = 调试 yeoman 生成器（运行 npm link ）
node.snippet.yo.label = Node.js：Yeoman 生成器
node.sourceMapPathOverrides.description = 一组重写源代码映射中源文件的位置为磁盘上所处位置的映射。
node.sourceMaps.description = 使用 JavaScript 源代码映射。
node.stopOnEntry.description = 启动后自动停止程序。
node.timeout.description = 重试连接到 Node.js 的毫秒数。默认值为 10000 ms。
outFiles.description = 生成的 JavaScript 文件。适用于打开源代码映射时。如果模式以 `"!"` 开始，则排除这些文件。如果未指定，则生成的代码应与其源代码位于同一目录。
pretty.print.script = 用于调试的反混淆
remove.browser.breakpoint = 删除浏览器断点
remove.browser.breakpoint.all = 删除所有浏览器断点
skipFiles.description = 调试时要跳过的文件的 glob 模式数组。模式 `"<node_internals>/**"` 可所有内部 Node.js 模块。
smartStep.description = 自动单步执行无法映射回原始源的生成代码。
start.with.stop.on.entry = 开始调试并在输入时停止
toggle.skipping.this.file = 切换是否跳过此文件
trace.boolean.description = 将诊断日志写入磁盘。
trace.console.description = 将日志输出到调试台。
trace.description = 要生成的诊断输出。
trace.level.description = 已记录的日志的级别。
trace.logFile.description = 磁盘日志的写入位置。
trace.tags.description = 记录的日志类型。
