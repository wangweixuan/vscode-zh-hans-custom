[dist/node/extension/autoAttach]
process.with.pid.label = 自动附加（{0}）

[dist/node/extension/cluster]
child.process.with.pid.label = 子进程 {0}

[dist/node/extension/configurationProvider]
NVM_DIR.not.found.message = 属性“runtimeVersion”需要 Node.js 版本管理器“nvm”或“nvs"。
NVM_HOME.not.found.message = 属性“runtimeVersion”需要 Node.js 版本管理器“nvm-windows”或“nvs"。
NVS_HOME.not.found.message = 属性“runtimeVersion”需要 Node.js 版本管理器“nvs"。
mern.starter.explanation = 已创建“{0}”项目的启动配置。
node.launch.config.name = 启动程序
outFiles.explanation = 在“outFiles”属性中调整glob模式，以包含生成的JavaScript。
program.guessed.from.package.json.explanation = 已根据“package.json”文件生成启动配置。
program.not.found.message = 找不到要调试的程序
runtime.version.not.found.message = 未为“{1}”安装 Node.js 版本“{0}"。
useWslDeprecationWarning.doNotShowAgain = 不再显示
useWslDeprecationWarning.title = 已弃用：请改用“Remote WSL”扩展。点击[此处]({0})了解更多信息。

[dist/node/extension/processPicker]
cannot.enable.debug.mode.error = 附加到进程：无法对进程“{0}”启用调试模式（{1}）。
pickNodeProcess = 选择要附加到的 Node.js 进程
pid.error = 附加到进程：无法将进程“{0}”置于调试模式。
process.id.error = 附加到进程:“{0}”不像是进程 ID。
process.id.port = 进程 ID：{0}，调试端口：{1}
process.id.port.legacy = 进程 ID：{0}，调试端口：{1}（旧式协议）
process.id.port.signal = 进程 ID：{0}，调试端口：{1}（{2}）
process.id.signal = 进程 ID：{0}（{1}）
process.picker.error = 进程选取器失败（{0}）

[dist/node/extension/protocolDetection]
protocol.switch.legacy.detected = 由于检测到旧版协议，因此用其进行调试。
protocol.switch.legacy.version = 检测到 Node.js {0}，因此使用旧版协议调试。
protocol.switch.unknown.error = 使用检查器协议进行调试，因为无法确定 Node.js 版本（{0}）

[dist/node/nodeDebug]
VSND2001 = 无法在 PATH 上找到运行时“{0}”。请确保已安装“{0}”。
VSND2002 = 无法启动计划“{0}”。配置源映射可能会有帮助。
VSND2003 = 无法启动程序“{0}”。设置属性“{1}”可能有所帮助。
VSND2009 = 无法找到程序“{0}”对应的 JavaScript，因此无法启动此程序。
VSND2010 = 无法连接到运行时进程（原因：{0}）。
VSND2011 = 无法在终端（{0}）中启动调试目标。
VSND2015 = 由于 Node.js 无响应，已取消请求“{_request}”。
VSND2016 = Node.js 未在合理的时间内响应请求“{_request}”。
VSND2017 = 无法启动调试目标（{0}）。
VSND2018 = 没有可用的调用堆栈（{_command}：{_error}）。
VSND2019 = 找不到内部模块 {0}
VSND2022 = 没有调用堆栈，因为计划已在 JavaScript 外暂停。
VSND2023 = 没有可用的调用堆栈。
VSND2028 = 未知的控制台类型“{0}”。
VSND2029 = 无法从文件({0}）加载环境变量。
VSND2033 = 无法连接到运行时。请确认运行时处于“legacy”调试模式。
VSND2034 = 无法通过“legacy”协议连接到运行时。请尝试使用“inspector”协议。
anonymous.function = （匿名函数）
attribute.path.not.absolute = 属性“{0}”不是绝对的（“{1}”）。可考虑将“{2}”添加为前缀以使其成为绝对。
attribute.path.not.exist = 属性“{0}”不存在（“{1}”）。
attribute.wls.not.exist = 无法找到安装的 Windows 的 Linux 子系统
eval.invalid.expression = 无效的表达式：{0}
eval.not.available = 不可用
exception.paused.promise.rejection = 因 promise 拒绝而暂停
exception.promise.rejection = Promise 拒绝
exception.promise.rejection.text = Promise 拒绝（{0}）
exceptions.all = 所有异常
exceptions.rejects = Promise 拒绝
exceptions.uncaught = 未捕获的异常
file.on.disk.changed = 未验证，因为磁盘上的文件已更改。请重新启动调试会话。
more.information = 更多信息
node.console.title = Node.js 调试台
origin.core.module = 只读核心模块
origin.from.node = Node.js 的只读内容
origin.from.remote.node = 远程 Node.js 的只读内容
origin.inlined.source.map = 源映射的只读内联内容
program.path.case.mismatch.warning = 程序路径与磁盘上的文件一样使用大小写不同的字符；这可能导致出现未被命中的断点。
reason.description.breakpoint = 因断点暂停
reason.description.debugger_statement = 因 debugger 语句暂停
reason.description.entry = 因条目暂停
reason.description.exception = 因异常暂停
reason.description.restart = 因框架条目暂停
reason.description.step = 因步骤暂停
reason.description.user_request = 因用户请求暂停
scope.block = 块
scope.catch = 捕获的异常
scope.closure = 闭包
scope.exception = 异常
scope.global = 全局
scope.local = 本地
scope.local.with.count = 本地（{1} 的 {0}）
scope.script = 脚本
scope.unknown = 未知作用域类型：{0}
scope.with = 与
setVariable.error = 不支持的设置值
source.not.found = 无法检索内容。
source.skipFiles = 因“skipFiles”而跳过
source.smartstep = 因“smartStep”而跳过
sourcemapping.fail.message = 由于未找到生成的代码，已忽略断点。请检查源映射。

[dist/node/nodeV8Protocol]
not.connected = 未连接到运行时
runtime.timeout = {0} 毫秒后超时
runtime.unresponsive = 由于 Node.js 无响应而取消了操作

[package]
attach.node.process = 附加到 Node 进程
debug.node.showUseWslIsDeprecatedWarning.description = 在使用“useWSL”属性时显示警告。
debug.node.useV3.description = 将“node”类型的启动配置委托给 js-debug 扩展。（实验性功能）
extension.description = Node.js 调试支持（低于 8.0 版本）
launch.args.description = 传递给程序的命令行参数。
node.address.description = 待调试进程的 IP 地址（仅限 Node.js >= 5.0）。默认为 `"localhost"`。
node.attach.config.name = 附加
node.attach.processId.description = 要附加到的进程的 PID。
node.disableOptimisticBPs.description = 在为文件加载源映射之前，请不要在此文件中设置断点。
node.label = Node.js
node.launch.autoAttachChildProcesses.description = 自动将调试器附加到新的子进程。
node.launch.config.name = 启动
node.launch.console.description = 启动调试目标的位置。
node.launch.console.externalTerminal.description = 可通过用户设置来配置的外部终端
node.launch.console.integratedTerminal.description = VS Code 的集成终端
node.launch.console.internalConsole.description = VS Code 调试台（不支持从程序读取输入）
node.launch.cwd.description = 正在进行调试的程序的工作目录的绝对路径。
node.launch.env.description = 传递给程序的环境变量。设置为 `null` 表示从环境中移除变量。
node.launch.envFile.description = 包含环境变量定义的文件的绝对路径。
node.launch.externalConsole.deprecationMessage = 已弃用：请改用 `console`。
node.launch.outputCapture.description = 捕获输出信息的位置：调试 API 或者标准输出、标准错误流。
node.launch.program.description = 程序的绝对路径。通过查看“package.json”和打开的文件猜测所生成的值。编辑此属性。
node.launch.runtimeArgs.description = 传递给运行时可执行文件的可选参数。
node.launch.runtimeExecutable.description = 要使用的运行时。应为绝对路径或在 PATH 上可用的运行时名称。默认为 `"node"`。
node.launch.runtimeVersion.description = 要使用的 Node.JS 运行时版本。需要 nvm。
node.launch.useWSL.deprecation = 已弃用：请改用“Remote - WSL”扩展。
node.launch.useWSL.description = 使用 Windows 的 Linux 子系统（WSL）。
node.localRoot.description = 包含该程序的本地目录的路径。
node.port.description = 调试要附加的端口。默认为 `5858`。
node.processattach.config.name = 附加到进程
node.protocol.auto.description = 尝试自动检测最佳协议。当启动 Node 8.0+ 时，将选择 `"inspector"`。
node.protocol.description = 要使用的 Node.js 调试协议。
node.protocol.inspector.description = Node.js 6.3 及更高版本所支持的新协议
node.protocol.legacy.description = 低于 Node.js 8.0 的版本所支持的旧协议
node.remoteRoot.description = 包含该程序的远程目录的绝对路径。
node.restart.description = 在终止 Node.js 后重新启动会话。
node.showAsyncStacks.description = 显示导致当前调用堆栈的异步调用。适用于协议为 `"inspector"` 时。
node.snippet.attach.description = 附加到正在运行的 node 程序
node.snippet.attach.label = Node.js：附加
node.snippet.attachProcess.description = 打开进程选取器并选择附加到的 node 进程
node.snippet.attachProcess.label = Node.js：附加到进程
node.snippet.electron.description = 调试 Electron 主进程
node.snippet.electron.label = Node.js：Electron 主进程
node.snippet.gulp.description = 调试 gulp 任务（确保项目中已安装本地 gulp）
node.snippet.gulp.label = Node.js：Gulp 任务
node.snippet.launch.description = 在调试模式下启动节点计划
node.snippet.launch.label = Node.js：启动程序
node.snippet.mocha.description = 调试 mocha 测试
node.snippet.mocha.label = Node.js：Mocha 测试
node.snippet.nodemon.description = 使用 nodemon 以在源更改时重新启动调试会话
node.snippet.nodemon.label = Node.js：Nodemon 安装程序
node.snippet.npm.description = 通过 npm“debug”脚本启动 node 程序
node.snippet.npm.label = Node.js：通过 npm 启动
node.snippet.remoteattach.description = 附加到远程节点计划的调试端口
node.snippet.remoteattach.label = Node.js：附加到远程程序
node.snippet.yo.description = 调试 yeoman 生成器（通过在项目文件夹中运行“npm link”进行安装）
node.snippet.yo.label = Node.js：Yeoman 生成器
node.sourceMapPathOverrides.description = 一组重写源映射中源文件的位置为硬盘上所处位置的映射。
node.sourceMaps.description = 使用 JavaScript 源映射（如果存在）。
node.stopOnEntry.description = 启动后自动停止程序。
node.timeout.description = 重试连接到 Node.js 的此毫秒数。默认为 10000ms。
open.loaded.script = 打开加载脚本
outDir.deprecationMessage = 已弃用：请改用 `outFiles`。
outFiles.description = 如果启用了源映射，这些 glob 模式将指定生成的 JavaScript 文件。如果模式以 `!` 开始，则排除这些文件。如果未指定，则生成的代码应与其源代码位于同一目录。
skipFiles.description = 调试时要跳过的文件的 glob 模式数组。模式 `<node_internals>/**` 与所有内部 Node.js 模块相匹配。
smartStep.description = 自动单步执行未能映射回原始源的生成代码。
start.with.stop.on.entry = 开始调试并在输入时停止
toggle.skipping.this.file = 切换是否跳过此文件
trace.description = 生成诊断输出。可为 `true` 或由逗号分隔的选择器列表。`verbose` 选择器将生成非常详细的输出。
