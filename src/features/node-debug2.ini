[out/src/errors]
VSND2001 = 在 PATH 上找不到运行时“{0}”。请检查是否已安装“{0}”。
VSND2002 = 未能启动计划“{0}”；配置源映射可能会有帮助。
VSND2003 = 未能启动程序“{0}”；设置属性“{1}”可能有所帮助。
VSND2009 = 找不到程序“{0}”对应的 JavaScript，因此未能启动此程序。
VSND2011 = 未能在终端（{0}）中启动调试目标。
VSND2017 = 未能启动调试目标（{0}）。
VSND2028 = 未知的控制台类型“{0}”。
VSND2029 = 未能从文件（{0}）加载环境变量。
VSND2035 = 未能调试扩展（{0}）。

[out/src/nodeDebugAdapter]
VSND2001 = 未能在 PATH 上找到运行时“{0}”。请确保已安装“{0}”。
attribute.path.not.absolute = 属性“{0}”不是绝对路径（“{1}”）；可考虑将“{2}”添加为前缀以使其成为绝对路径。
attribute.path.not.exist = 属性“{0}”不存在（“{1}”）。
attribute.wsl.not.exist = 找不到安装的 Windows 的 Linux 子系统（WSL）。
more.information = 更多信息
node.console.title = Node 调试台
origin.core.module = 只读核心模块
origin.from.node = Node.js 的只读内容
program.path.case.mismatch.warning = 程序路径与硬盘上的文件一样使用大小写不同的字符；这可能导致出现未被命中的断点。

[package]
extension.description = Node.js 调试支持
extensionHost.label = VS Code 扩展开发
extensionHost.launch.config.name = 启动扩展
extensionHost.launch.env.description = 传递到扩展宿主的环境变量。
extensionHost.launch.runtimeExecutable.description = VS Code 的绝对路径。
extensionHost.launch.stopOnEntry.description = 启动后自动停止扩展宿主。
extensionHost.snippet.launch.description = 在调试模式下启动 VS Code 扩展
extensionHost.snippet.launch.label = VS Code 扩展开发
debug.node.useV3.description = 将“extensionHost”类型的启动配置委托给 js-debug 扩展。（实验性功能）
node.address.description = 调试端口的 IP 地址。默认为 `"localhost"`。
node.attach.config.name = 附加
node.attach.localRoot.description = 与 `remoteRoot` 对应的本地源根目录。
node.attach.processId.description = 要附加的进程 PID。
node.attach.remoteRoot.description = 远程主机的源根目录。
node.diagnosticLogging.deprecationMessage = 已弃用：请改用 `trace`。
node.diagnosticLogging.description = 将诊断信息显示在调试台。
node.disableOptimisticBPs.description = 在为文件加载源映射之前，请不要在该文件中设置断点。
node.enableSourceMapCaching.description = 当依照 URL 下载源映射时，将其缓存到硬盘上。
node.label = 借助于检查器协议的 Node.js v6.3+
node.launch.args.description = 传递给程序的命令行参数。
node.launch.config.name = 启动
node.launch.console.description = 启动调试目标的位置：调试台、集成终端或外部终端。
node.launch.cwd.description = 正在进行调试的程序的工作目录的绝对路径。
node.launch.env.description = 传递给程序的环境变量。设置为 `null` 表示从环境中移除变量。
node.launch.envFile.description = 包含环境变量定义的文件的绝对路径。
node.launch.outputCapture.description = 捕获输出信息的位置：调试 API 或者标准输出、标准错误流。
node.launch.program.description = 程序的绝对路径。
node.launch.runtimeArgs.description = 传递给运行时可执行文件的可选参数。
node.launch.runtimeExecutable.description = 要使用的运行时。应为绝对路径或在 PATH 上可用的运行时名称。默认为 `"node"`。
node.outFiles.description = 如果启用了源映射，这些 glob 模式将指定生成的 JavaScript 文件。如果模式以 `!` 开始，则排除这些文件。如果未指定，则生成的代码应与其源代码位于同一目录。
node.port.description = 要附加到的调试端口。默认为 `9229`。
node.processattach.config.name = 附加到进程
node.restart.description = 在终止 Node.js 后重新启动会话。
node.showAsyncStacks.description = 显示引导至当前调用堆栈的异步调用。
node.skipFiles.description = 将在调试时跳过的一组文件名、文件夹名称或 glob 模式。
node.smartStep.description = 自动单步执行未能映射回原始源的生成代码。
node.sourceMapPathOverrides.description = 用于根据源映射所述重写源文件位置的一组映射，其将映射到硬盘上所处位置。请参见自述文件了解详细信息。
node.sourceMaps.description = 使用 JavaScript 源映射（如果存在）。
node.stopOnEntry.description = 启动后自动停止程序。
node.timeout.description = 重试连接到 Node.js 的此毫秒数。默认为 10000ms。
node.trace.description = 将跟踪信息记录到文件中。当为 `"verbose"` 时，则它还将在控制台中显示日志。
node.verboseDiagnosticLogging.deprecationMessage = 已弃用：请改用 `trace`。
node.verboseDiagnosticLogging.description = 记录客户端和目标的所有通信（以及由“diagnosticLogging”记录的信息）。
outDir.deprecationMessage = 已弃用：请改用 `outFiles`。
toggle.skipping.this.file = 切换是否跳过此文件
