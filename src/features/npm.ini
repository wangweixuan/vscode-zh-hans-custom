[dist/commands]
noScriptFound = 所选内容没有 npm 脚本。

[dist/features/bowerJSONContribution]
json.bower.default = 默认“bower.json”
json.bower.error.repoaccess = 访问 Bower 储存库时出错：{0}
json.bower.latest.version = 最新

[dist/features/packageJSONContribution]
json.npm.error.repoaccess = 访问 npm 储存库时出错：{0}
json.npm.latestversion = 最新版本
json.npm.majorversion = 有次要版本更新
json.npm.minorversion = 有修补版本更新
json.npm.version.hover = 最新版本：{0}
json.package.default = 默认 package.json

[dist/npmView]
autoDetectIsOff = “npm.autoDetect”设置已关闭。
learnMore = 了解详细信息
noDebugOptions = 不能以调试模式运行“{0}”脚本：脚本需要 Node 调试选项，如 `--inspect-brk`。
noScripts = 没有脚本
ok = 确定

[dist/scriptHover]
debugScript = 调试脚本
debugScript.tooltip = 在 Node 调试器下运行脚本
runScript = 运行脚本
runScript.tooltip = 将脚本作为任务运行

[dist/tasks]
npm.parseError = 检测 npm 脚本时在 {0} 文件中发现语法错误。

[package]
command.debug = 调试
command.openScript = 转到
command.refresh = 刷新
command.run = 运行
command.runInstall = 运行 install 脚本
command.runScriptFromFolder = 运行文件夹中的 npm 脚本…
command.runSelectedScript = 运行脚本
config.npm.autoDetect = 自动检测 npm 脚本。
config.npm.enableRunFromFolder = 通过“资源”面板上下文菜单运行文件夹中包含的 npm 脚本。
config.npm.enableScriptExplorer = 在“资源”面板中显示“npm 脚本”视图。
config.npm.exclude = 配置应从自动脚本检测中排除的文件夹的 glob 模式。
config.npm.fetchOnlinePackageInfo = 在 npm 依赖项列表中提供自动完成和悬停提示功能。（从 https://registry.npmjs/org 和 https://registry.bower.io 抓取数据。）
config.npm.packageManager = 用于运行脚本的包管理器。
config.npm.runSilent = 使用 `--silent` 选项运行 npm 命令。
config.npm.scriptExplorerAction = 在“npm 脚本”视图中点击脚本时应转到 package.json 还是运行脚本。
description = 自动检测并运行 npm 任务，跟踪 npm 依赖项的信息。
displayName = npm 集成
npm.parseError = 检测 npm 脚本时在 {0} 文件中发现语法错误。
taskdef.path = package.json 所在文件夹的路径。默认为当前工作目录。
taskdef.script = package.json 文件中注册的脚本的名称。
view.name = npm 脚本
