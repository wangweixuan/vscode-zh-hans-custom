[dist/commands/goToProjectConfiguration]
typescript.configureJsconfigQuickPick = 配置 jsconfig.json
typescript.configureTsconfigQuickPick = 配置 tsconfig.json
typescript.noJavaScriptProjectConfig = 文件不属于 JavaScript 项目。点击[此处]({0})了解更多信息。
typescript.noTypeScriptProjectConfig = 文件不属于 TypeScript 项目。点击[此处]({0})了解更多信息。
typescript.projectConfigCouldNotGetInfo = 未能确定 TypeScript 或 JavaScript 项目。
typescript.projectConfigNoWorkspace = 请在 VS Code 中打开一个文件夹，以使用 TypeScript 或 JavaScript 项目。
typescript.projectConfigUnsupportedFile = 未能确定 TypeScript 或 JavaScript 项目。不受支持的文件类型。

[dist/features/baseCodeLensProvider]
referenceErrorLabel = 未能确定引用

[dist/features/completions]
acquiringTypingsDetail = 获取智能感知的类型定义。
acquiringTypingsLabel = 正在获取类型定义…
autoImportLabel = 从 {0} 自动导入
selectCodeAction = 选择要应用的代码操作

[dist/features/directiveCommentCompletions]
ts-check = 在 JavaScript 文件中启用语义检查。必须在文件顶部。
ts-ignore = 取消文件下一行的 @ts-check 错误提示。
ts-nocheck = 在 JavaScript 文件中禁用语义检查。必须在文件顶部。

[dist/features/fixAll]
autoFix.label = 自动修复

[dist/features/implementationsCodeLens]
manyImplementationLabel = {0} 个实现
oneImplementationLabel = 1 个实现

[dist/features/jsDocCompletions]
typescript.jsDocCompletionItem.documentation = JSDoc 注释

[dist/features/organizeImports]
organizeImportsAction.title = 整理导入语句

[dist/features/quickFix]
fixAllInFileLabel = {0}（修复文件中所有）

[dist/features/refactor]
extract.disabled = 未能提取所选内容
refactoringFailed = 未能应用重构

[dist/features/referencesCodeLens]
manyReferenceLabel = {0} 个引用
oneReferenceLabel = 1 个引用

[dist/features/rename]
fileRenameFail = 重命名文件时出错

[dist/features/task]
badTsConfig = “tasks.json”文件中的 TypeScript 任务包含“\\\\”。TypeScript 任务的 tsconfig 必须使用“/”。
buildAndWatchTscLabel = 监视 - {0}
buildTscLabel = 构建 - {0}

[dist/features/updatePathsOnRename]
accept.title = 是
always.title = 始终自动更新导入语句
moreFile = 还有1 个文件…
moreFiles = 还有 {0} 个文件…
never.title = 一律不更新导入语句
prompt = 是否更新已移动文件的导入语句：“{0}”？
promptMoreThanOne = 是否更新以下 {0} 个文件的导入？
reject.title = 否
renameProgress.title = 正在检查导入语句的更新

[dist/typescriptServiceClient]
noServerFound = 路径 {0} 未指向有效的 tsserver。请回退到 VS Code 自带的 TypeScript 版本。
openTsServerLog.openFileFailedFailed = 未能打开 TS 服务器日志文件
serverDied = 在过去 5 分钟内，TypeScript 语言服务意外中止了 5 次。
serverDiedAfterStart = TypeScript 语言服务在其启动后已中止 5 次。将不会重新启动该服务。
serverDiedReportIssue = 报告问题
serverExitedWithError = TypeScript 语言服务器因错误而退出。错误消息：{0}
serverLoading.progress = 正在初始化 JavaScript/TypeScript 语言功能
typescript.openTsServerLog.enableAndReloadOption = 启用日志记录并重新启动 TS 服务器
typescript.openTsServerLog.loggingNotEnabled = TS 服务器日志已关闭。请设置“typescript.tsserver.log”并重新启动 TS 服务器以启用日志。
typescript.openTsServerLog.noLogFile = TS 服务器尚未启动日志记录。

[dist/utils/api]
invalidVersion = 无效版本

[dist/utils/logger]
channelName = TypeScript

[dist/utils/projectStatus]
hintExclude = 若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含多个文件的文件夹，如 {0}
hintExclude.generic = 若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含不需要处理的源文件的大型文件夹。
hintExclude.tooltip = 若要启用项目范围内的 JavaScript/TypeScript 语言功能，请排除包含不需要处理的源文件的大型文件夹。
large.label = 设置排除项
statusExclude = TypeScript：设置排除项

[dist/utils/surveyor]
neverAgain = 禁用调查
remindLater = 以后提醒
survey.checkJs.prompt = 帮助我们改善 VS Code 对 JavaScript [checkJs](https://code.visualstudio.com/Docs/languages/javascript#_type-checking) 的支持！您已经使用过了这个功能，请问您能否参与有关其体验的一个简短调查呢？
takeShortSurvey = 参与小调查

[dist/utils/typingsStatus]
installingPackages = 正在为 TypeScript 智能感知获取类型定义
typesInstallerInitializationFailed.doNotCheckAgain = 不再显示
typesInstallerInitializationFailed.title = 未能为 JavaScript 语言功能安装类型定义文件。请确认 npm 已安装，或在您的用户设置中配置“typescript.npm”。点击[此处]({0})了解更多信息。

[dist/utils/versionPicker]
learnMore = 了解详细信息
selectTsVersion = 选择用于 JavaScript 和 TypeScript 语言功能的 TypeScript 版本
useVSCodeVersionOption = 使用 VS Code 的版本
useWorkspaceVersionOption = 使用工作区版本

[dist/utils/versionProvider]
couldNotLoadTsVersion = 未能获取此目录 TypeScript 的版本
noBundledServerFound = VS Code 的 tsserver 已被其他应用程序（例如运行异常的病毒检测工具）删除。请重新安装 VS Code。

[dist/utils/versionStatus]
typescriptVersion = TypeScript：版本

[package]
codeActions.refactor.extract.constant.description = 将表达式提取为常量。
codeActions.refactor.extract.constant.title = 提取常量
codeActions.refactor.extract.function.description = 将表达式提取为方法或函数。
codeActions.refactor.extract.function.title = 提取函数
codeActions.refactor.extract.interface.description = 将类型提取为接口。
codeActions.refactor.extract.interface.title = 提取接口
codeActions.refactor.extract.type.description = 将类型提取为类型别名。
codeActions.refactor.extract.type.title = 提取类型
codeActions.refactor.move.newFile.description = 将表达式移动到新文件。
codeActions.refactor.move.newFile.title = 移动到新文件
codeActions.refactor.rewrite.arrow.braces.description = 添加或删除箭头函数中的大括号。
codeActions.refactor.rewrite.arrow.braces.title = 改写箭头大括号
codeActions.refactor.rewrite.export.description = 在默认导出和命名导出之间转换。
codeActions.refactor.rewrite.export.title = 转换导出
codeActions.refactor.rewrite.import.description = 在命名导入和命名空间导入之间转换。
codeActions.refactor.rewrite.import.title = 转换导入
codeActions.refactor.rewrite.parameters.toDestructured.title = 改写参数为解构对象
codeActions.refactor.rewrite.property.generateAccessors.description = 生成“get”和“set”访问器。
codeActions.refactor.rewrite.property.generateAccessors.title = 生成访问器
codeActions.source.organizeImports.title = 整理 import 语句
configuration.suggest.autoImports = 自动导入建议。要求工作区使用高于 2.6.1 版本的 TypeScript。
configuration.suggest.completeFunctionCalls = 完成函数的参数签名。
configuration.suggest.completeJSDocs = 对完成 JSDoc 注释的建议。
configuration.suggest.includeAutomaticOptionalChainCompletions = 显示可能未定义的值的完成情况，这些值会插入可选的链式调用。要求工作区使用高于 3.7 版本的 TypeScript 并启用“strictNullCheck”。
configuration.suggest.names = 在 JavaScript 建议列表中包含文件中的唯一名称。
configuration.suggest.paths = 在 import 语句和 require 调用中，启用或禁用路径建议。
configuration.surveys.enabled = 偶尔出现的有关 JavaScript 和 TypeScript 的调查，帮助我们改善 VS Code 对两者的支持。
configuration.tsserver.maxTsServerMemory = 分配给 TypeScript 服务器进程的最大内存量，以 MB 为单位。
configuration.tsserver.useSeparateSyntaxServer = 使用独立的 TypeScript 服务器来响应仅与语法相关的操作，以降低这些操作的准备时间。要求工作区使用 3.4 或更高版本的 TypeScript。
configuration.typescript = TypeScript
description = 为 JavaScript 和 TypeScript 提供丰富的语言支持。
displayName = JavaScript 和 TypeScript 语言功能
format.insertSpaceAfterCommaDelimiter = 定义逗号分隔符后面的空格处理。
format.insertSpaceAfterConstructor = 定义 constructor 关键字后的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
format.insertSpaceAfterFunctionKeywordForAnonymousFunctions = 定义匿名函数的函数关键字后面的空格处理。
format.insertSpaceAfterKeywordsInControlFlowStatements = 定义控制流语句中关键字后面的空格处理。
format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces = 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces = 定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = 定义非空中括号的左括号后和右括号前的空格处理方式。
format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = 定义非空小括号的左括号后和右括号前的空格处理方式。
format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces = 定义模板字符串括号中左括号后和右括号前的空格处理方式。
format.insertSpaceAfterSemicolonInForStatements = 定义 for 语句中分号之后的空格处理方式。
format.insertSpaceAfterTypeAssertion = 定义 TypeScript 中类型断言后的空格处理方式。要求工作区使用高于 2.4 版本的 TypeScript。
format.insertSpaceBeforeAndAfterBinaryOperators = 定义二进制运算符后面的空格处理
format.insertSpaceBeforeFunctionParenthesis = 定义函数参数括号前的空格处理方式。
format.placeOpenBraceOnNewLineForControlBlocks = 定义控制块的左括号是否放置在新的一行。
format.placeOpenBraceOnNewLineForFunctions = 定义函数的左大括号是否放置在新的一行。
format.semicolons = 如何处理非必要的分号。要求工作区使用高于 3.7 版本的 TypeScript。
format.semicolons.ignore = 不要插入或删除任何分号。
format.semicolons.insert = 在语句末尾插入分号。
format.semicolons.remove = 删除不必要的分号。
goToProjectConfig.title = 转到项目配置
javascript.format.enable = 启用或禁用 JavaScript 格式化程序。
javascript.implicitProjectConfig.checkJs = 对 JavaScript 文件进行语义检查。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。
javascript.implicitProjectConfig.experimentalDecorators = 对不属于任何工程的 JavaScript 文件启用或禁用 `experimentalDecorators` 设置。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。
javascript.referencesCodeLens.enabled = 在 JavaScript 文件中引用代码滤镜。
javascript.referencesCodeLens.showOnAllFunctions = 在 JavaScript 文件中的所有函数上启用引用代码透镜。
javascript.suggestionActions.enabled = 编辑器中 JavaScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。
javascript.validate.enable = 验证 JavaScript。
reloadProjects.title = 重载项目
taskDefinition.tsconfig.description = 定义 ts 生成的 tsconfig 文件。
typescript.autoClosingTags = 启用或禁用自动关闭 JSX 标记。要求工作区使用高于 3.0 版本的 TypeScript。
typescript.check.npmIsInstalled = 检查是否安装了 npm 以自动获取类型。
typescript.disableAutomaticTypeAcquisition = 禁用自动类型获取。自动类型获取从 npm 提取 `@types` 包，提高对于外部库的智能感知能力。
typescript.format.enable = 使用默认 TypeScript 格式化程序。
typescript.implementationsCodeLens.enabled = 启用或禁用实现代码滤镜。此代码滤镜显示接口的实现。
typescript.locale = 设置在报告 JavaScript 和 TypeScript 的错误时使用的区域设置。要求工作区使用高于 2.6.0 版本的 TypeScript。默认（`null`）使用 VS Code 的区域设置。
typescript.npm = 指定用于自动获取类型的 npm 可执行文件的路径。要求工作区使用高于 2.3.4 版本的 TypeScript。
typescript.openTsServerLog.title = 打开 TS 服务器日志
typescript.preferences.importModuleSpecifier = 自动添加的 import 语句中路径的样式。
typescript.preferences.importModuleSpecifier.auto = 自动选择路径样式。如果设置了 `baseUrl` 且相对路径较非相对路径更短，则选相对路径。
typescript.preferences.importModuleSpecifier.nonRelative = 根据 `jsconfig.json` 或 `tsconfig.json` 中配置的 `baseUrl`。
typescript.preferences.importModuleSpecifier.relative = 相对于文件位置。
typescript.preferences.quoteStyle = 用于快速修复的首选引用样式：`single`（单引号）、`double`（双引号）或 `auto`（从已有导入语句中推测引号类型）。要求工作区使用高于 2.9 版本的 TypeScript。
typescript.preferences.renameShorthandProperties = 启用或禁用在重命名过程中引入对象速记属性的别名。需要在工作区中使用 TypeScript 3.4 或更高版本。
typescript.problemMatchers.tsc.label = TypeScript 问题
typescript.problemMatchers.tscWatch.label = TypeScript 问题（观看模式）
typescript.referencesCodeLens.enabled = 在 TypeScript 文件中启用或禁用引用代码滤镜。
typescript.referencesCodeLens.showOnAllFunctions = 在 TypeScript 文件中的所有函数上启用引用代码透镜。
typescript.reportStyleChecksAsWarnings = 将风格检查的问题报告为警告。
typescript.restartTsServer = 重新启动 TS 服务器
typescript.selectTypeScriptVersion.title = 选择 TypeScript 版本…
typescript.suggest.enabled = 启用或禁用自动完成建议。
typescript.suggestionActions.enabled = 启用或禁用编辑器中 TypeScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。
typescript.tsc.autoDetect = 是否自动检测 tsc 任务。
typescript.tsc.autoDetect.build = 仅创建单次运行编译任务。
typescript.tsc.autoDetect.off = 禁用此功能。
typescript.tsc.autoDetect.on = 同时创建生成和监视任务。
typescript.tsc.autoDetect.watch = 仅创建编译和监视任务。
typescript.tsdk.desc = 指定包含要使用的 tsserver 和 lib*.d.ts 文件的文件夹路径。
typescript.tsserver.log = 将 TS 服务器的日志存储到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含您的项目中的文件路径、源代码和其他可能敏感的信息。
typescript.tsserver.pluginPaths = 其他用于搜索 TypeScript 语言服务插件的路径。要求工作区使用高于 2.3.0 版本的 TypeScript。
typescript.tsserver.pluginPaths.item = 相对或绝对路径。相对路径将根据工作区文件夹进行解析。
typescript.tsserver.trace = 对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含您的项目中的文件路径、源代码和其他可能敏感的信息。
typescript.updateImportsOnFileMove.enabled = 当在 VS Code 中重命名或移动文件时，启用或禁用自动更新导入路径。要求工作区使用高于 2.9 版本的 TypeScript。
typescript.updateImportsOnFileMove.enabled.always = 始终自动更新路径。
typescript.updateImportsOnFileMove.enabled.never = 一律不要重命名路径，也不要提示。
typescript.updateImportsOnFileMove.enabled.prompt = 在每次重命名时进行提示。
typescript.validate.enable = 验证 TypeScript。
