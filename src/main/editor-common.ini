[vs/editor/common/config/commonEditorConfig]
detectIndentation = 在打开文件时，基于文件内容自动检测 `#editor.tabSize#` 和 `#editor.insertSpaces#`。
editorConfigurationTitle = 编辑器
ignoreTrimWhitespace = 在差异编辑器中把前导空格或行末空格的改动显示为差异。
insertSpaces = 按 Tab 键插入空格。该设置在 `#editor.detectIndentation#` 启用时根据文件内容可能会被覆盖。
largeFileOptimizations = 对大型文件进行特殊处理，禁用某些内存密集型功能。
maxComputationTime = 取消差异计算前的超时，以毫秒为单位。"0" 表示没有超时。
maxTokenizationLineLength = 进行词法分析的行的最长长度。
renderIndicators = 在差异编辑器中，为添加、删除的更改显示“+”、“-”指示符号。
semanticHighlighting.enabled = 根据语义进行高亮显示。需要语言支持。
sideBySide = 差异编辑器的显示方式是并排还是内联。
stablePeek = 在速览编辑器中，即使双击其中的内容或者按 `Esc` 键，也保持其打开状态。
tabSize = 一个制表符相当的空格数。在 `#editor.detectIndentation#` 启用时，根据文件内容，该设置可能会被覆盖。
trimAutoWhitespace = 删除自动插入的行末空格。
wordBasedSuggestions = 根据文档中的文字计算自动完成列表。

[vs/editor/common/config/editorOptions]
acceptSuggestionOnCommitCharacter = 是否应在遇到提交字符时接受建议。例如，在 JavaScript 中，分号可以为提交字符，能够在接受建议的同时键入该字符。
acceptSuggestionOnEnter = 除了 Tab 键外，Enter 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。
acceptSuggestionOnEnterSmart = 仅当建议包含文本改动时才可使用 Enter 键进行接受。
accessibilityPageSize = 可被屏幕阅读器读出的编辑器中内容的行数。过大的值对性能有影响。
accessibilitySupport = 是否针对屏幕阅读器进行优化。
accessibilitySupport.auto = 将通过操作系统 API 来决定是否使用屏幕阅读器。
accessibilitySupport.off = 不针对屏幕阅读器进行优化。
accessibilitySupport.on = 针对屏幕阅读器进行优化。
alternativeDeclarationCommand = 当转到声明的结果为当前位置时，要执行的替代命令的标识符。
alternativeDefinitionCommand = 当转到定义的结果为当前位置时，要执行的替代命令的。
alternativeImplementationCommand = 当转到实现的结果为当前位置时，要执行的替代命令的标识符。
alternativeReferenceCommand = 当转到引用的结果是当前位置时，要执行的替代命令的标识符。
alternativeTypeDefinitionCommand = 当转到类型定义的结果是当前位置时，要执行的替代命令的标识符。
autoClosingBrackets = 键入左括号时自动补充右括号。
autoClosingOvertype = 自动改写右引号和右括号。
autoClosingQuotes = 键入左引号时自动补充右引号。
autoIndent = 在键入、粘贴或移动行时自动调整缩进。
autoSurround = 自动包住所选内容。
codeActions = 显示代码操作灯泡提示。
codeLens = 显示代码透镜。
colorDecorators = 显示内联颜色修饰器和颜色选取器。
columnSelection = 启用使用鼠标和键进行列选择。
comments.insertSpace = 在注释时插入空格字符。
copyWithSyntaxHighlighting = 在拷贝时保留语法高亮。
cursorBlinking = 光标动画样式。
cursorSmoothCaretAnimation = 启用平滑的光标动画。
cursorStyle = 光标样式。
cursorSurroundingLines = 光标周围可见的前置行和尾随行的最小数目。在其他一些编辑器中称为“scrollOff”或“scrollOffset”。
cursorSurroundingLinesStyle = 何时执行 "cursorSurroundingLines"。
cursorSurroundingLinesStyle.all = 始终执行 "cursorSurroundingLines"。
cursorSurroundingLinesStyle.default = 仅当从键盘和 API 触发时，才会执行 "cursorSurroundingLines"。
cursorWidth = 光标的宽度（适用于 `#editor.cursorStyle#` 设置为 `"line"` 时）。
definitionLinkOpensInPeek = 在速览编辑器中打开定义链接。
deprecated = 已弃用：请改用单独的设置，如 `"editor.suggest.showKeywords"` 或 `"editor.suggest.showSnippets"`。
dragAndDrop = 允许通过拖放来移动选区。
editor.autoClosingBrackets.beforeWhitespace = 仅当光标位于空白字符左侧时，才自动闭合括号。
editor.autoClosingBrackets.languageDefined = 使用语言配置确定何时自动闭合括号。
editor.autoClosingOvertype.auto = 仅在自动插入时才改写右引号和右括号。
editor.autoClosingQuotes.beforeWhitespace = 仅当光标位于空白字符左侧时，才自动闭合引号。
editor.autoClosingQuotes.languageDefined = 使用语言配置确定何时自动闭合引号。
editor.autoIndent.advanced = 编辑器将保留当前行的缩进，考虑语言定义的括号，并执行语言特定的换行规则。
editor.autoIndent.brackets = 编辑器将保留当前行的缩进并考虑语言定义的括号。
editor.autoIndent.full = 编辑器将保留当前行的缩进，考虑语言定义的括号，并执行语言特定的换行规则、缩进规则。
editor.autoIndent.keep = 编辑器将保留当前行的缩进。
editor.autoIndent.none = 编辑器不会自动插入缩进。
editor.autoSurround.brackets = 使用括号而非引号来包住所选内容。
editor.autoSurround.languageDefined = 使用语言配置确定何时自动包住所选内容。
editor.autoSurround.quotes = 使用引号而非括号来包住所选内容。
editor.editor.gotoLocation.multipleDeclarations = 有多个目标位置时，如何执行转到声明命令。
editor.editor.gotoLocation.multipleDefinitions = 有多个目标位置时，如何执行转到定义命令。
editor.editor.gotoLocation.multipleImplemenattions = 有多个目标位置时，如何执行转到实现命令。
editor.editor.gotoLocation.multipleReferences = 有多个目标位置时，如何执行转到引用命令。
editor.editor.gotoLocation.multipleTypeDefinitions = 有多个目标位置时，如何执行转到类型定义命令。
editor.find.autoFindInSelection.always = 始终自动打开“在选择中查找”。
editor.find.autoFindInSelection.multiline = 选择多行内容时，自动打开“在选择中查找”。
editor.find.autoFindInSelection.never = 从不自动打开“选择中查找”。
editor.gotoLocation.multiple.deprecated = 已弃用：请改用单独的设置，如 `"editor.editor.gotoLocation.multipleDefinitions"` 或 `"editor.editor.gotoLocation.multipleImplementations"`。
editor.gotoLocation.multiple.goto = 转到主要结果。
editor.gotoLocation.multiple.gotoAndPeek = 转到主要结果并显示预览视图。
editor.gotoLocation.multiple.peek = 显示结果的预览视图。
editor.suggest.hideStatusBar = 隐藏建议小部件底部的状态栏。
editor.suggest.showClasss = 显示类名建议。
editor.suggest.showColors = 显示颜色建议。
editor.suggest.showConstants = 显示常量建议。
editor.suggest.showConstructors = 显示构造函数建议。
editor.suggest.showCustomcolors = 显示自定义颜色建议。
editor.suggest.showEnumMembers = 显示枚举成员建议。
editor.suggest.showEnums = 显示枚举建议。
editor.suggest.showEvents = 显示事件建议。
editor.suggest.showFields = 显示字段建议。
editor.suggest.showFiles = 显示文件建议。
editor.suggest.showFolders = 显示文件夹建议。
editor.suggest.showFunctions = 显示函数建议。
editor.suggest.showInterfaces = 显示接口建议。
editor.suggest.showKeywords = 显示关键字建议。
editor.suggest.showMethods = 显示方法建议。
editor.suggest.showModules = 显示模块建议。
editor.suggest.showOperators = 显示运算符建议。
editor.suggest.showPropertys = 显示属性建议。
editor.suggest.showReferences = 显示引用建议。
editor.suggest.showSnippets = 显示代码片段建议。
editor.suggest.showStructs = 显示结构体建议。
editor.suggest.showTexts = 显示文本建议。
editor.suggest.showTypeParameters = 显示类型参数建议。
editor.suggest.showUnits = 显示单位建议。
editor.suggest.showValues = 显示值建议。
editor.suggest.showVariables = 显示变量建议。
editorViewAccessibleLabel = 编辑器内容
emptySelectionClipboard = 拷贝时没有选择内容，则拷贝光标所在行。
fastScrollSensitivity = 按 Alt 键按时滚动速度加倍。
find.addExtraSpaceOnTop = 打开“查找”小组件时允许编辑器滚动到第一行之前，使前几行不被小组件挡住。
find.autoFindInSelection = 在执行查找操作时，在编辑器中的选中文本中还是整个文件中进行查找。
find.globalFindClipboard = 使“查找”小组件在 macOS 的共享查找粘贴板中读取和写入内容。
find.seedSearchStringFromSelection = 将编辑器选中内容作为搜索词填入到“查找”小组件中。
folding = 启用代码折叠。
foldingHighlight = 突出显示折叠范围。
foldingStrategy = 计算折叠范围的策略。`"auto"` 将使用语言特定的折叠策略（若可用），`"indentation"` 将使用基于缩进的折叠策略。
foldingStrategy.auto = 优先使用语言特定的折叠算法，如果语言不支持则使用基于缩进的折叠算法。
foldingStrategy.indentation = 使用基于缩进的折叠算法。
fontFamily = 字体系列。
fontFeatureSettings = 显式字体功能设置。
fontLigatures = 启用字体连字。
fontLigaturesGeneral = 配置字体连字。
fontSize = 字体大小，以像素为单位。
fontWeight = 字体粗细。
formatOnPaste = 自动格式化粘贴的内容。
formatOnType = 键入完一行后自动格式化该行。
glyphMargin = 呈现竖排字形边距。字形边距最常用于调试。
hideCursorInOverviewRuler = 不在概览标尺显示光标。
highlightActiveIndentGuide = 突出显示活动的缩进参考线。
hover.delay = 显示悬停提示前的延迟时间，以毫秒为单位。
hover.enabled = 显示悬停提示。
hover.sticky = 当鼠标移动到悬停提示上时，使其保持可见。
letterSpacing = 字母间距，以像素为单位。
lineHeight = 行高。设置为 `0` 表示根据字体大小自动计算。
lineNumbers = 显示行号。
lineNumbers.interval = 每 10 行显示一个行号。
lineNumbers.off = 不显示行号。
lineNumbers.on = 显示所有行的行号。
lineNumbers.relative = 将行号显示为与光标所在行相差的行数。
links = 在编辑器中使链接可以点击。
matchBrackets = 当选择其中一项时，将突出显示匹配的括号。
minimap.enabled = 显示小地图。
minimap.maxColumn = 小地图最多显示的列数。
minimap.mode = 小地图中如何控制字符的高度。
minimap.mode.actual = 以原始高度显示字符。可能使小地图高度超出编辑器。
minimap.mode.contain = 如果小地图过高则缩小字符高度，使小地图能在编辑器中完整显示。
minimap.mode.cover = 始终保持小地图高度与编辑器高度相等，以此决定字符高度。
minimap.renderCharacters = 渲染每行的实际字符，而不是色块。
minimap.scale = 在小地图中绘制内容的比例。
minimap.showSlider = 自动隐藏小地图滑块。
minimap.side = 在哪一侧显示小地图。
mouseWheelScrollSensitivity = 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
mouseWheelZoom = 按住 Ctrl 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。
multiCursorMergeOverlapping = 当多个光标重叠时进行合并。
multiCursorModifier = 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突。[阅读详细信息](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)
multiCursorModifier.alt = 映射为 Alt（Windows 和 Linux）或 Option（macOS）。
multiCursorModifier.ctrlCmd = 映射为 Ctrl（Windows 和 Linux）或 Command（macOS）。
multiCursorPaste = 在多光标下如何粘贴多行文本。
multiCursorPaste.full = 在每个光标处粘贴全文。
multiCursorPaste.spread = 在每个光标处粘贴一行文本。
occurrencesHighlight = 突出显示语义符号的匹配项。
overviewRulerBorder = 在概览标尺周围显示边框。
padding.bottom = 编辑器中最后一行之下的空白大小。
padding.top = 编辑器中第一行之上的空白大小。
parameterHints.cycle = 参数提示菜单在到达列表末尾时进行循环还是关闭。
parameterHints.enabled = 在键入时显示含有参数文档和类型信息的小面板。
peekWidgetDefaultFocus = 打开速览编辑器时，应聚焦的视图。可以为速览编辑器中的文本，或是速览编辑器中的文件列表。
peekWidgetDefaultFocus.editor = 聚焦到编辑器中的文本。
peekWidgetDefaultFocus.tree = 聚焦到编辑器旁的文件列表。
quickSuggestions = 在键入时自动显示建议。
quickSuggestions.comments = 在注释内启用快速建议。
quickSuggestions.other = 在字符串和注释外启用快速建议。
quickSuggestions.strings = 在字符串内启用快速建议。
quickSuggestionsDelay = 显示快速建议前的延迟时间，以毫秒为单位。
renderControlCharacters = 显示控制字符。
renderFinalNewline = 当文件以换行符结束时，显示最后一行的行号。
renderIndentGuides = 显示缩进参考线。
renderLineHighlight = 当前行进行高亮显示的方式。
renderLineHighlight.all = 突出显示行号栏和当前行。
renderWhitespace = 在空白字符上显示符号的方式。
renderWhitespace.selection = 在选中的文本中的空白字符上显示符号。
roundedSelection = 使选区背景有圆角。
rulers = 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。
rulers.color = 编辑器标尺的颜色。
rulers.size = 编辑器标尺的宽度。
scrollBeyondLastColumn = 水平滚动时可以超过范围的字符数。
scrollBeyondLastLine = 允许滚动到最后一行之后。
scrollPredominantAxis = 在一次滚动时只允许在一个方向上滚动。默认情况下，可以同时沿竖直方向和水平方向滚动。只允许在一个方向上滚动后可防止编辑器在上下滚动时同时在左右方向上滚动。
selectionClipboard = 支持 Linux 主粘贴板。
selectionHighlight = 突出显示与所选内容类似的匹配项。
showFoldingControls = 自动隐藏行号栏上的折叠按钮。
showFoldingControls.always = 始终显示折叠按钮。
showFoldingControls.mouseover = 当鼠标悬停在编辑器侧边时显示折叠按钮。
showUnused = 淡化未使用的代码。
smoothScrolling = 滚动编辑器时使用平滑动画。
snippetSuggestions = 代码片段如何显示作为建议显示。
snippetSuggestions.bottom = 在其他建议下方显示代码片段建议。
snippetSuggestions.inline = 在其他建议中穿插显示代码片段建议。
snippetSuggestions.none = 不显示代码片段建议。
snippetSuggestions.top = 在其他建议上方显示代码片段建议。
suggest.filterGraceful = 对建议的筛选和排序是否考虑小的拼写错误。
suggest.insertHighlight = 在接受补全时高亮显示意外的文本修改。如当插入模式为替换，但补全仅支持插入时。
suggest.insertMode = 在接受补全时覆盖单词。需要扩展支持。
suggest.insertMode.insert = 插入建议而不覆盖光标右侧的文本。
suggest.insertMode.replace = 插入建议并覆盖光标右侧的文本。
suggest.localityBonus = 排序时提高靠近光标的词语的优先级。
suggest.maxVisibleSuggestions = 在显示滚动条之前智能感知将显示的建议数（最多 15 个）。
suggest.shareSuggestSelections = 在多个工作区和窗口之间共享记忆的建议（适用于 `#editor.suggestSelection#`）。
suggest.showIcons = 在建议列表中显示图标。
suggest.snippetsPreventQuickSuggestions = 在活动代码片段内禁用快速建议。
suggestFontSize = 建议小组件的字号。设置为 `0` 表示使用 `#editor.fontSize#` 的值。
suggestLineHeight = 建议小组件的行高。设置为 `0` 表示使用 `#editor.lineHeight#` 的值。
suggestOnTriggerCharacters = 在键入触发字符后自动显示建议。
suggestSelection = 在建议列表中如何预先选择建议。
suggestSelection.first = 始终选择第一个建议。
suggestSelection.recentlyUsed = 选择最近的建议，除非进一步键入选择其他项，如 `console. -> console.log`，因为最近补全过 `log`。
suggestSelection.recentlyUsedByPrefix = 根据之前补全过的建议的前缀来进行选择，如 `co -> console`、`con -> const`。
tabCompletion = 是否启用 Tab 补全。
tabCompletion.off = 禁用 Tab 补全。
tabCompletion.on = 在按 Tab 键时进行 Tab 补全，将插入最佳匹配建议。
tabCompletion.onlySnippets = 在前缀匹配时进行 Tab 补全。在 `quickSuggestions` 未启用时体验最好。
unfoldOnClickAfterEndOfLine = 在点击位于行末的已折叠内容时，展开折叠的内容。
useTabStops = 根据制表位插入和删除空格。
wordSeparators = 执行单词相关的导航或操作时作为单词分隔符的字符。
wordWrap = 折行的方式。
wordWrap.bounded = 在视区宽度和 `#editor.wordWrapColumn#` 中的较小值处折行。
wordWrap.off = 永不换行。
wordWrap.on = 在视区宽度处换行。
wordWrap.wordWrapColumn = 在 `#editor.wordWrapColumn#` 处折行。
wordWrapColumn = 编辑器的折行列（适用于 `#editor.wordWrap#` 为 `"wordWrapColumn"` 或 `"bounded"` 时）。
wrappingIndent = 折行的缩进。
wrappingIndent.deepIndent = 折行的缩进量比其父级多 2。
wrappingIndent.indent = 折行的缩进量比其父级多 1。
wrappingIndent.none = 没有缩进。折行从第一列开始。
wrappingIndent.same = 折行的缩进量与其父级相同。
wrappingStrategy = 处理自动换行的算法。
wrappingStrategy.advanced = 使用浏览器提供的算法。此算法效率较低，但可支持各种文字。
wrappingStrategy.simple = 使用简单算法，假定所有字符宽度相等。此算法效率较高，但不支持等宽文字之外的字体和文字。

[vs/editor/common/model/editStack]
edit = 输入

[vs/editor/common/modes/modesRegistry]
plainText.alias = 纯文本

[vs/editor/common/standaloneStrings]
_constructor = 构造函数（{0}）
accessibilityHelpMessage = 按 Alt+F1 可打开辅助功能选项。
accessibilityHelpMessageIE = 按 Ctrl+F1 可打开辅助功能选项。
ariaLabelEntry = {0}，命令
ariaLabelEntryWithKey = {0}、{1}，命令
auto_off = 编辑器被配置为永远不进行优化以配合屏幕读取器的使用，而当前不是这种情况。
auto_on = 配置编辑器，将其进行优化以最好地配合屏幕读取器的使用。
bulkEditServiceSummary = 在 {1} 个文件中进行了 {0} 次编辑
call = 调用（{0}）
changeConfigToOnMac = 若要配置编辑器，将其进行优化以最好地配合屏幕阅读器的使用，按 Command+E。
changeConfigToOnWinLinux = 若要配置编辑器，将其进行优化以最高效地配合屏幕阅读器的使用，按 Control+E。
class = 类（{0}）
editableDiffEditor = \s在一个差异编辑器的窗格中。
editableEditor = \s在代码编辑器中
editorViewAccessibleLabel = 编辑器内容
emergencyConfOn = 现在将 `accessibilitySupport` 设置更改为 `"on"`。
entryAriaLabel = {0}，符号
function = 函数（{0}）
gotoLineActionInput = 键入行号，后跟可选冒号和要导航到的字符数
gotoLineActionLabel = 转到行…
gotoLineAriaLabel = 当前行：{0}。转到行 {1}。
gotoLineLabelEmptyWithLineAndColumnLimit = 键入 1 和 {0} 之间的字符以导航到
gotoLineLabelEmptyWithLineLimit = 键入要导航到的介于 1 和 {0} 之间的行号
gotoLineLabelValidLine = 转至行 {0}
gotoLineLabelValidLineAndColumn = 转到第 {0} 行，第 {1} 列
inspectTokens = 开发者工具：检查令牌
interface = 接口（{0}）
method = 方法（{0}）
modules = 模块（{0}）
multiSelection = {0} 个选区
multiSelectionRange = {0} 个选区（选中 {1} 个字符）
noSelection = 无选择
openDocMac = 现在按 Command+H 键打开一个浏览器窗口，其中包含有关编辑器辅助功能的详细信息。
openDocWinLinux = 现在按 Control+H 键打开一个浏览器窗口，其中包含有关编辑器辅助功能的更多信息。
openingDocs = 现在正在打开“编辑器辅助功能”文档页。
outroMsg = 按 Esc 键或 Shift+Esc 键消除此工具提示并返回到编辑器。
property = 属性（{0}）
quickCommandActionInput = 键入要执行的操作的名称
quickCommandActionLabel = 命令栏
quickOutlineActionInput = 键入要导航到的标识符的名称
quickOutlineActionLabel = 转到符号…
readonlyDiffEditor = \s在差异编辑器的只读窗格中。
readonlyEditor = \s在只读代码编辑器中
showAccessibilityHelpAction = 显示辅助功能帮助
singleSelection = 行 {0}，列 {1}
singleSelectionRange = 行 {0}，列 {1}（选中 {2} 个字符）
symbols = 符号（{0}）
tabFocusModeOffMsg = 在当前编辑器中按 Tab 键将插入制表符。通过按 {0} 切换此行为。
tabFocusModeOffMsgNoKb = 在当前编辑器中按 Tab 键会插入制表符。当前未能通过快捷键触发命令 {0}。
tabFocusModeOnMsg = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。通过按 {0} 切换此行为。
tabFocusModeOnMsgNoKb = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。当前未能通过快捷键触发命令 {0}。
toggleHighContrast = 切换高对比度主题
variable = 变量（{0}）
variable2 = 变量（{0}）

[vs/editor/common/view/editorColorRegistry]
caret = 编辑器光标颜色。
deprecatedEditorActiveLineNumber = 已弃用：请改用 `editorLineNumber.activeForeground`。
editorActiveIndentGuide = 编辑器活动缩进参考线的颜色。
editorActiveLineNumber = 编辑器活动行号的颜色。
editorBracketMatchBackground = 匹配括号的背景色。
editorBracketMatchBorder = 匹配括号外框的颜色。
editorCodeLensForeground = 编辑器代码透镜的前景色。
editorCursorBackground = 编辑器光标的背景色。可以自定义块型光标覆盖字符的颜色。
editorGutter = 编辑器行号栏的背景色。行号栏包括边缘符号和行号。
editorIndentGuides = 编辑器缩进参考线的颜色。
editorLineNumbers = 编辑器行号的颜色。
editorOverviewRulerBorder = 概览标尺边框颜色。
editorRuler = 编辑器标尺的颜色。
editorWhitespaces = 编辑器中空白字符的颜色。
lineHighlight = 光标所在行高亮内容的背景色。
lineHighlightBorderBox = 光标所在行四周边框的背景色。
overviewRuleError = 概览标尺中错误标记的颜色。
overviewRuleInfo = 概览标尺中信息标记的颜色。
overviewRuleWarning = 概览标尺中警告标记的颜色。
overviewRulerRangeHighlight = 用于突出显示范围的概述标尺标记颜色。颜色应透明。
rangeHighlight = 背景色的高亮范围，喜欢通过快速打开和查找功能。颜色应透明。
rangeHighlightBorder = 高亮区域边框的背景色。
symbolHighlight = 高亮显示符号的背景颜色。颜色应透明。
symbolHighlightBorder = 高亮显示符号的边框颜色。
unnecessaryCodeBorder = 编辑器中不必要（未使用）的源代码的边框颜色。
unnecessaryCodeOpacity = 非必须（未使用）代码的在编辑器中显示的不透明度，如 `#000000c0` 将以 75% 的不透明度显示代码。对于高对比度主题，请使用“editorUnnecessaryCode.border”主题来为非必须代码添加下划线，以避免颜色淡化。
