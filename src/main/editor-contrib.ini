[vs/editor/contrib/anchorSelect/anchorSelect]
anchorSet = 定位点设置为 {0}：{1}
cancelSelectionAnchor = 取消定位点
goToSelectionAnchor = 转到定位点
selectFromAnchorToCursor = 选择定位点与光标之间的内容
selectionAnchor = 定位点
setSelectionAnchor = 设置定位点

[vs/editor/contrib/bracketMatching/bracketMatching]
miGoToBracket = 转到括号(&&B)
overviewRulerBracketMatchForeground = 概览标尺上表示匹配括号的标记颜色。
smartSelect.jumpBracket = 转到括号
smartSelect.selectToBracket = 选择括号中的内容

[vs/editor/contrib/caretOperations/caretOperations]
caret.moveLeft = 将插入点左移
caret.moveRight = 将插入点右移

[vs/editor/contrib/caretOperations/transpose]
transposeLetters.label = 转置字母

[vs/editor/contrib/clipboard/clipboard]
actions.clipboard.copyLabel = 拷贝
actions.clipboard.copyWithSyntaxHighlightingLabel = 拷贝并保留语法高亮
actions.clipboard.cutLabel = 剪切
actions.clipboard.pasteLabel = 粘贴
miCopy = 拷贝(&&C)
miCut = 剪切(&&T)
miPaste = 粘贴(&&P)

[vs/editor/contrib/codeAction/codeActionCommands]
applyCodeActionFailed = 应用代码操作时发生未知错误。
args.schema.apply = 控制何时应用返回的操作。
args.schema.apply.first = 始终应用第一个返回的代码操作。
args.schema.apply.ifSingle = 如果仅返回的第一个代码操作，则应用该操作。
args.schema.apply.never = 不要应用返回的代码操作。
args.schema.kind = 要运行的代码操作的种类。
args.schema.preferred = 如果只应返回首选代码操作，则应返回控件。
autoFix.label = 自动修复…
editor.action.autoFix.noneMessage = 没有可用的自动修复
editor.action.codeAction.noneMessage = 没有可用的代码操作。
editor.action.codeAction.noneMessage.kind = 没有适用于“{0}”的代码操作。
editor.action.codeAction.noneMessage.preferred = 没有可用的首选代码操作。
editor.action.codeAction.noneMessage.preferred.kind = 没有适用于“{0}”的首选代码操作。
editor.action.organize.noneMessage = 没有可用的整理导入语句操作
editor.action.quickFix.noneMessage = 没有可用的代码操作
editor.action.refactor.noneMessage = 没有可用的重构操作
editor.action.refactor.noneMessage.kind = 没有可用的“{0}”重构。
editor.action.refactor.noneMessage.preferred = 没有可用的首选重构。
editor.action.refactor.noneMessage.preferred.kind = 没有适用于“{0}”的首选重构。
editor.action.source.noneMessage = 没有可用的源代码操作
editor.action.source.noneMessage.kind = 没有适用于“{0}”的源操作。
editor.action.source.noneMessage.preferred = 没有可用的首选源操作。
editor.action.source.noneMessage.preferred.kind = 没有适用于“{0}”的首选源操作。
fixAll.label = 全部修复
fixAll.noneMessage = 没有可用的全部修复操作
organizeImports.label = 整理导入语句
quickfix.trigger.label = 快速修复…
refactor.label = 重构…
source.label = 源操作…

[vs/editor/contrib/codeAction/lightBulbWidget]
prefferedQuickFixWithKb = 显示修复程序。首选可用修复程序（{0}）。
quickFix = 显示修复
quickFixWithKb = 显示修复（{0}）

[vs/editor/contrib/codelens/codelensController]
showLensOnLine = 显示当前行的代码滤镜命令

[vs/editor/contrib/comment/comment]
comment.block = 添加或取消块注释
comment.line = 添加或取消行注释
comment.line.add = 添加行注释
comment.line.remove = 取消行注释
miToggleBlockComment = 添加或取消块注释(&&B)
miToggleLineComment = 添加或取消行注释(&&T)

[vs/editor/contrib/contextmenu/contextmenu]
action.showContextMenu.label = 显示编辑器上下文菜单

[vs/editor/contrib/cursorUndo/cursorUndo]
cursor.redo = 软重做
cursor.undo = 软撤销

[vs/editor/contrib/documentSymbols/outlineTree]
1.problem = 此元素存在 1 个问题
Array = 数组
Boolean = 布尔
Class = 类
Constant = 常量
Constructor = 构造函数
Enum = 枚举
EnumMember = 枚举成员
Event = 事件
Field = 字段
File = 文件
Function = 函数
Interface = 接口
Key = 键
Method = 方法
Module = 模块
N.problem = 此元素存在 {0} 个问题
Namespace = 命名空间
Null = Null
Number = 数字
Object = 对象
Operator = 运算符
Package = 包
Property = 属性
String = 字符串
Struct = 结构体
TypeParameter = 类型参数
Variable = 变量
deep.problem = 包含存在问题的元素
symbolIcon.arrayForeground = 数组符号的前景色。
symbolIcon.booleanForeground = 布尔符号的前景色。
symbolIcon.classForeground = 类符号的前景色。
symbolIcon.colorForeground = 颜色符号的前景色。
symbolIcon.constantForeground = 常量符号的前景色。
symbolIcon.constructorForeground = 构造函数符号的前景色。
symbolIcon.enumeratorForeground = 枚举符号的前景色。
symbolIcon.enumeratorMemberForeground = 枚举器成员符号的前景色。
symbolIcon.eventForeground = 事件符号的前景色。
symbolIcon.fieldForeground = 字段符号的前景色。
symbolIcon.fileForeground = 文件符号的前景色。
symbolIcon.folderForeground = 文件夹符号的前景色。
symbolIcon.functionForeground = 函数符号的前景色。
symbolIcon.interfaceForeground = 接口符号的前景色。
symbolIcon.keyForeground = 键符号的前景色。
symbolIcon.keywordForeground = 关键字符号的前景色。
symbolIcon.methodForeground = 方法符号的前景色。
symbolIcon.moduleForeground = 模块符号的前景色。
symbolIcon.namespaceForeground = 命名空间符号的前景色。
symbolIcon.nullForeground = 空符号的前景色。
symbolIcon.numberForeground = 数字符号的前景色。
symbolIcon.objectForeground = 对象符号的前景色。
symbolIcon.operatorForeground = 运算符符号的前景色。
symbolIcon.packageForeground = 包符号的前景色。
symbolIcon.propertyForeground = 属性符号的前景色。
symbolIcon.referenceForeground = 参考符号的前景色。
symbolIcon.snippetForeground = 片段符号的前景色。
symbolIcon.stringForeground = 字符串符号的前景色。
symbolIcon.structForeground = 结构符号的前景色。
symbolIcon.textForeground = 文本符号的前景色。
symbolIcon.typeParameterForeground = 类型参数符号的前景色。
symbolIcon.unitForeground = 单位符号的前景色。
symbolIcon.variableForeground = 变量符号的前景色。
title.template = {0}（{1}）

[vs/editor/contrib/find/findController]
findNextMatchAction = 查找下一个
findPreviousMatchAction = 查找上一个
miFind = 查找(&&F)
miReplace = 替换(&&R)
nextSelectionMatchFindAction = 查找下一个选择
previousSelectionMatchFindAction = 查找上一个选择
startFindAction = 查找
startFindWithSelectionAction = 查找所选内容
startReplace = 替换

[vs/editor/contrib/find/findWidget]
ariaSearchNoResult = 为{1}找到了{0}
ariaSearchNoResultEmpty = 找到 {0}
ariaSearchNoResultWithLineNum = {0} 在 {2} 处找到 {1}
ariaSearchNoResultWithLineNumNoCurrentMatch = {0} 已找到 {1}
ctrlEnter.keybindingChanged = Ctrl + Enter 现在由全部替换改为插入换行。您可以修改 `editor.action.replaceAll` 的快捷键以覆盖此行为。
label.closeButton = 关闭
label.find = 查找
label.matchesLocation = {1} 中的 {0}
label.nextMatchButton = 下一个匹配项
label.noResults = 无结果
label.previousMatchButton = 上一个匹配项
label.replace = 替换
label.replaceAllButton = 全部替换
label.replaceButton = 替换
label.toggleReplaceButton = 切换替换模式
label.toggleSelectionFind = 在所选内容中查找
placeholder.find = 查找
placeholder.replace = 替换
title.matchesCountLimit = 仅高亮了前 {0} 个结果。

[vs/editor/contrib/folding/folding]
editorGutter.foldingControlForeground = 编辑器行号栏中折叠按钮的颜色。
foldAction.label = 折叠
foldAllAction.label = 全部折叠
foldAllBlockComments.label = 折叠所有块注释
foldAllMarkerRegions.label = 折叠所有区域
foldBackgroundBackground = 折叠范围的背景色。颜色应透明。
foldLevelAction.label = 折叠级别 {0}
foldRecursivelyAction.label = 折叠所有子项
toggleFoldAction.label = 切换折叠
unFoldRecursivelyAction.label = 展开所有子项
unfoldAction.label = 展开
unfoldAllAction.label = 全部展开
unfoldAllMarkerRegions.label = 展开所有区域

[vs/editor/contrib/fontZoom/fontZoom]
EditorFontZoomIn.label = 放大编辑器字体
EditorFontZoomOut.label = 缩小编辑器字体
EditorFontZoomReset.label = 重置编辑器字体大小

[vs/editor/contrib/format/format]
hint11 = 在第 {0} 行进行了 1 次格式编辑
hint1n = 第 {0} 行到第 {1} 行间进行了 1 次格式编辑
hintn1 = 在第 {1} 行进行了 {0} 次格式编辑
hintnn = 第 {1} 行到第 {2} 行间进行了 {0} 次格式编辑

[vs/editor/contrib/format/formatActions]
formatDocument.label = 格式化文档
formatSelection.label = 格式化所选内容

[vs/editor/contrib/gotoError/gotoError]
markerAction.next.label = 转到下一个问题（错误、警告、信息）
markerAction.nextInFiles.label = 转到文件中的下一个问题（错误、警告、信息）
markerAction.previous.label = 转到上一个问题（错误、警告、信息）
markerAction.previousInFiles.label = 转到文件中的上一个问题（错误、警告、信息）
miGotoNextProblem = 下一个问题(&&P)
miGotoPreviousProblem = 上一个问题(&&P)

[vs/editor/contrib/gotoError/gotoErrorWidget]
Error = 错误
Hint = 提示
Info = 信息
Warning = 警告
change = {0} 个问题，共 {1} 个
editorMarkerNavigationBackground = 编辑器标记导航小组件背景色。
editorMarkerNavigationError = 编辑器标记导航小组件错误颜色。
editorMarkerNavigationInfo = 编辑器标记导航小组件信息颜色。
editorMarkerNavigationWarning = 编辑器标记导航小组件警告颜色。
marker aria = {0} 个问题，共 {1} 个
problems = {0} 个问题，共 {1} 个

[vs/editor/contrib/gotoSymbol/goToCommands]
actions.goToDecl.label = 转到定义
actions.goToDeclToSide.label = 在侧边显示定义
actions.goToDeclaration.label = 转到声明
actions.goToImplementation.label = 转到实现
actions.goToTypeDefinition.label = 转到类型定义
actions.peekDecl.label = 速览声明
actions.peekImplementation.label = 速览实现
actions.peekTypeDefinition.label = 速览类型定义
actions.previewDecl.label = 查看定义
decl.generic.noResults = 没有声明
decl.noResultWord = 没有“{0}”的声明
decl.title = 声明
def.title = 定义
generic.noResult = “{0}”无结果
generic.noResults = 没有定义
generic.title = 位置
goToImplementation.generic.noResults = 没有实现
goToImplementation.noResultWord = 没有“{0}”的实现
goToReferences.label = 转到引用
goToTypeDefinition.generic.noResults = 没有类型定义
goToTypeDefinition.noResultWord = 没有“{0}”的类型定义
impl.title = 实现
label.generic = 转到任何符号
miGotoDeclaration = 转到声明
miGotoDefinition = 转到定义(&&D)…
miGotoImplementation = 转到实现(&&I)
miGotoReference = 转到引用
miGotoTypeDefinition = 转到类型定义(&&T)
noResultWord = 没有“{0}”的定义
peek.submenu = 快速查看
ref.title = 引用
references.action.label = 查看引用
references.no = 未找到“{0}”的引用
references.noGeneric = 未找到引用
typedef.title = 类型定义

[vs/editor/contrib/gotoSymbol/link/goToDefinitionAtPosition]
multipleResults = 点击显示 {0} 个定义。

[vs/editor/contrib/gotoSymbol/peek/referencesController]
labelLoading = 正在加载…
metaTitle.N = {0}（{1}）

[vs/editor/contrib/gotoSymbol/peek/referencesTree]
referenceCount = {0} 个引用
referencesCount = {0} 个引用
treeAriaLabel = 引用

[vs/editor/contrib/gotoSymbol/peek/referencesWidget]
missingPreviewMessage = 无可用预览
noResults = 无结果
peekView.alternateTitle = 引用

[vs/editor/contrib/gotoSymbol/referencesModel]
aria.fileReferences.1 = {0} 中有 1 个符号，完整路径：{1}
aria.fileReferences.N = {1} 中有 {0} 个符号，完整路径：{2}
aria.oneReference = 在文件 {0} 的 {1} 行 {2} 列的符号
aria.result.0 = 没有结果
aria.result.1 = 在 {0} 中找到 1 个符号
aria.result.n1 = 在 {1} 中找到 {0} 个符号
aria.result.nm = 在 {1} 个文件中找到 {0} 个符号

[vs/editor/contrib/gotoSymbol/symbolNavigation]
location = 第 {0} 个符号，共 {1} 个
location.kb = 第 {0} 个符号，共 {1} 个，按 {2} 转到下一个

[vs/editor/contrib/hover/hover]
showDefinitionPreviewHover = 显示定义预览悬停提示
showHover = 显示悬停提示

[vs/editor/contrib/hover/modesContentHover]
checkingForQuickFixes = 正在检查快速修复…
modesContentHover.loading = 正在加载…
noQuickFixes = 无快速修复
peek problem = 速览问题
quick fixes = 快速修复…

[vs/editor/contrib/inPlaceReplace/inPlaceReplace]
InPlaceReplaceAction.next.label = 替换为下一个值
InPlaceReplaceAction.previous.label = 替换为上一个值

[vs/editor/contrib/indentation/indentation]
configuredTabSize = 设置的缩进大小
detectIndentation = 从内容中检测缩进方式
editor.reindentlines = 重新缩进行
editor.reindentselectedlines = 重新缩进所选行
indentUsingSpaces = 使用空格缩进
indentUsingTabs = 使用制表符缩进
indentationToSpaces = 转换为空格缩进
indentationToTabs = 转换为制表符缩进
selectTabWidth = 选择当前文件的缩进大小

[vs/editor/contrib/linesOperations/linesOperations]
duplicateSelection = 复制选区
editor.transformToLowercase = 转换为小写
editor.transformToTitlecase = 转换为词首大写
editor.transformToUppercase = 转换为大写
editor.transpose = 转置光标处的字符
lines.copyDown = 向下复制行
lines.copyUp = 向上复制行
lines.delete = 删除行
lines.deleteAllLeft = 删除左侧内容
lines.deleteAllRight = 删除右侧内容
lines.indent = 缩进行
lines.insertAfter = 在下面插入行
lines.insertBefore = 在上面插入行
lines.joinLines = 合并行
lines.moveDown = 向下移动行
lines.moveUp = 向上移动行
lines.outdent = 减少缩进行
lines.sortAscending = 按升序排列行
lines.sortDescending = 按降序排列行
lines.trimTrailingWhitespace = 删除行末空格
miCopyLinesDown = 向下复制行(&&P)
miCopyLinesUp = 向上复制行(&&C)
miDuplicateSelection = 复制选区
miMoveLinesDown = 向下移动行(&&L)
miMoveLinesUp = 向上移动行(&&V)

[vs/editor/contrib/links/links]
invalid.url = 链接格式不正确，不能打开：{0}
label = 打开链接
links.navigate.executeCmd = 执行命令
links.navigate.follow = 访问链接
links.navigate.kb.alt = 按住 Alt 键点击
links.navigate.kb.alt.mac = 按住 Option 键点击
links.navigate.kb.meta = 按住 Ctrl 键点击
links.navigate.kb.meta.mac = 按住 Command 键点击
missing.url = 缺少链接目标，不能打开。

[vs/editor/contrib/message/messageController]
editor.readonly = 未能在只读编辑器中编辑

[vs/editor/contrib/multicursor/multicursor]
addSelectionToNextFindMatch = 将下一个匹配项添加到选区
addSelectionToPreviousFindMatch = 将上一个匹配项添加到选区
changeAll.label = 更改所有匹配项
miAddSelectionToNextFindMatch = 在下一个匹配项处添加光标(&&N)
miAddSelectionToPreviousFindMatch = 在上一个匹配项处添加光标(&&R)
miInsertCursorAbove = 在上方添加光标(&&A)
miInsertCursorAtEndOfEachLineSelected = 在行尾添加光标(&&U)
miInsertCursorBelow = 在下方添加光标(&&D)
miSelectHighlights = 选择所有匹配项(&&O)
moveSelectionToNextFindMatch = 将上次选区移动到下一个匹配项
moveSelectionToPreviousFindMatch = 将上个选区移动到上一匹配项
mutlicursor.addCursorsToBottom = 在底部添加光标
mutlicursor.addCursorsToTop = 在顶部添加光标
mutlicursor.insertAbove = 在上方添加光标
mutlicursor.insertAtEndOfEachLineSelected = 在行尾添加光标
mutlicursor.insertBelow = 在下方添加光标
selectAllOccurrencesOfFindMatch = 选择所有匹配项

[vs/editor/contrib/parameterHints/parameterHints]
parameterHints.trigger.label = 触发参数提示

[vs/editor/contrib/parameterHints/parameterHintsWidget]
hint = {0}，提示

[vs/editor/contrib/peekView/peekView]
label.close = 关闭
peekViewBorder = 速览视图边框和箭头颜色。
peekViewEditorBackground = 速览视图编辑器背景色。
peekViewEditorGutterBackground = 速览视图编辑器中行号栏的背景色。
peekViewEditorMatchHighlight = 在速览视图编辑器中匹配突出显示颜色。
peekViewEditorMatchHighlightBorder = 在速览视图编辑器中匹配项的突出显示边框。
peekViewResultsBackground = 速览视图结果列表背景色。
peekViewResultsFileForeground = 速览视图结果列表中文件节点的前景色。
peekViewResultsMatchForeground = 速览视图结果列表中行节点的前景色。
peekViewResultsMatchHighlight = 在速览视图结果列表中匹配突出显示颜色。
peekViewResultsSelectionBackground = 速览视图结果列表中所选条目的背景色。
peekViewResultsSelectionForeground = 速览视图结果列表中所选条目的前景色。
peekViewTitleBackground = 速览视图标题区域背景色。
peekViewTitleForeground = 速览视图标题颜色。
peekViewTitleInfoForeground = 速览视图标题信息颜色。

[vs/editor/contrib/rename/onTypeRename]
onTypeRename.label = 在输入时重命名符号

[vs/editor/contrib/rename/rename]
aria = 已将“{0}”重命名为“{1}”。摘要：{2}
enablePreview = 在执行重命名前预览更改
label = 重命名“{0}”
no result = 无结果。
quotableLabel = 重命名 {0}
rename.failed = 重命名时出错。
rename.failedApply = 重命名应用修改时出错。
rename.label = 重命名符号
resolveRenameLocationFailed = 解析重命名位置时发生未知错误

[vs/editor/contrib/rename/renameInputField]
label = {0}重命名，{1}预览
renameAriaLabel = 重命名输入。输入新名称并按 Enter 键提交。

[vs/editor/contrib/smartSelect/smartSelect]
miSmartSelectGrow = 扩大选区(&&E)
miSmartSelectShrink = 缩小选区(&&S)
smartSelect.expand = 展开选区
smartSelect.shrink = 缩小选区

[vs/editor/contrib/snippet/snippetVariables]
April = 四月
AprilShort = 4 月
August = 八月
AugustShort = 8 月
December = 十二月
DecemberShort = 12 月
February = 二月
FebruaryShort = 2 月
Friday = 星期五
FridayShort = 周五
January = 一月
JanuaryShort = 1 月
July = 七月
JulyShort = 7 月
June = 六月
JuneShort = 6 月
March = 三月
MarchShort = 3 月
May = 五月
MayShort = 5 月
Monday = 星期一
MondayShort = 周一
November = 十一月
NovemberShort = 11 月
October = 十月
OctoberShort = 10 月
Saturday = 星期六
SaturdayShort = 周六
September = 九月
SeptemberShort = 9 月
Sunday = 星期天
SundayShort = 周日
Thursday = 星期四
ThursdayShort = 周四
Tuesday = 星期二
TuesdayShort = 周二
Wednesday = 星期三
WednesdayShort = 周三

[vs/editor/contrib/suggest/suggestController]
accept.accept = {0} 接受
accept.insert = {0} 插入
accept.replace = {0} 替换
arai.alert.snippet = 选择“{0}”后进行了其他 {1} 次编辑
detail.less = 显示更少
detail.more = 显示更多
suggest.trigger.label = 触发建议

[vs/editor/contrib/suggest/suggestWidget]
ariaCurrenttSuggestionReadDetails = 项目 {0}，文档：{1}
editorSuggestWidgetBackground = 建议小组件的背景色。
editorSuggestWidgetBorder = 建议小组件的边框颜色。
editorSuggestWidgetForeground = 建议小组件的前景色。
editorSuggestWidgetHighlightForeground = 建议小组件中匹配内容的高亮颜色。
editorSuggestWidgetSelectedBackground = 建议小组件中所选条目的背景色。
loading = 正在加载…
readLess = 显示更少…{0}
readMore = 显示更多…{0}
suggest = 建议
suggestWidget.loading = 正在加载…
suggestWidget.noSuggestions = 无建议。

[vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode]
toggle.tabMovesFocus = 切换 Tab 键移动焦点
toggle.tabMovesFocus.off = Tab 键将插入制表符
toggle.tabMovesFocus.on = Tab 键将移动到下一可聚焦的元素

[vs/editor/contrib/tokenization/tokenization]
forceRetokenize = 开发者：强制重新进行词素分析

[vs/editor/contrib/unusualLineTerminators/unusualLineTerminators]
unusualLineTerminators.detail = 此文件包含异常的行终止符，如“行分隔符”（U+2028）或“段落分隔符”（U+2029）。\n\n建议删除它们。可通过设置“editor.unusualLineTerminators”进行修改。
unusualLineTerminators.fix = 修复此文件
unusualLineTerminators.ignore = 忽略此文件中的问题
unusualLineTerminators.message = 检测到异常的行终止符
unusualLineTerminators.title = 异常行终止符

[vs/editor/contrib/wordHighlighter/wordHighlighter]
overviewRulerWordHighlightForeground = 用于突出显示符号的概述标尺标记颜色。颜色应透明。
overviewRulerWordHighlightStrongForeground = 用于突出显示写权限符号的概述标尺标记颜色。颜色应透明。
wordHighlight = 读取访问期间符号的背景色，例如读取变量时。颜色应透明。
wordHighlight.next.label = 转到下一个突出显示的符号
wordHighlight.previous.label = 转到上一个突出显示的符号
wordHighlight.trigger.label = 触发符号高亮
wordHighlightBorder = 符号在进行读取访问操作时的边框颜色，例如读取变量。
wordHighlightStrong = 写入访问过程中符号的背景色，例如写入变量时。颜色应透明。
wordHighlightStrongBorder = 符号在进行写入访问操作时的边框颜色，例如写入变量。
