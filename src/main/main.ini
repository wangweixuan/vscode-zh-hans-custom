[vs/base/browser/ui/actionbar/actionbar]
titleLabel = {0}（{1}）

[vs/base/browser/ui/aria/aria]
repeated = {0}（再次发生）
repeatedNtimes = {0}（已发生 {1} 次）

[vs/base/browser/ui/dialog/dialog]
dialogClose = 关闭对话框
ok = 确定

[vs/base/browser/ui/findinput/findInput]
defaultLabel = 输入

[vs/base/browser/ui/findinput/findInputCheckboxes]
caseDescription = 区分大小写
regexDescription = 正则表达式
wordsDescription = 全字匹配

[vs/base/browser/ui/findinput/replaceInput]
defaultLabel = 输入
label.preserveCaseCheckbox = 保留大小写

[vs/base/browser/ui/inputbox/inputBox]
alertErrorMessage = 错误：{0}
alertInfoMessage = 信息：{0}
alertWarningMessage = 警告：{0}

[vs/base/browser/ui/keybindingLabel/keybindingLabel]
unbound = 未绑定

[vs/base/browser/ui/list/listWidget]
aria list = {0}。使用导航键进行导航。

[vs/base/browser/ui/menu/menu]
titleLabel = {0}（{1}）

[vs/base/browser/ui/menu/menubar]
mAppMenu = 应用程序菜单
mMore = …

[vs/base/browser/ui/toolbar/toolbar]
moreActions = 更多操作…

[vs/base/browser/ui/tree/abstractTree]
clear = 清除
disable filter on type = 禁用类型筛选
empty = 没有元素
enable filter on type = 启用类型筛选
found = 已匹配 {0} 个元素，共 {1} 个

[vs/base/browser/ui/tree/treeDefaults]
collapse all = 全部折叠

[vs/base/common/errorMessage]
error.defaultMessage = 发生了未知错误。详细信息请见日志。
error.moreErrors = {0} 个（共 {1} 个错误）
nodeExceptionMessage = 发生了系统错误（{0}）
stackTrace.format = {0}：{1}

[vs/base/common/jsonErrorMessages]
error.closeBraceExpected = 需要右大括号
error.closeBracketExpected = 需要右括号
error.colonExpected = 需要冒号
error.commaExpected = 需要逗号
error.endOfFileExpected = 需要文件结尾
error.invalidNumberFormat = 数字格式无效
error.invalidSymbol = 符号无效
error.propertyNameExpected = 需要属性名
error.valueExpected = 需要值

[vs/base/common/keybindingLabels]
altKey = Alt
altKey.long = Alt
cmdKey.long = Command
ctrlKey = Ctrl
ctrlKey.long = Control
shiftKey = Shift
shiftKey.long = Shift
superKey = Super
superKey.long = Super
windowsKey = Windows
windowsKey.long = Windows

[vs/base/common/severity]
sev.error = 错误
sev.info = 信息
sev.warning = 警告

[vs/base/node/processes]
TaskRunner.UNC = 未能在 UNC 驱动器上执行 shell 命令。

[vs/base/node/zip]
incompleteExtract = 解压不完整。找到了 {0} 个项目，共 {1} 个
invalid file = 提取 {0} 时出错。文件无效。
notFound = 在 Zip 中找不到 {0}。

[vs/base/parts/quickopen/browser/quickOpenModel]
quickOpenAriaLabel = 选取器
quickOpenAriaLabelEntry = {0}，选取器

[vs/base/parts/quickopen/browser/quickOpenWidget]
quickInput.visibleCount = {0} 个结果
quickOpenAriaLabel = 快速选取器。键入以缩小结果范围。
treeAriaLabel = 快速选取器

[vs/base/parts/tree/browser/treeDefaults]
collapse all = 全部折叠

[vs/code/electron-browser/issue/issueReporterMain]
bugDescription = 请描述能稳定重现此问题的必要步骤，并包含实际和预期的结果。我们支持 GitHub 版的 Markdown。您将能在 GitHub 上预览时编辑这个问题并添加截图。
bugReporter = 问题报告
closed = 已关闭
description = 说明
disabledExtensions = 扩展已禁用
expectedResults = 预期结果
extension = 扩展
featureRequest = 功能请求
featureRequestDescription = 请描述您希望能够使用的功能。我们支持 GitHub 版的 Markdown。您将能在 GitHub 上预览时编辑问题并添加截图。
hide = 隐藏
loadingData = 正在加载数据…
noSimilarIssues = 没有找到类似问题
open = 打开
pasteData = 数据太多，不能直接发送到 GitHub。这些数据已被保存到粘贴板，请粘贴。
performanceIssue = 性能问题
performanceIssueDesciption = 这个性能问题是在什么时候发生的？是在启动时，还是在一系列特定的操作之后？我们支持 GitHub 版的 Markdown。您将能在 GitHub 上预览时编辑这个问题并添加截图。
previewOnGitHub = 在 GitHub 中预览
rateLimited = 超出 GitHub 查询限制。请稍候。
selectSource = 选择源
settingsSearchIssue = 设置搜索的问题
settingsSearchResultsDescription = 请列出您在搜索此项时希望看到的结果。我们支持 GitHub 版的 Markdown。您将能在 GitHub 上预览时编辑问题并添加截图。
show = 显示
similarIssues = 类似的问题
stepsToReproduce = 重现步骤
unknown = 不知道
vscode = Visual Studio Code

[vs/code/electron-browser/issue/issueReporterPage]
chooseExtension = 扩展
completeInEnglish = 请使用英语进行填写。
details = 请输入详细信息。
disableExtensions = 禁用所有扩展并重新加载窗口
disableExtensionsLabelText = 请试着在{0}之后重现问题。如果此问题仅在扩展运行时才能重现，那么这可能是一个扩展的问题。
issueSourceLabel = 提交到
issueTitleLabel = 标题
issueTitleRequired = 请输入标题。
issueTypeLabel = 这是一个
sendExtensions = 包含已启用的扩展（{0}）
sendProcessInfo = 包含当前运行中的进程（{0}）
sendSearchedExtensions = 发送已搜索的扩展（{0}）
sendSettingsSearchDetails = 发送设置搜索的详细信息（{0}）
sendSystemInfo = 包含系统信息（{0}）
sendWorkspaceInfo = 包含工作区元数据（{0}）
show = 显示
titleLengthValidation = 标题太长。

[vs/code/electron-browser/processExplorer/processExplorerMain]
copy = 拷贝
copyAll = 拷贝全部
cpu = CPU %
debug = 调试
forceKillProcess = 强制结束进程
killProcess = 结束进程
memory = 内存（MB）
name = 名称
pid = PID

[vs/code/electron-main/app]
trace.detail = 请创建问题并手动附加以下文件：\n{0}
trace.message = 已成功创建跟踪信息。
trace.ok = 确定

[vs/code/electron-main/auth]
authRequire = 需要验证代理
proxyauth = {0} 代理需要验证。

[vs/code/electron-main/main]
close = 关闭(&&C)
secondInstanceAdmin = {0} 的第二个实例已经以管理员身份运行。
secondInstanceAdminDetail = 请先关闭另一个实例，然后重试。
secondInstanceNoResponse = {0} 的另一实例正在运行但没有响应
secondInstanceNoResponseDetail = 请先关闭其他所有实例，然后重试。
startupDataDirError = 未能写入程序用户数据。
startupUserDataAndExtensionsDirErrorDetail = 请确保以下目录可写：\n\n{0}

[vs/code/electron-main/window]
appCrashed = 窗口已崩溃
appCrashedDetail = 我们对此引起的不便表示抱歉！请重启该窗口从上次停止的位置继续。
appStalled = 窗口无响应
appStalledDetail = 请可以重新打开或关闭窗口，或者保持等待。
close = 关闭(&&C)
hiddenMenuBar = 仍可以通过 Alt 键访问菜单栏。
reopen = 重新打开(&&R)
wait = 继续等待(&&K)

[vs/code/node/cliProcessMain]
alreadyInstalled = 已安装扩展“{0}”。
cancelVsixInstall = 已取消安装扩展“{0}”。
forceDowngrade = 未能安装扩展“{0}”的版本 {1}，因为已安装了更新版本。使用 `--force` 选项降级到旧版本。
forceUpdate = 已安装扩展“{0}”的版本 {1}，市场上有更新版本 {2}。使用 `--force` 选项更新到新版本。
installation failed = 安装扩展失败：{0}
installing = 正在安装扩展“{0}”，版本 {1}…
installingExtensions = 正在安装扩展…
notFound = 找不到扩展“{0}”。
notInstalled = 未安装扩展“{0}”。
successInstall = 已安装扩展“{0}”，版本 {1}。
successUninstall = 已卸载扩展“{0}”。
successVsixInstall = 已安装扩展“{0}”。
uninstalling = 正在卸载 {0}…
updateMessage = 将扩展“{0}”更新到版本 {1}
useId = 请确保使用了完整的扩展标识符，包括发布者，例如{0}。

[vs/editor/browser/controller/coreCommands]
miRedo = 重做(&&R)
miSelectAll = 全选(&&S)
miUndo = 撤消(&&U)

[vs/editor/browser/controller/textAreaHandler]
accessibilityOffAriaLabel = 现在无法访问编辑器。按 Alt+F1 键显示选项。

[vs/editor/browser/widget/codeEditorWidget]
cursors.maximum = 光标数量被限制为 {0}。

[vs/editor/browser/widget/diffEditorWidget]
diff.tooLarge = 文件过大，未能比较。

[vs/editor/browser/widget/diffReview]
blankLine = 空白
deleteLine = - 未修改 {0}：{1}
editor.action.diffReview.next = 转至下一个差异
editor.action.diffReview.prev = 转至上一个差异
equalLine = 未修改 {0}，已修改 {1}：{2}
header = 差异 {0}，总共 {1}：原始，{2}，{3}；改后，{4}，{5}
insertLine = + 已修改 {0}：{1}
label.close = 关闭
more_lines = {0} 行
no_lines = 无内容
one_line = 1 行

[vs/editor/browser/widget/inlineDiffMargin]
diff.clipboard.copyDeletedLineContent.label = 拷贝已删除的行（{0}）
diff.clipboard.copyDeletedLinesContent.label = 拷贝已删除的行
diff.clipboard.copyDeletedLinesContent.single.label = 拷贝已删除的行
diff.inline.revertChange.label = 还原此更改

[vs/editor/common/config/commonEditorConfig]
codeActionsOnSave = 在保存时运行的代码操作类型。
codeActionsOnSave.fixAll = 在保存文件时运行自动修复操作。
codeActionsOnSave.organizeImports = 在保存文件时整理 import 语句。
codeActionsOnSaveTimeout = 在保存文件时进行的代码操作的超时时间，以毫秒为单位。
detectIndentation = 在打开文件时，基于文件内容自动检测 `#editor.tabSize#` 和 `#editor.insertSpaces#`。
editorConfigurationTitle = 编辑器
ignoreTrimWhitespace = 在差异编辑器中把前导空格或尾随空格的改动显示为差异。
insertSpaces = 按 Tab 键插入空格。该设置在 `#editor.detectIndentation#` 启用时根据文件内容可能会被覆盖。
largeFileOptimizations = 对大型文件进行特殊处理，禁用某些内存密集型功能。
maxComputationTime = 取消差异计算前的超时，以毫秒为单位。"0" 表示没有超时。
maxTokenizationLineLength = 进行词法分析的行的最长长度。
renderIndicators = 在差异编辑器中，为添加、删除的更改显示“+”、“-”指示符号。
sideBySide = 差异编辑器的显示方式是并排还是内联。
stablePeek = 在速览编辑器中，即使双击其中的内容或者按 `Esc` 键，也保持其打开状态。
tabSize = 一个制表符相当的空格数。在 `#editor.detectIndentation#` 启用时，根据文件内容，该设置可能会被覆盖。
trimAutoWhitespace = 删除自动插入的尾随空白符号。
wordBasedSuggestions = 根据文档中的文字计算自动完成列表。

[vs/editor/common/config/editorOptions]
acceptSuggestionOnCommitCharacter = 是否应在遇到提交字符时接受建议。例如，在 JavaScript 中，分号可以为提交字符，能够在接受建议的同时键入该字符。
acceptSuggestionOnEnter = 除了 Tab 键外，Enter 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。
acceptSuggestionOnEnterSmart = 仅当建议包含文本改动时才可使用 Enter 键进行接受。
accessibilitySupport = 是否针对屏幕阅读器进行优化。
accessibilitySupport.auto = 将通过操作系统 API 来决定是否使用屏幕阅读器。
accessibilitySupport.off = 不针对屏幕阅读器进行优化。
accessibilitySupport.on = 针对屏幕阅读器进行优化。
autoClosingBrackets = 键入左括号时自动补充右括号。
autoClosingOvertype = 自动改写右引号和右括号。
autoClosingQuotes = 键入左引号时自动补充右引号。
autoIndent = 在键入、粘贴或移动行时自动调整缩进。
autoSurround = 自动包住所选内容。
codeActions = 显示代码操作灯泡提示。
codeLens = 显示代码透镜。
colorDecorators = 显示内联颜色修饰器和颜色选取器。
copyWithSyntaxHighlighting = 在拷贝时保留语法高亮。
cursorBlinking = 光标动画样式。
cursorSmoothCaretAnimation = 启用平滑的光标动画。
cursorStyle = 光标样式。
cursorSurroundingLines = 光标周围可见的前置行和尾随行的最小数目。在其他一些编辑器中称为“scrollOff”或“scrollOffset”。
cursorSurroundingLinesStyle = 何时执行 "cursorSurroundingLines"。
cursorSurroundingLinesStyle.all = 始终执行 "cursorSurroundingLines"。
cursorSurroundingLinesStyle.default = 仅当从键盘和 API 触发时，才会执行 "cursorSurroundingLines"。
cursorWidth = 光标的宽度（适用于 `#editor.cursorStyle#` 设置为 `"line"` 时）。
dragAndDrop = 允许通过拖放来移动选区。
editor.autoClosingBrackets.beforeWhitespace = 仅当光标位于空白字符左侧时，才自动闭合括号。
editor.autoClosingBrackets.languageDefined = 使用语言配置确定何时自动闭合括号。
editor.autoClosingOvertype.auto = 仅在自动插入时才改写右引号和右括号。
editor.autoClosingQuotes.beforeWhitespace = 仅当光标位于空白字符左侧时，才自动闭合引号。
editor.autoClosingQuotes.languageDefined = 使用语言配置确定何时自动闭合引号。
editor.autoSurround.brackets = 使用括号而非引号来包住所选内容。
editor.autoSurround.languageDefined = 使用语言配置确定何时自动包住所选内容。
editor.autoSurround.quotes = 使用引号而非括号来包住所选内容。
editor.find.autoFindInSelection.always = 始终自动打开“在选择中查找”。
editor.find.autoFindInSelection.multiline = 选择多行内容时，自动打开“在选择中查找”。
editor.find.autoFindInSelection.never = 从不自动打开“选择中查找”。
editor.gotoLocation.multiple = 当存在多个目标位置时, 如何执行“转到…”命令。
editor.gotoLocation.multiple.goto = 转到主要结果。
editor.gotoLocation.multiple.gotoAndPeek = 转到主要结果并显示预览视图。
editor.gotoLocation.multiple.peek = 显示结果的预览视图。
editorViewAccessibleLabel = 编辑器内容
emptySelectionClipboard = 拷贝时没有选择内容，则拷贝光标所在行。
fastScrollSensitivity = 按 Alt 键按时滚动速度加倍。
find.addExtraSpaceOnTop = 打开“查找”小组件时允许编辑器滚动到第一行之前，使前几行不被小组件挡住。
find.autoFindInSelection = 在执行查找操作时，在编辑器中的选中文本中还是整个文件中进行查找。
find.globalFindClipboard = 使“查找”小组件在 macOS 的共享查找粘贴板中读取和写入内容。
find.seedSearchStringFromSelection = 将编辑器选中内容作为搜索词填入到“查找”小组件中。
folding = 启用代码折叠。
foldingStrategy = 计算折叠范围的策略。`"auto"` 将使用语言特定的折叠策略（若可用），`"indentation"` 将使用基于缩进的折叠策略。
fontFamily = 字体系列。
fontFeatureSettings = 显式字体功能设置。
fontLigatures = 启用字体连字。
fontLigaturesGeneral = 配置字体连字。
fontSize = 字体大小，以像素为单位。
fontWeight = 字体粗细。
formatOnPaste = 自动格式化粘贴的内容。
formatOnType = 键入完一行后自动格式化该行。
glyphMargin = 呈现竖排字形边距。字形边距最常用于调试。
hideCursorInOverviewRuler = 不在概览标尺显示光标。
highlightActiveIndentGuide = 突出显示活动的缩进参考线。
hover.delay = 显示悬停提示前的延迟时间，以毫秒为单位。
hover.enabled = 显示悬停提示。
hover.sticky = 当鼠标移动到悬停提示上时，使其保持可见。
letterSpacing = 字母间距，以像素为单位。
lineHeight = 行高。设置为 `0` 表示根据字体大小自动计算。
lineNumbers = 显示行号。
lineNumbers.interval = 每 10 行显示一个行号。
lineNumbers.off = 不显示行号。
lineNumbers.on = 显示所有行的行号。
lineNumbers.relative = 将行号显示为与光标所在行相差的行数。
links = 在编辑器中使链接可以点击。
matchBrackets = 当选择其中一项时，将突出显示匹配的括号。
minimap.enabled = 显示小地图。
minimap.maxColumn = 小地图最多显示的列数。
minimap.renderCharacters = 渲染每行的实际字符，而不是色块。
minimap.scale = 在小地图中绘制内容的比例。
minimap.showSlider = 自动隐藏小地图滑块。
minimap.side = 在哪一侧显示小地图。
mouseWheelScrollSensitivity = 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
mouseWheelZoom = 按住 Ctrl 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。
multiCursorMergeOverlapping = 当多个光标重叠时进行合并。
multiCursorModifier = 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突。[阅读详细信息](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier）
multiCursorModifier.alt = 映射为 Alt（Windows 和 Linux）或 Option（macOS）。
multiCursorModifier.ctrlCmd = 映射为 Ctrl（Windows 和 Linux）或 Command（macOS）。
multiCursorPaste = 在多光标下如何粘贴多行文本。
multiCursorPaste.full = 在每个光标处粘贴全文。
multiCursorPaste.spread = 在每个光标处粘贴一行文本。
occurrencesHighlight = 突出显示语义符号的匹配项。
overviewRulerBorder = 在概览标尺周围显示边框。
parameterHints.cycle = 参数提示菜单在到达列表末尾时进行循环还是关闭。
parameterHints.enabled = 在键入时显示含有参数文档和类型信息的小面板。
quickSuggestions = 在键入时自动显示建议。
quickSuggestions.comments = 在注释内启用快速建议。
quickSuggestions.other = 在字符串和注释外启用快速建议。
quickSuggestions.strings = 在字符串内启用快速建议。
quickSuggestionsDelay = 显示快速建议前的延迟时间，以毫秒为单位。
renderControlCharacters = 显示控制字符。
renderFinalNewline = 当文件以换行符结束时, 显示最后一行的行号。
renderIndentGuides = 显示缩进参考线。
renderLineHighlight = 当前行进行高亮显示的方式。
renderLineHighlight.all = 突出显示行号栏和当前行。
renderWhitespace = 在空白字符上显示符号的方式。
renderWhitespace.selection = 在选中的文本中的空白字符上显示符号。
roundedSelection = 使选区背景有圆角。
rulers = 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。
scrollBeyondLastColumn = 水平滚动时可以超过范围的字符数。
scrollBeyondLastLine = 允许滚动到最后一行之后。
selectionClipboard = 支持 Linux 主粘贴板。
selectionHighlight = 突出显示与所选内容类似的匹配项。
showFoldingControls = 自动隐藏行号栏上的折叠按钮。
showUnused = 淡化未使用的代码。
smoothScrolling = 滚动编辑器时使用平滑动画。
snippetSuggestions = 代码片段如何显示作为建议显示。
snippetSuggestions.bottom = 在其他建议下方显示代码片段建议。
snippetSuggestions.inline = 在其他建议中穿插显示代码片段建议。
snippetSuggestions.none = 不显示代码片段建议。
snippetSuggestions.top = 在其他建议上方显示代码片段建议。
suggest.filterGraceful = 对建议的筛选和排序是否考虑小的拼写错误。
suggest.filtered.class = 显示类名建议。
suggest.filtered.color = 显示颜色建议。
suggest.filtered.constant = 显示常量建议。
suggest.filtered.constructor = 显示构造函数建议。
suggest.filtered.customcolor = 显示自定义颜色建议。
suggest.filtered.enum = 显示枚举建议。
suggest.filtered.enumMember = 显示枚举成员建议。
suggest.filtered.event = 显示事件建议。
suggest.filtered.field = 显示字段建议。
suggest.filtered.file = 显示文件建议。
suggest.filtered.folder = 显示文件夹建议。
suggest.filtered.function = 显示函数建议。
suggest.filtered.interface = 显示接口建议。
suggest.filtered.keyword = 显示关键字建议。
suggest.filtered.method = 显示方法建议。
suggest.filtered.module = 显示模块建议。
suggest.filtered.operator = 显示运算符建议。
suggest.filtered.property = 显示属性建议。
suggest.filtered.reference = 显示引用建议。
suggest.filtered.snippet = 显示代码片段建议。
suggest.filtered.struct = 显示结构体建议。
suggest.filtered.text = 显示文本建议。
suggest.filtered.typeParameter = 显示类型参数建议。
suggest.filtered.unit = 显示单位建议。
suggest.filtered.value = 显示值建议。
suggest.filtered.variable = 显示变量建议。
suggest.localityBonus = 排序时提高靠近光标的词语的优先级。
suggest.maxVisibleSuggestions = 在显示滚动条之前智能感知将显示的建议数（最多 15 个）。
suggest.shareSuggestSelections = 在多个工作区和窗口之间共享记忆的建议（适用于 `#editor.suggestSelection#`）。
suggest.showIcons = 在建议列表中显示图标。
suggest.snippetsPreventQuickSuggestions = 在活动代码片段内禁用快速建议。
suggestFontSize = 建议小组件的字号。设置为 `0` 表示使用 `#editor.fontSize#` 的值。
suggestLineHeight = 建议小组件的行高。设置为 `0` 表示使用 `#editor.lineHeight#` 的值。
suggestOnTriggerCharacters = 在键入触发字符后自动显示建议。
suggestSelection = 在建议列表中如何预先选择建议。
suggestSelection.first = 始终选择第一个建议。
suggestSelection.recentlyUsed = 选择最近的建议，除非进一步键入选择其他项，如 `console. -> console.log`，因为最近补全过 `log`。
suggestSelection.recentlyUsedByPrefix = 根据之前补全过的建议的前缀来进行选择，如 `co -> console`、`con -> const`。
tabCompletion = 是否启用 Tab 补全。
tabCompletion.off = 禁用 Tab 补全。
tabCompletion.on = 在按 Tab 键时进行 Tab 补全，将插入最佳匹配建议。
tabCompletion.onlySnippets = 在前缀匹配时进行 Tab 补全。在 `quickSuggestions` 未启用时体验最好。
useTabStops = 根据制表位插入和删除空格。
wordSeparators = 执行单词相关的导航或操作时作为单词分隔符的字符。
wordWrap = 折行的方式。
wordWrap.bounded = 在视区宽度和 `#editor.wordWrapColumn#` 中的较小值处折行。
wordWrap.off = 永不换行。
wordWrap.on = 在视区宽度处换行。
wordWrap.wordWrapColumn = 在 `#editor.wordWrapColumn#` 处折行。
wordWrapColumn = 编辑器的折行列（适用于 `#editor.wordWrap#` 为 `"wordWrapColumn"` 或 `"bounded"` 时）。
wrappingIndent = 折行的缩进。
wrappingIndent.deepIndent = 折行的缩进量比其父级多 2。
wrappingIndent.indent = 折行的缩进量比其父级多 1。
wrappingIndent.none = 没有缩进。折行从第一列开始。
wrappingIndent.same = 折行的缩进量与其父级相同。

[vs/editor/common/modes/modesRegistry]
plainText.alias = 纯文本

[vs/editor/common/standaloneStrings]
_constructor = 构造函数（{0}）
accessibilityHelpMessage = 按 Alt+F1 可打开辅助功能选项。
accessibilityHelpMessageIE = 按 Ctrl+F1 可打开辅助功能选项。
ariaLabelEntry = {0}，命令
ariaLabelEntryWithKey = {0}、{1}，命令
auto_off = 编辑器被配置为永远不进行优化以配合屏幕读取器的使用, 而当前不是这种情况。
auto_on = 配置编辑器，将其进行优化以最好地配合屏幕读取器的使用。
bulkEditServiceSummary = 在 {1} 个文件中进行了 {0} 次编辑
call = 调用（{0}）
changeConfigToOnMac = 若要配置编辑器，将其进行优化以最好地配合屏幕阅读器的使用，按 Command+E。
changeConfigToOnWinLinux = 若要配置编辑器，将其进行优化以最高效地配合屏幕阅读器的使用，按 Control+E。
class = 类（{0}）
editableDiffEditor = \s在一个差异编辑器的窗格中。
editableEditor = \s在代码编辑器中
editorViewAccessibleLabel = 编辑器内容
emergencyConfOn = 现在将 `accessibilitySupport` 设置更改为 `"on"`。
entryAriaLabel = {0}，符号
function = 函数（{0}）
gotoLineActionInput = 键入行号, 后跟可选冒号和要导航到的字符数
gotoLineActionLabel = 转到行…
gotoLineAriaLabel = 当前行：{0}。转到行 {1}。
gotoLineLabelEmptyWithLineAndColumnLimit = 键入 1 和 {0} 之间的字符以导航到
gotoLineLabelEmptyWithLineLimit = 键入要导航到的介于 1 和 {0} 之间的行号
gotoLineLabelValidLine = 转至行 {0}
gotoLineLabelValidLineAndColumn = 转到第 {0} 行，第 {1} 列
inspectTokens = 开发人员：检查令牌
interface = 接口（{0}）
method = 方法（{0}）
modules = 模块（{0}）
multiSelection = {0} 个选区
multiSelectionRange = {0} 个选区（选中 {1} 个字符）
noSelection = 无选择
openDocMac = 现在按 Command+H 键打开一个浏览器窗口, 其中包含有关编辑器辅助功能的详细信息。
openDocWinLinux = 现在按 Control+H 键打开一个浏览器窗口, 其中包含有关编辑器辅助功能的更多信息。
openingDocs = 现在正在打开“编辑器辅助功能”文档页。
outroMsg = 按 Esc 键或 Shift+Esc 键消除此工具提示并返回到编辑器。
property = 属性（{0}）
quickCommandActionInput = 键入要执行的操作的名称
quickCommandActionLabel = 命令栏
quickOutlineActionInput = 键入要导航到的标识符的名称
quickOutlineActionLabel = 转到符号…
readonlyDiffEditor = \s在差异编辑器的只读窗格中。
readonlyEditor = \s在只读代码编辑器中
showAccessibilityHelpAction = 显示辅助功能帮助
singleSelection = 行 {0}，列 {1}
singleSelectionRange = 行 {0}，列 {1}（选中 {2} 个字符）
symbols = 符号（{0}）
tabFocusModeOffMsg = 在当前编辑器中按 Tab 键将插入制表符。通过按 {0} 切换此行为。
tabFocusModeOffMsgNoKb = 在当前编辑器中按 Tab 键会插入制表符。当前未能通过快捷键触发命令 {0}。
tabFocusModeOnMsg = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。通过按 {0} 切换此行为。
tabFocusModeOnMsgNoKb = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。当前未能通过快捷键触发命令 {0}。
toggleHighContrast = 切换高对比度主题
variable = 变量（{0}）
variable2 = 变量（{0}）

[vs/editor/common/view/editorColorRegistry]
caret = 编辑器光标颜色。
deprecatedEditorActiveLineNumber = 已弃用：请改用 `editorLineNumber.activeForeground`。
editorActiveIndentGuide = 编辑器活动缩进参考线的颜色。
editorActiveLineNumber = 编辑器活动行号的颜色。
editorBracketMatchBackground = 匹配括号的背景色。
editorBracketMatchBorder = 匹配括号外框的颜色。
editorCodeLensForeground = 编辑器代码透镜的前景色。
editorCursorBackground = 编辑器光标的背景色。可以自定义块型光标覆盖字符的颜色。
editorGutter = 编辑器行号栏的背景色。行号栏包括边缘符号和行号。
editorIndentGuides = 编辑器缩进参考线的颜色。
editorLineNumbers = 编辑器行号的颜色。
editorOverviewRulerBorder = 概览标尺边框颜色。
editorRuler = 编辑器标尺的颜色。
editorWhitespaces = 编辑器中空白字符的颜色。
lineHighlight = 光标所在行高亮内容的背景色。
lineHighlightBorderBox = 光标所在行四周边框的背景色。
overviewRuleError = 概览标尺中错误标记的颜色。
overviewRuleInfo = 概览标尺中信息标记的颜色。
overviewRuleWarning = 概览标尺中警告标记的颜色。
overviewRulerRangeHighlight = 用于突出显示范围的概述标尺标记颜色。颜色应透明。
rangeHighlight = 背景色的高亮范围，喜欢通过快速打开和查找功能。颜色应透明。
rangeHighlightBorder = 高亮区域边框的背景色。
unnecessaryCodeBorder = 编辑器中不必要（未使用）的源代码的边框颜色。
unnecessaryCodeOpacity = 非必须（未使用）代码的在编辑器中显示的不透明度，如 `#000000c0` 将以 75% 的不透明度显示代码。对于高对比度主题，请使用“editorUnnecessaryCode.border”主题来为非必须代码添加下划线，以避免颜色淡化。

[vs/editor/contrib/bracketMatching/bracketMatching]
miGoToBracket = 转到括号(&&B)
overviewRulerBracketMatchForeground = 概览标尺上表示匹配括号的标记颜色。
smartSelect.jumpBracket = 转到括号
smartSelect.selectToBracket = 选择括号所有内容

[vs/editor/contrib/caretOperations/caretOperations]
caret.moveLeft = 将插入点左移
caret.moveRight = 将插入点右移

[vs/editor/contrib/caretOperations/transpose]
transposeLetters.label = 转置字母

[vs/editor/contrib/clipboard/clipboard]
actions.clipboard.copyLabel = 拷贝
actions.clipboard.copyWithSyntaxHighlightingLabel = 拷贝并突出显示语法
actions.clipboard.cutLabel = 剪切
actions.clipboard.pasteLabel = 粘贴
miCopy = 拷贝(&&C)
miCut = 剪切(&&T)
miPaste = 粘贴(&&P)

[vs/editor/contrib/codeAction/codeActionCommands]
applyCodeActionFailed = 应用代码操作时发生未知错误。
autoFix.label = 自动修复…
editor.action.autoFix.noneMessage = 没有可用的自动修复
editor.action.organize.noneMessage = 没有可用的整理导入语句操作
editor.action.quickFix.noneMessage = 没有可用的代码操作
editor.action.refactor.noneMessage = 没有可用的重构操作
editor.action.source.noneMessage = 没有可用的源代码操作
fixAll.label = 全部修复
fixAll.noneMessage = 没有可用的全部修复操作
organizeImports.label = 整理导入语句
quickfix.trigger.label = 快速修复…
refactor.label = 重构…
source.label = 源代码操作…

[vs/editor/contrib/codeAction/lightBulbWidget]
prefferedQuickFixWithKb = 显示修复程序。首选可用修复程序（{0}）。
quickFix = 显示修复
quickFixWithKb = 显示修复（{0}）

[vs/editor/contrib/comment/comment]
comment.block = 添加或删除块注释
comment.line = 添加或删除行注释
comment.line.add = 添加行注释
comment.line.remove = 删除行注释
miToggleBlockComment = 添加或删除块注释(&&B)
miToggleLineComment = 添加或删除行注释(&&T)

[vs/editor/contrib/contextmenu/contextmenu]
action.showContextMenu.label = 显示编辑器上下文菜单

[vs/editor/contrib/cursorUndo/cursorUndo]
cursor.redo = 软重做
cursor.undo = 软撤消

[vs/editor/contrib/documentSymbols/outlineTree]
1.problem = 此元素存在 1 个问题
Array = 数组
Boolean = 布尔
Class = 类
Constant = 常量
Constructor = 构造函数
Enum = 枚举
EnumMember = 枚举成员
Event = 事件
Field = 字段
File = 文件
Function = 函数
Interface = 接口
Key = 键
Method = 方法
Module = 模块
N.problem = 此元素存在 {0} 个问题
Namespace = 命名空间
Null = Null
Number = 数字
Object = 对象
Operator = 运算符
Package = 包
Property = 属性
String = 字符串
Struct = 结构体
TypeParameter = 类型参数
Variable = 变量
deep.problem = 包含存在问题的元素
provider = 大纲提供者
symbolIcon.arrayForeground = 数组符号的前景色。
symbolIcon.booleanForeground = 布尔符号的前景色。
symbolIcon.classForeground = 类符号的前景色。
symbolIcon.colorForeground = 颜色符号的前景色。
symbolIcon.constantForeground = 常量符号的前景色。
symbolIcon.constructorForeground = 构造函数符号的前景色。
symbolIcon.enumeratorForeground = 枚举符号的前景色。
symbolIcon.enumeratorMemberForeground = 枚举器成员符号的前景色。
symbolIcon.eventForeground = 事件符号的前景色。
symbolIcon.fieldForeground = 字段符号的前景色。
symbolIcon.fileForeground = 文件符号的前景色。
symbolIcon.folderForeground = 文件夹符号的前景色。
symbolIcon.functionForeground = 函数符号的前景色。
symbolIcon.interfaceForeground = 接口符号的前景色。
symbolIcon.keyForeground = 键符号的前景色。
symbolIcon.keywordForeground = 关键字符号的前景色。
symbolIcon.methodForeground = 方法符号的前景色。
symbolIcon.moduleForeground = 模块符号的前景色。
symbolIcon.namespaceForeground = 命名空间符号的前景色。
symbolIcon.nullForeground = 空符号的前景色。
symbolIcon.numberForeground = 数字符号的前景色。
symbolIcon.objectForeground = 对象符号的前景色。
symbolIcon.operatorForeground = 运算符符号的前景色。
symbolIcon.packageForeground = 包符号的前景色。
symbolIcon.propertyForeground = 属性符号的前景色。
symbolIcon.referenceForeground = 参考符号的前景色。
symbolIcon.snippetForeground = 片段符号的前景色。
symbolIcon.stringForeground = 字符串符号的前景色。
symbolIcon.structForeground = 结构符号的前景色。
symbolIcon.textForeground = 文本符号的前景色。
symbolIcon.typeParameterForeground = 类型参数符号的前景色。
symbolIcon.unitForeground = 单位符号的前景色。
symbolIcon.variableForeground = 变量符号的前景色。
title.template = {0}（{1}）

[vs/editor/contrib/find/findController]
findNextMatchAction = 查找下一个
findPreviousMatchAction = 查找上一个
miFind = 查找(&&F)
miReplace = 替换(&&R)
nextSelectionMatchFindAction = 查找下一个选择
previousSelectionMatchFindAction = 查找上一个选择
startFindAction = 查找
startFindWithSelectionAction = 查找选定内容
startReplace = 替换

[vs/editor/contrib/find/findWidget]
ariaSearchNoResult = 为{1}找到了{0}
ariaSearchNoResultEmpty = 找到 {0}
ariaSearchNoResultWithLineNum = {0} 在 {2} 处找到 {1}
ariaSearchNoResultWithLineNumNoCurrentMatch = {0} 已找到 {1}
ctrlEnter.keybindingChanged = Ctrl+Enter 现在由全部替换改为插入换行。你可以修改 `editor.action.replaceAll` 的按键映射以覆盖此行为。
label.closeButton = 关闭
label.find = 查找
label.matchesLocation = {1} 中的 {0}
label.nextMatchButton = 下一个匹配项
label.noResults = 无结果
label.previousMatchButton = 上一个匹配项
label.replace = 替换
label.replaceAllButton = 全部替换
label.replaceButton = 替换
label.toggleReplaceButton = 切换替换模式
label.toggleSelectionFind = 在选定内容中查找
placeholder.find = 查找
placeholder.replace = 替换
title.matchesCountLimit = 仅高亮了前 {0} 个结果。

[vs/editor/contrib/folding/folding]
foldAction.label = 折叠
foldAllAction.label = 全部折叠
foldAllBlockComments.label = 折叠所有块注释
foldAllMarkerRegions.label = 折叠所有区域
foldLevelAction.label = 折叠级别 {0}
foldRecursivelyAction.label = 以递归方式折叠
toggleFoldAction.label = 切换折叠
unFoldRecursivelyAction.label = 以递归方式展开
unfoldAction.label = 展开
unfoldAllAction.label = 全部展开
unfoldAllMarkerRegions.label = 展开所有区域

[vs/editor/contrib/fontZoom/fontZoom]
EditorFontZoomIn.label = 放大编辑器字体
EditorFontZoomOut.label = 缩小编辑器字体
EditorFontZoomReset.label = 重置编辑器字体大小

[vs/editor/contrib/format/format]
hint11 = 在第 {0} 行进行了 1 次格式编辑
hint1n = 第 {0} 行到第 {1} 行间进行了 1 次格式编辑
hintn1 = 在第 {1} 行进行了 {0} 次格式编辑
hintnn = 第 {1} 行到第 {2} 行间进行了 {0} 次格式编辑

[vs/editor/contrib/format/formatActions]
formatDocument.label = 格式化文档
formatSelection.label = 格式化选定内容

[vs/editor/contrib/goToDefinition/goToDefinitionAtPosition]
multipleResults = 点击显示 {0} 个定义。

[vs/editor/contrib/goToDefinition/goToDefinitionCommands]
actions.goToDecl.label = 转到定义
actions.goToDeclToSide.label = 在侧边显示定义
actions.goToDeclaration.label = 转到声明
actions.goToImplementation.label = 转到实现
actions.goToTypeDefinition.label = 转到类型定义
actions.peekDecl.label = 速览声明
actions.peekImplementation.label = 速览实现
actions.peekTypeDefinition.label = 速览类型定义
actions.previewDecl.label = 查看定义
decl.generic.noResults = 没有声明
decl.meta.title = \s– {0} 声明
decl.noResultWord = 没有“{0}”的声明
generic.noResults = 没有定义
goToImplementation.generic.noResults = 没有实现
goToImplementation.noResultWord = 没有“{0}”的实现
goToTypeDefinition.generic.noResults = 没有类型定义
goToTypeDefinition.noResultWord = 没有“{0}”的类型定义
meta.implementations.title = \s– {0} 个实现
meta.title = \s– {0} 定义
meta.typeDefinitions.title = \s– {0} 个类型定义
miGotoDefinition = 转到定义(&&D)…
miGotoImplementation = 转到实现(&&I)
miGotoTypeDefinition = 转到类型定义(&&T)
noResultWord = 没有“{0}”的定义

[vs/editor/contrib/goToDefinition/goToDefinitionResultsNavigation]
location = 第 {0} 个符号，共 {1} 个
location.kb = 第 {0} 个符号，共 {1} 个，按 {2} 转到下一个

[vs/editor/contrib/gotoError/gotoError]
markerAction.next.label = 转到下一个问题（错误、警告、信息）
markerAction.nextInFiles.label = 转到文件中的下一个问题（错误、警告、信息）
markerAction.previous.label = 转到上一个问题（错误、警告、信息）
markerAction.previousInFiles.label = 转到文件中的上一个问题（错误、警告、信息）
miGotoNextProblem = 下一个问题(&&P)
miGotoPreviousProblem = 上一个问题(&&P)

[vs/editor/contrib/gotoError/gotoErrorWidget]
change = {0} 个问题，共 {1} 个
editorMarkerNavigationBackground = 编辑器标记导航小组件背景色。
editorMarkerNavigationError = 编辑器标记导航小组件错误颜色。
editorMarkerNavigationInfo = 编辑器标记导航小组件信息颜色。
editorMarkerNavigationWarning = 编辑器标记导航小组件警告颜色。
problems = {0} 个问题，共 {1} 个

[vs/editor/contrib/hover/hover]
showCtrlHover = 显示 Ctrl 键悬停
showHover = 显示悬停提示

[vs/editor/contrib/hover/modesContentHover]
checkingForQuickFixes = 正在检查快速修复…
modesContentHover.loading = 正在加载…
noQuickFixes = 无快速修复
peek problem = 速览问题
quick fixes = 快速修复…

[vs/editor/contrib/inPlaceReplace/inPlaceReplace]
InPlaceReplaceAction.next.label = 替换为下一个值
InPlaceReplaceAction.previous.label = 替换为上一个值

[vs/editor/contrib/indentation/indentation]
configuredTabSize = 设置的缩进大小
detectIndentation = 从内容中检测缩进方式
editor.reindentlines = 重新缩进行
editor.reindentselectedlines = 重新缩进所选行
indentUsingSpaces = 使用空格缩进
indentUsingTabs = 使用制表符缩进
indentationToSpaces = 转换为空格缩进
indentationToTabs = 转换为制表符缩进
selectTabWidth = 选择当前文件的缩进大小

[vs/editor/contrib/linesOperations/linesOperations]
duplicateSelection = 复制选区
editor.transformToLowercase = 转换为小写
editor.transformToTitlecase = 转换为词首大写
editor.transformToUppercase = 转换为大写
editor.transpose = 转置光标处的字符
lines.copyDown = 向下复制行
lines.copyUp = 向上复制行
lines.delete = 删除行
lines.deleteAllLeft = 删除左侧内容
lines.deleteAllRight = 删除右侧内容
lines.indent = 缩进行
lines.insertAfter = 在下面插入行
lines.insertBefore = 在上面插入行
lines.joinLines = 合并行
lines.moveDown = 向下移动行
lines.moveUp = 向上移动行
lines.outdent = 减少缩进行
lines.sortAscending = 按升序排列行
lines.sortDescending = 按降序排列行
lines.trimTrailingWhitespace = 裁剪尾随空格
miCopyLinesDown = 向下复制行(&&P)
miCopyLinesUp = 向上复制行(&&C)
miDuplicateSelection = 复制选区
miMoveLinesDown = 向下移动行(&&L)
miMoveLinesUp = 向上移动行(&&V)

[vs/editor/contrib/links/links]
invalid.url = 链接格式不正确，不能打开：{0}
label = 打开链接
links.navigate.executeCmd = 执行命令
links.navigate.follow = 访问链接
links.navigate.kb.alt = 按住 Alt 键点击
links.navigate.kb.alt.mac = 按住 Option 键点击
links.navigate.kb.meta = 按住 Ctrl 键点击
links.navigate.kb.meta.mac = 按住 Command 键点击
missing.url = 缺少链接目标，不能打开。

[vs/editor/contrib/message/messageController]
editor.readonly = 未能在只读编辑器中编辑

[vs/editor/contrib/multicursor/multicursor]
addSelectionToNextFindMatch = 将下一个匹配项添加到选区
addSelectionToPreviousFindMatch = 将上一个匹配项添加到选区
changeAll.label = 更改所有匹配项
miAddSelectionToNextFindMatch = 在下一个匹配项处添加光标(&&N)
miAddSelectionToPreviousFindMatch = 在上一个匹配项处添加光标(&&R)
miInsertCursorAbove = 在上方添加光标(&&A)
miInsertCursorAtEndOfEachLineSelected = 在行尾添加光标(&&U)
miInsertCursorBelow = 在下方添加光标(&&D)
miSelectHighlights = 选择所有匹配项(&&O)
moveSelectionToNextFindMatch = 将上次选区移动到下一个匹配项
moveSelectionToPreviousFindMatch = 将上个选区移动到上一匹配项
mutlicursor.addCursorsToBottom = 在底部添加光标
mutlicursor.addCursorsToTop = 在顶部添加光标
mutlicursor.insertAbove = 在上方添加光标
mutlicursor.insertAtEndOfEachLineSelected = 在行尾添加光标
mutlicursor.insertBelow = 在下方添加光标
selectAllOccurrencesOfFindMatch = 选择所有匹配项

[vs/editor/contrib/parameterHints/parameterHints]
parameterHints.trigger.label = 触发参数提示

[vs/editor/contrib/parameterHints/parameterHintsWidget]
hint = {0}，提示

[vs/editor/contrib/referenceSearch/peekViewWidget]
label.close = 关闭

[vs/editor/contrib/referenceSearch/referenceSearch]
meta.titleReference = \s– {0} 个引用
references.action.label = 查看引用

[vs/editor/contrib/referenceSearch/referencesController]
labelLoading = 正在加载…

[vs/editor/contrib/referenceSearch/referencesModel]
aria.fileReferences.1 = {0} 中有 1 个符号，完整路径：{1}
aria.fileReferences.N = {1} 中有 {0} 个符号，完整路径：{2}
aria.oneReference = 在文件 {0} 的 {1} 行 {2} 列的符号
aria.result.0 = 没有结果
aria.result.1 = 在 {0} 中找到 1 个符号
aria.result.n1 = 在 {1} 中找到 {0} 个符号
aria.result.nm = 在 {1} 个文件中找到 {0} 个符号

[vs/editor/contrib/referenceSearch/referencesTree]
referenceCount = {0} 个引用
referencesCount = {0} 个引用
referencesFailre = 解析文件失败。

[vs/editor/contrib/referenceSearch/referencesWidget]
missingPreviewMessage = 无可用预览
noResults = 无结果
peekView.alternateTitle = 引用
peekViewBorder = 速览视图边框和箭头颜色。
peekViewEditorBackground = 速览视图编辑器背景色。
peekViewEditorGutterBackground = 速览视图编辑器中行号栏的背景色。
peekViewEditorMatchHighlight = 在速览视图编辑器中匹配突出显示颜色。
peekViewEditorMatchHighlightBorder = 在速览视图编辑器中匹配项的突出显示边框。
peekViewResultsBackground = 速览视图结果列表背景色。
peekViewResultsFileForeground = 速览视图结果列表中文件节点的前景色。
peekViewResultsMatchForeground = 速览视图结果列表中行节点的前景色。
peekViewResultsMatchHighlight = 在速览视图结果列表中匹配突出显示颜色。
peekViewResultsSelectionBackground = 速览视图结果列表中所选条目的背景色。
peekViewResultsSelectionForeground = 速览视图结果列表中所选条目的前景色。
peekViewTitleBackground = 速览视图标题区域背景色。
peekViewTitleForeground = 速览视图标题颜色。
peekViewTitleInfoForeground = 速览视图标题信息颜色。
treeAriaLabel = 引用

[vs/editor/contrib/rename/rename]
aria = 成功将“{0}”重命名为“{1}”。摘要：{2}
no result = 无结果。
rename.failed = 重命名时出错。
rename.label = 重命名符号
resolveRenameLocationFailed = 解析重命名位置时发生未知错误

[vs/editor/contrib/rename/renameInputField]
renameAriaLabel = 重命名输入。键入新名称并按 Enter 键提交。

[vs/editor/contrib/smartSelect/smartSelect]
miSmartSelectGrow = 展开选定内容(&&E)
miSmartSelectShrink = 缩小选定范围(&&S)
smartSelect.expand = 展开选择
smartSelect.shrink = 收起选择

[vs/editor/contrib/snippet/snippetVariables]
April = 四月
AprilShort = 4 月
August = 八月
AugustShort = 8 月
December = 十二月
DecemberShort = 12 月
February = 二月
FebruaryShort = 2 月
Friday = 星期五
FridayShort = 周五
January = 一月
JanuaryShort = 1 月
July = 七月
JulyShort = 7 月
June = 六月
JuneShort = 6 月
March = 三月
MarchShort = 3 月
May = 五月
MayShort = 5 月
Monday = 星期一
MondayShort = 周一
November = 十一月
NovemberShort = 11 月
October = 十月
OctoberShort = 10 月
Saturday = 星期六
SaturdayShort = 周六
September = 九月
SeptemberShort = 9 月
Sunday = 星期天
SundayShort = 周日
Thursday = 星期四
ThursdayShort = 周四
Tuesday = 星期二
TuesdayShort = 周二
Wednesday = 星期三
WednesdayShort = 周三

[vs/editor/contrib/suggest/suggestController]
arai.alert.snippet = 选择“{0}”后进行了其他 {1} 次编辑
suggest.trigger.label = 触发建议

[vs/editor/contrib/suggest/suggestWidget]
ariaCurrenttSuggestionReadDetails = 项目 {0}，文档：{1}
editorSuggestWidgetBackground = 建议小组件的背景色。
editorSuggestWidgetBorder = 建议小组件的边框颜色。
editorSuggestWidgetForeground = 建议小组件的前景色。
editorSuggestWidgetHighlightForeground = 建议小组件中匹配内容的高亮颜色。
editorSuggestWidgetSelectedBackground = 建议小组件中所选条目的背景色。
loading = 正在加载…
readLess = 显示更少…{0}
readMore = 显示更多…{0}
suggestWidget.loading = 正在加载…
suggestWidget.noSuggestions = 无建议。

[vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode]
toggle.tabMovesFocus = 切换 Tab 键移动焦点
toggle.tabMovesFocus.off = Tab 键将插入制表符
toggle.tabMovesFocus.on = Tab 键将移动到下一可聚焦的元素

[vs/editor/contrib/tokenization/tokenization]
forceRetokenize = 开发者：强制重新进行标记

[vs/editor/contrib/wordHighlighter/wordHighlighter]
overviewRulerWordHighlightForeground = 用于突出显示符号的概述标尺标记颜色。颜色应透明。
overviewRulerWordHighlightStrongForeground = 用于突出显示写权限符号的概述标尺标记颜色。颜色应透明。
wordHighlight = 读取访问期间符号的背景色，例如读取变量时。颜色应透明。
wordHighlight.next.label = 转到下一个突出显示的符号
wordHighlight.previous.label = 转到上一个突出显示的符号
wordHighlight.trigger.label = 触发符号高亮
wordHighlightBorder = 符号在进行读取访问操作时的边框颜色，例如读取变量。
wordHighlightStrong = 写入访问过程中符号的背景色，例如写入变量时。颜色应透明。
wordHighlightStrongBorder = 符号在进行写入访问操作时的边框颜色，例如写入变量。

[vs/platform/actions/browser/menuEntryActionViewItem]
titleAndKb = {0}（{1}）

[vs/platform/configuration/common/configurationRegistry]
config.property.duplicate = 未能注册“{0}”。此属性已注册。
config.property.languageDefault = 未能注册“{0}”。其符合描述特定语言编辑器设置的表达式“\\\\[.*\\\\]$”。请使用“configurationDefaults”。
defaultConfigurations.title = 默认配置替代
overrideSettings.defaultDescription = 针对某种语言，配置替代编辑器设置。
overrideSettings.description = 针对 {0} 语言，配置替代编辑器设置。

[vs/platform/dialogs/common/dialogs]
moreFile = …1 个其他文件未显示
moreFiles = …{0} 个其他文件未显示

[vs/platform/dialogs/electron-main/dialogs]
open = 打开
openFile = 打开文件
openFolder = 打开文件夹
openWorkspace = 打开(&&O)
openWorkspaceTitle = 打开工作区

[vs/platform/environment/node/argv]
add = 将文件夹添加到上一个活动窗口。
category = 使用“--list-extension”命令行选项按提供的类别筛选已安装的扩展。
diff = 将两个文件相互比较。
disableExtension = 禁用一个扩展。
disableExtensions = 禁用所有已安装的扩展。
disableGPU = 禁用 GPU 硬件加速。
experimentalApis = 为扩展启用实验性 API 功能。可以输入一个或多个扩展的标识符来进行单独启用。
extensionHomePath = 设置扩展的根路径。
extensionsManagement = 扩展管理
fileUri = 使用给定的文件 URI 打开窗口
folderUri = 在新窗口中打开一个或多个给定 URI 的文件夹
goto = 打开路径下的文件并定位到特定行和特定列。
help = 打印使用情况。
inspect-brk-extensions = 允许扩展宿主在启动后暂停时进行扩展的调试和分析。您可以在开发人员工具中找到连接 URI。
inspect-extensions = 允许调试和分析扩展。您可以在开发人员工具中找到连接 URI。
installExtension = 安装或更新扩展。可使用 "--force" 开关去除提示。
listExtensions = 列出已安装的扩展。
locale = 要使用的区域设置，如 "en-US" 或 "zh-CN"。
log = 使用的日志级别。默认为 "info"。允许的值为 "critical"（关键）、"error"（错误）、"warn"（警告）、"info"（信息）、"debug"（调试）、"trace"（跟踪）和 "off"（关闭）。
maxMemory = 单个窗口最大内存大小，以 MB 为单位。
newWindow = 强制打开新窗口。
options = 选项
optionsUpperCase = 选项
paths = 路径
prof-startup = 启动期间运行 CPU 探查器
reuseWindow = 强制在已打开的窗口中打开文件或文件夹。
showVersions = 使用 "--list-extension" 开关时，显示已安装扩展的版本。
status = 打印进程使用情况和诊断信息。
stdinUnix = 要从输入流中读取，请追加 "-"，如 "ps aux | grep code | {0} -"。
stdinWindows = 要读取其他程序的输出，请追加 "-"，如 "echo Hello World | {0} -"。
telemetry = 显示 VS Code 收集的所有遥测事件。
troubleshooting = 故障排查
uninstallExtension = 卸载扩展。
unknownCommit = 未知提交
unknownVersion = 未知版本
usage = 使用情况
userDataDir = 指定保存用户数据的目录。可用于打开多个不同的 VS Code 实例。
verbose = 打印详细输出，蕴含 "--wait"。
version = 打印版本。
wait = 等文件关闭后再返回。

[vs/platform/environment/node/argvHelper]
gotoValidation = "--goto" 模式中的参数格式应为 "FILE(:LINE(:CHARACTER))"。
multipleValues = 多次提供的选项 "{0}"。已使用值 "{1}"。
unknownOption = 未知的选项 "{0}"。已忽略。

[vs/platform/extensionManagement/common/extensionManagement]
extensions = 扩展
preferences = 设置

[vs/platform/extensionManagement/node/extensionManagementService]
MarketPlaceDisabled = 市场被禁用
Not a Marketplace extension = 只能重新安装商店中的扩展
cannot read = 未能从 {0} 读取扩展
errorDeleting = 安装扩展“{1}”时未能删除现有文件夹“{0}”。请手动删除此文件夹，然后重试
exitCode = 未能安装扩展。请在重启 VS Code 后重新安装。
incompatible = 未能安装扩展“{0}”，因为它不兼容 VS Code 版本 {1}。
invalidManifest = 扩展无效：“package.json”不是 JSON 文件。
malicious extension = 未能安装此扩展，它被报告存在问题。
multipleDependentsError = 未能卸载扩展“{0}”。扩展“{1}”、“{2}”以及其他扩展都依赖于此。
notExists = 找不到扩展
notFoundCompatibleDependency = 未能安装扩展“{0}”，因为它不兼容 VS Code 版本 {1}。
notInstalled = 未安装扩展“{0}”。
quitCode = 安装扩展失败。请重启 VS Code 然后重试。
removeError = 删除扩展失败：{0}。请重启 VS Code 然后重试。
renameError = 将 {0} 重命名为 {1} 时出错。
restartCode = 请在重新安装扩展 {0} 之前重新启动 VS Code。
singleDependentError = 未能卸载扩展“{0}”：扩展“{1}”依赖于它。
twoDependentsError = 未能卸载扩展“{0}”：扩展“{1}”与“{2}”依赖于它。

[vs/platform/extensionManagement/node/extensionManagementUtil]
invalidManifest = VSIX 无效：“package.json”不是 JSON 文件。

[vs/platform/extensions/common/extensionValidator]
versionMismatch = 扩展与 VS Code {0} 不兼容：扩展需要 {1} 版本。
versionSpecificity1 = 扩展指定的 VS Code 版本 {0} 不够具体。对于 1.0.0 之前的 VS Code 版本，请至少指定主要和次要版本。
versionSpecificity2 = 扩展指定的 VS Code 版本 {0} 不够具体。对于 1.0.0 之后的 VS Code 版本，请至少指定主要版本。
versionSyntax = 未能解析扩展指定的 VS Code 版本 {0}。

[vs/platform/files/common/fileService]
deleteFailed = 未能删除非空的文件夹“{0}”。
err.read = 未能读取文件“{0}”。
err.readonly = 未能修改资源。
err.trash = 提供程序不支持移动到回收站。
err.write = 未能写入文件“{0}”。
fileExists = 已存在要创建的文件“{0}”。
fileIsDirectoryError = 预期的文件“{0}”实际上是一个目录。
fileModifiedError = 自以下时间已修改的文件：
fileNotFoundError = 找不到文件“{0}”。
fileNotModifiedError = 自以下时间未修改的文件：
fileTooLargeError = 文件太大, 未能打开。
fileTooLargeForHeapError = 要打开此大小的文件, 您需要重新启动并允许它使用更多内存。
invalidPath = 资源“{0}”的路径应是绝对路径。
mkdirExistsError = “{0}”存在, 但不是目录。
noProviderFound = 找不到“{0}”的文件系统提供程序。
unableToMoveCopyError1 = 当源路径与目标路径相同或为其父路径时, 未能移动或拷贝。
unableToMoveCopyError2 = 未能移动或拷贝。文件已存在于目标位置。
unableToMoveCopyError3 = 未能移动或拷贝。文件不能替换其所在的文件夹。
unableToMoveCopyError4 = 未能移动或拷贝。文件不能替换其所在的文件夹。
unknownError = 未知错误

[vs/platform/files/electron-browser/diskFileSystemProvider]
binFailed = 未能将“{0}”移动到回收站
trashFailed = 未能将“{0}”移动到废纸篓

[vs/platform/files/node/diskFileSystemProvider]
copyError = 未能将“{0}”拷贝到“{1}”（{2}）中。
fileExists = 文件已存在
fileNotExists = 文件不存在
moveError = 未能将“{0}”移动到“{1}”（{2}）中。

[vs/platform/issue/electron-main/issueMainService]
cancel = 取消
confirmCloseIssueReporter = 您的输入将不会保存。是否关闭此窗口？
issueReporter = 报告问题
issueReporterWriteToClipboard = 数据太多，不能直接发送到 GitHub。是否要将数据保存到粘贴板？
local = 本地
ok = 确定
processExplorer = 进程管理器
yes = 关闭

[vs/platform/keybinding/common/abstractKeybindingService]
first.chord = 已按 {0}，请按第二个键…
missing.chord = 组合键 {0}，{1} 不是命令。

[vs/platform/label/common/label]
untitledWorkspace = 无标题（工作区）
workspaceName = {0}（工作区）

[vs/platform/list/browser/listService]
automatic keyboard navigation setting = 列表和树中的键盘导航仅通过键入自动触发。设置为 `false` 表示键盘导航只在执行 `list.toggleKeyboardNavigation` 命令时触发，您可以为该命令指定快捷键。
deprecated = 已弃用：请改用 `{0}`。
horizontalScrolling setting = 使列表和树可以水平滚动。
keyboardNavigationSettingKey = 列表和树的键盘导航样式。可为 `"simple"`、`"highlight"` 或 `"filter"`。
keyboardNavigationSettingKey.filter = 筛选器键盘导航将筛选出并隐藏与键盘输入不匹配的所有元素。
keyboardNavigationSettingKey.highlight = 高亮键盘导航会突出显示与键盘输入相匹配的元素。进一步向上和向下导航将仅遍历突出显示的元素。
keyboardNavigationSettingKey.simple = 简单键盘导航聚焦与键盘输入相匹配的元素。仅对前缀进行匹配。
multiSelectModifier = 在通过鼠标多选树和列表条目时使用的修改键（例如“资源”和“版本”面板）。“在侧边打开”功能所需的鼠标动作（若可用）将会相应调整，不与多选修改键冲突。
multiSelectModifier.alt = 映射为 Alt（Windows 和 Linux）或 Option（macOS）
multiSelectModifier.ctrlCmd = 映射为 Ctrl（Windows 和 Linux）或 Command（macOS）
openModeModifier = 在树和列表中怎样使用鼠标来展开子项（若支持）。对于树中的父节点，此设置将决定是使用点击还是双击来展开。某些不适用于此设置的树或列表可能会忽略此项。
render tree indent guides = 在树中显示缩进参考线。
tree horizontalScrolling setting = 使树可以水平滚动。
tree indent setting = 树的缩进，以像素为单位。
workbenchConfigurationTitle = 工作台

[vs/platform/markers/common/markers]
sev.error = 错误
sev.info = 信息
sev.warning = 警告

[vs/platform/menubar/electron-main/menubar]
mAbout = 关于 {0}
mBringToFront = 全部置于顶层
mDebug = 调试(&&D)
mEdit = 编辑(&&E)
mFile = 文件(&&F)
mGoto = 转到(&&G)
mHelp = 帮助(&&H)
mHide = 隐藏 {0}
mHideOthers = 隐藏其他
mMergeAllWindows = 合并所有窗口
mMinimize = 最小化
mMoveTabToNewWindow = 移动标签页到新窗口
mNewTab = 新建标签页
mSelection = 选择(&&S)
mServices = 服务
mShowAll = 全部显示
mShowNextTab = 显示下一个选项卡
mShowPreviousTab = 显示上一个选项卡
mTerminal = 终端(&&T)
mView = 查看(&&V)
mWindow = 窗口
mZoom = 缩放
miCheckForUpdates = 检查更新(&&U)…
miCheckingForUpdates = 正在检查更新…
miDownloadUpdate = 下载可用更新(&&O)
miDownloadingUpdate = 正在下载更新…
miInstallUpdate = 安装更新(&&U)…
miInstallingUpdate = 正在安装更新…
miNewWindow = 新建窗口(&&W)
miPreferences = 设置(&&P)
miQuit = 退出 {0}
miRestartToUpdate = 重新启动以更新(&&U)
miSwitchWindow = 切换窗口(&&W)…

[vs/platform/request/common/request]
httpConfigurationTitle = HTTP
proxy = 使用的代理设置。默认从 `http_proxy` 和 `https_proxy` 环境变量中获取。
proxyAuthorization = 要作为每个网络请求的 `Proxy-Authorization` 标头发送的值。
proxySupport = 对扩展使用代理支持。
proxySupportOff = 禁用对扩展的代理支持。
proxySupportOn = 为扩展启用代理支持。
proxySupportOverride = 为扩展启用代理支持，覆盖请求选项。
strictSSL = 是否根据提供的 CA 列表验证代理服务器证书。
systemCertificates = 是否应从操作系统加载 CA 证书。（在 Windows 和 macOS 上, 关闭此窗口后需要重新加载窗口。）

[vs/platform/telemetry/common/telemetryService]
telemetry.enableTelemetry = 将使用数据和错误报告发送给 Microsoft。
telemetryConfigurationTitle = 分析

[vs/platform/theme/common/colorRegistry]
activeContrastBorder = 在活动元素周围额外的一层边框，用来提高对比度从而区别其他元素。
activeLinkForeground = 活动链接的颜色。
badgeBackground = 徽标（badge）的背景色。
badgeForeground = 徽标（badge）的前景色。
breadcrumbsBackground = 面包屑项的背景色。
breadcrumbsFocusForeground = 焦点面包屑项的颜色。
breadcrumbsSelectedBackground = 面包屑项选择器的背景色。
breadcrumbsSelectedForegound = 已选面包屑项的颜色。
buttonBackground = 按钮的背景色。
buttonForeground = 按钮的前景色。
buttonHoverBackground = 按钮在悬停时的背景色。
checkbox.background = 复选框小部件的背景色。
checkbox.border = 复选框小部件的边框颜色。
checkbox.foreground = 复选框小部件的前景色。
contrastBorder = 在元素周围额外的一层边框，用来提高对比度从而区别其他元素。
descriptionForeground = 提供其他信息的说明文本的前景色，例如标签文本。
diffEditorBorder = 两个文本编辑器之间的边框颜色。
diffEditorInserted = 已插入的文本的背景色。颜色应透明。
diffEditorInsertedOutline = 插入的文本的轮廓颜色。
diffEditorRemoved = 已删除的文本的背景色。颜色应透明。
diffEditorRemovedOutline = 被删除文本的轮廓颜色。
dropdownBackground = 下拉列表的背景色。
dropdownBorder = 下拉列表的边框颜色。
dropdownForeground = 下拉列表前景色。
dropdownListBackground = 下拉列表的背景色。
editorBackground = 编辑器的背景色。
editorError.foreground = 错误波浪线的颜色。
editorFindMatch = 当前搜索匹配项的颜色。
editorFindMatchBorder = 当前搜索匹配项的边框颜色。
editorForeground = 编辑器默认的前景色。
editorHint.foreground = 提示波浪线的颜色。
editorInactiveSelection = 非活动编辑器中所选内容的颜色。颜色应透明。
editorInfo.foreground = 信息波浪线的颜色。
editorLightBulbAutoFixForeground = 自动修复灯泡图标的颜色。
editorLightBulbForeground = 灯泡图标的颜色。
editorSelectionBackground = 编辑器所选内容的颜色。
editorSelectionForeground = 用以彰显高对比度的所选文本的颜色。
editorSelectionHighlight = 具有与所选项相关内容的区域的颜色。颜色应透明。
editorSelectionHighlightBorder = 与所选项内容相同的区域的边框颜色。
editorWarning.foreground = 警告波浪线的颜色。
editorWidgetBackground = 编辑器组件的背景色。
editorWidgetBorder = 编辑器小组件的边框颜色。此颜色仅在小组件有边框且不被小组件重写时适用。
editorWidgetForeground = 编辑器小组件的前景色。
editorWidgetResizeBorder = 编辑器小组件大小调整条的边框颜色。此颜色仅在小组件有调整边框且不被小组件颜色覆盖时使用。
errorBorder = 错误框的边框颜色。
errorForeground = 错误信息的前景色。此颜色仅在不被组件覆盖时适用。
findMatchHighlight = 其他搜索匹配项的颜色。颜色应透明。
findMatchHighlightBorder = 其他搜索匹配项的边框颜色。
findRangeHighlight = 限制搜索范围的颜色。颜色应透明。
findRangeHighlightBorder = 限制搜索的范围的边框颜色。颜色应透明。
focusBorder = 焦点元素的整体边框颜色。此颜色仅在不被其他组件覆盖时适用。
foreground = 整体前景色。此颜色仅在不被组件覆盖时适用。
highlight = 在列表或树中搜索时，其中匹配内容的高亮颜色。
hintBorder = 提示框的边框颜色。
hoverBackground = 编辑器悬停提示的背景色。
hoverBorder = 光标悬停时编辑器的边框颜色。
hoverForeground = 编辑器悬停的前景色。
hoverHighlight = 在下面突出显示悬停的字词。颜色应透明。
iconForeground = 工作台中图标的默认颜色。
infoBorder = 信息框的边框颜色。
inputBoxActiveOptionBorder = 输入字段中已激活选项的边框颜色。
inputBoxBackground = 输入框的背景色。
inputBoxBorder = 输入框的边框颜色。
inputBoxForeground = 输入框的前景色。
inputOption.activeBackground = 输入字段中激活选项的背景色。
inputPlaceholderForeground = 输入框中占位符的前景色。
inputValidationErrorBackground = 输入验证结果为错误级别时的背景色。
inputValidationErrorBorder = 严重性为错误时输入验证的边框颜色。
inputValidationErrorForeground = 输入验证结果为错误级别时的前景色。
inputValidationInfoBackground = 输入验证结果为信息级别时的背景色。
inputValidationInfoBorder = 严重性为信息时输入验证的边框颜色。
inputValidationInfoForeground = 输入验证结果为信息级别时的前景色。
inputValidationWarningBackground = 严重性为警告时输入验证的背景色。
inputValidationWarningBorder = 严重性为警告时输入验证的边框颜色。
inputValidationWarningForeground = 输入验证结果为警告级别时的前景色。
invalidItemForeground = 列表或树中无效项的前景色，例如“资源”面板中没有解析的根目录。
listActiveSelectionBackground = 已选项在列表或树活动时的背景色。
listActiveSelectionForeground = 已选项在列表或树活动时的前景色。
listDropBackground = 使用鼠标移动项目时，列表或树进行拖放的背景色。
listErrorForeground = 包含错误的列表项的前景色。
listFilterMatchHighlight = 筛选后的匹配项的背景色。
listFilterMatchHighlightBorder = 筛选后的匹配项的边框颜色。
listFilterWidgetBackground = 列表和树中类型筛选器小组件的背景色。
listFilterWidgetNoMatchesOutline = 当没有匹配项时，列表和树中类型筛选器小组件的轮廓颜色。
listFilterWidgetOutline = 列表和树中类型筛选器小组件的轮廓颜色。
listFocusBackground = 焦点项在列表或树活动时的背景色。
listFocusForeground = 焦点项在列表或树活动时的背景色。
listHoverBackground = 使用鼠标移动项目时，列表或树的背景色。
listHoverForeground = 鼠标在项目上悬停时，列表或树的前景色。
listInactiveFocusBackground = 非活动的列表或树控件中焦点项的背景色。
listInactiveSelectionBackground = 已选项在列表或树非活动时的背景色。
listInactiveSelectionForeground = 已选项在列表或树非活动时的前景色。
listWarningForeground = 包含警告的列表项的前景色。
menuBackground = 菜单项的背景色。
menuBorder = 菜单的边框颜色。
menuForeground = 菜单项的前景色。
menuSelectionBackground = 菜单中所选菜单项的背景色。
menuSelectionBorder = 菜单中所选菜单项的边框颜色。
menuSelectionForeground = 菜单中选定菜单项的前景色。
menuSeparatorBackground = 菜单中分隔线的颜色。
mergeBorder = 内联合并冲突中标头和分割线的边框颜色。
mergeCommonContentBackground = 内联合并冲突中的常见祖先内容的背景色。颜色应透明。
mergeCommonHeaderBackground = 内联合并冲突中的常见祖先标头的背景色。颜色应透明。
mergeCurrentContentBackground = 内联合并冲突中的当前内容的背景色。颜色应透明。
mergeCurrentHeaderBackground = 当前标题的内联合并冲突的背景色。颜色应透明。
mergeIncomingContentBackground = 内联合并冲突中的传入内容的背景色。颜色应透明。
mergeIncomingHeaderBackground = 内联合并冲突中的传入标题的背景色。颜色应透明。
minimapFindMatchHighlight = 小地图中查找匹配项的颜色。
minimapSelectionHighlight = 编辑器选区在小地图中对应的标记颜色。
overviewRulerCommonContentForeground = 内联合并冲突中共同祖先区域的概览标尺的前景色。
overviewRulerCurrentContentForeground = 内联合并冲突中当前版本区域的概览标尺的前景色。
overviewRulerFindMatchForeground = 用于查找匹配项的概述标尺标记的颜色。颜色应透明。
overviewRulerIncomingContentForeground = 内联合并冲突中传入的版本区域的概览标尺的前景色。
overviewRulerSelectionHighlightForeground = 用于突出显示所选内容的概述标尺标记的颜色。颜色应透明。
pickerGroupBorder = 快速选取器分组边框颜色。
pickerGroupForeground = 快速选取器分组标签的颜色。
problemsErrorIconForeground = 问题错误图标的颜色。
problemsInfoIconForeground = 问题信息图标的颜色。
problemsWarningIconForeground = 问题警告图标的颜色。
progressBarBackground = 表示长时间操作的进度条的背景色。
scrollbarShadow = 表示视图被滚动的滚动条阴影颜色。
scrollbarSliderActiveBackground = 滚动条滑块在被点击时的背景色。
scrollbarSliderBackground = 滚动条滑块的背景色。
scrollbarSliderHoverBackground = 滚动条滑块在悬停时的背景色。
selectionBackground = 工作台所选文本的背景色（例如输入字段或文本区域）。本设置不适用于编辑器。
snippetFinalTabstopHighlightBackground = 代码片段中最后的占位符的高亮背景色。
snippetFinalTabstopHighlightBorder = 代码片段中最后的占位符的高亮边框颜色。
snippetTabstopHighlightBackground = 代码片段占位符的高亮背景色。
snippetTabstopHighlightBorder = 代码片段占位符的高亮边框颜色。
statusBarBackground = 编辑器悬停状态栏的背景色。
textBlockQuoteBackground = 文本中块引用的背景色。
textBlockQuoteBorder = 文本中块引用的边框颜色。
textCodeBlockBackground = 文本中代码块的背景色。
textLinkActiveForeground = 文本中链接在点击或鼠标悬停时的前景色。
textLinkForeground = 文本中链接的前景色。
textPreformatForeground = 预格式化文本段的前景色。
textSeparatorForeground = 文字分隔符的颜色。
treeIndentGuidesStroke = 树的缩进参考线的颜色。
warningBorder = 警告框的边框颜色。
widgetShadow = 编辑器小组件的阴影颜色。

[vs/platform/update/common/update.config.contribution]
default = 启用自动更新检查。代码将定期自动检查更新。
deprecated = 此设置已弃用，请改用“{0}”。
enableWindowsBackgroundUpdates = 启用 Windows 后台更新。更新将从微软在线服务中获取。
enableWindowsBackgroundUpdatesTitle = 启用 Windows 后台更新
manual = 禁用自动后台更新检查。如果手动检查更新，更新将可用。
none = 禁用更新。
showReleaseNotes = 在更新后显示发行说明。发行说明将从微软在线服务中获取。
start = 仅在启动时检查更新。禁用自动后台更新检查。
updateConfigurationTitle = 更新
updateMode = 配置是否接收自动更新。需要重新启动。更新是从微软在线服务获取的。

[vs/platform/userDataSync/common/settingsSync]
errorInvalidSettings = 无法同步设置。请在没有任何错误和警告的情况下解决冲突，然后重试。

[vs/platform/userDataSync/common/userDataSync]
configurationSync = 设置同步
configurationSync.enable = 同步设置和扩展。
configurationSync.enableAuth = 启用身份验证，并在更改后重启 VS Code。
configurationSync.enableExtensions = 同步扩展。
configurationSync.enableSettings = 同步设置。
configurationSync.extensionsToIgnore = 配置同步时要忽略的扩展。
configurationSync.settingsToIgnore = 配置同步时要忽略的设置。\n默认忽略的设置：\n\n{0}

[vs/platform/windows/electron-main/windowsMainService]
ok = 确定
pathNotExistDetail = 磁盘上不存在路径“{0}”。
pathNotExistTitle = 路径不存在
uriInvalidDetail = URI“{0}”无效，无法打开。
uriInvalidTitle = 无法打开 URI

[vs/platform/workspaces/common/workspaces]
codeWorkspace = Code 工作区

[vs/platform/workspaces/electron-main/workspacesHistoryMainService]
folderDesc = {0} {1}
newWindow = 新建窗口
newWindowDesc = 新建窗口
recentFolders = 最近使用的工作区
workspaceDesc = {0} {1}

[vs/platform/workspaces/electron-main/workspacesMainService]
ok = 确定
workspaceOpenedDetail = 已在另一个窗口打开工作区。请先关闭该窗口，然后重试。
workspaceOpenedMessage = 无法保存工作区“{0}”

[vs/workbench/api/browser/mainThreadEditors]
diffLeftRightLabel = {0} ⟷ {1}

[vs/workbench/api/browser/mainThreadExtensionService]
disabledDep = 未能激活“{0}”扩展, 因为它依赖于“{1}”扩展, 该扩展已禁用。是否启用扩展并重新加载窗口？
enable dep = 启用和重新加载
install missing dep = 安装并重新加载
reload = 重新加载窗口
reload window = 未能激活“{0}”扩展, 因为它依赖于未加载的“{1}”扩展。是否重新加载窗口以加载扩展名？
uninstalledDep = 未能激活“{0}”扩展, 因为它依赖于未安装的“{1}”扩展。是否安装扩展并重新加载窗口？
unknownDep = 未能激活“{0}”扩展, 因为它依赖于未知的“{1}”扩展。

[vs/workbench/api/browser/mainThreadMessageService]
cancel = 取消
defaultSource = 扩展
extensionSource = {0}（扩展）
manageExtension = 管理扩展
ok = 确定

[vs/workbench/api/browser/mainThreadProgress]
manageExtension = 管理扩展

[vs/workbench/api/browser/mainThreadSaveParticipant]
codeActionsOnSave.didTimeout = 在 {0}ms 后终止了保存时代码操作
saveParticipants = 正在运行保存动作…
timeout.formatOnSave = 在 {0}ms 后终止了保存时代码格式化
timeout.onWillSave = 在 1750ms 后终止了保存事件处理程序

[vs/workbench/api/browser/mainThreadTask]
task.label = {0}：{1}

[vs/workbench/api/browser/mainThreadWebview]
errorMessage = 还原视图时出错：{0}

[vs/workbench/api/browser/mainThreadWorkspace]
folderStatusChangeFolder = 扩展“{0}”更改了工作区中的文件夹
folderStatusMessageAddMultipleFolders = 扩展“{0}”添加了 {1} 个文件夹到工作区
folderStatusMessageAddSingleFolder = 扩展“{0}”添加了 1 个文件夹到工作区
folderStatusMessageRemoveMultipleFolders = 扩展“{0}”从工作区删除了 {1} 个文件夹
folderStatusMessageRemoveSingleFolder = 扩展“{0}”从工作区删除了 1 个文件夹

[vs/workbench/api/browser/viewsExtensionPoint]
ViewContainerDoesnotExist = 面板“{0}”不存在。添加到其中的子面板将被转移到“资源”面板中。
ViewContainerRequiresProposedAPI = 查看容器“{0}”需要启用“enableProposedApi”以添加到“Remote”。
duplicateView1 = 不能在“{1}”面板中添加多个具有相同标识符 `{0}` 的子面板。
duplicateView2 = 面板“{1}”中已有标识符为 `{0}` 的子面板。
optstring = `{0}` 属性值（可省略）应是字符串。
requirearray = `views` 属性值应是数组。
requireidstring = `{0}` 属性值应是字符串，且只能包含字母、数字、下划线“_”和短横线“-”。
requirestring = `{0}` 属性值应是字符串。
showViewlet = 显示“{0}”
test = 测试
view = 视图
viewcontainer requirearray = `viewsContainers` 属性值应是数组。
views.container.activitybar = 在侧边栏中添加面板
views.contributed = 在自定义面板中添加子面板
views.debug = 在“调试”面板中添加子面板
views.explorer = 在“资源”面板中添加子面板
views.remote = 在活动栏中为远程容器提供视图。要为此容器提供帮助，需要启用“enableProposedApi”。
views.scm = 在“版本”面板中添加子面板
views.test = 在“测试”面板中添加子面板
vscode.extension.contributes.view.group = 视图中的嵌套组。
vscode.extension.contributes.view.id = 子面板的唯一标识符
vscode.extension.contributes.view.name = 显示给用户的子面板名称
vscode.extension.contributes.view.remoteName = 与此视图关联的远程类型的名称。
vscode.extension.contributes.view.when = 显示此子面板的条件
vscode.extension.contributes.views = 在编辑器中添加子面板
vscode.extension.contributes.views.containers.icon = 面板图标的路径。图标大小为 24x24，居中放置在 50x40 的区域内。图片格式不限，推荐使用 SVG
vscode.extension.contributes.views.containers.id = 面板的唯一标识符
vscode.extension.contributes.views.containers.title = 显示给用户的面板名称
vscode.extension.contributes.viewsContainers = 在编辑器中添加面板

[vs/workbench/api/common/configurationExtensionPoint]
invalid.allOf = 已弃用：请将多个配置单元作为数组传递给 `configuration` 贡献点。
invalid.properties = `configuration.properties` 属性值应是对象。
invalid.property = `configuration.property` 属性值应是字符串。
invalid.title = `configuration.title` 属性值应是字符串。
scope.application.description = 应用程序特定的配置, 只能在本地用户设置中配置。
scope.deprecationMessage = 设置后，该属性将被标记为已弃用，并将给定的消息显示为解释。
scope.description = 配置适用的范围。可用范围有 `"application"`、`"machine"`、`"window"`和 `"resource"`。
scope.enumDescriptions = 枚举值的说明。
scope.machine-overridable.description = 也可在工作区或文件夹设置中配置的计算机配置。
scope.machine.description = 特定于计算机的配置, 只能在本地和远程用户设置中配置。
scope.markdownDescription = Markdown 格式的说明。
scope.markdownEnumDescription = Markdown 格式的枚举值说明。
scope.resource.description = 特定于资源的配置，可在用户设置、工作区设置或文件夹设置中配置。
scope.window.description = 特定于窗口的配置，可在用户设置或工作区设置中配置。
unknownWorkspaceProperty = 未知的工作区配置属性。
vscode.extension.contributes.configuration = 用于配置字符串。
vscode.extension.contributes.configuration.properties = 配置属性的描述。
vscode.extension.contributes.configuration.title = 设置摘要。此标签将在设置文件中用作分隔注释。
vscode.extension.contributes.defaultConfiguration = 按语言提供默认编辑器配置设置。
workspaceConfig.extensions.description = 工作区扩展。
workspaceConfig.folders.description = 将载入到工作区的文件夹列表。
workspaceConfig.launch.description = 工作区启动配置。
workspaceConfig.name.description = 文件夹的可选名称。
workspaceConfig.path.description = 文件路径。相对路径应相对于工作区根目录。
workspaceConfig.settings.description = 工作区设置。
workspaceConfig.tasks.description = 工作区任务配置。
workspaceConfig.uri.description = 文件夹的 URI。

[vs/workbench/api/common/extHost.api.impl]
extensionLabel = {0} (扩展)

[vs/workbench/api/common/extHostDiagnostics]
limitHit = 还有 {0} 个问题。

[vs/workbench/api/common/extHostExtensionActivator]
activationError = 激活扩展“{0}”出错：{1}。
failedDep1 = 未能激活扩展“{0}”，因为它依赖于未能激活的扩展“{1}”。

[vs/workbench/api/common/extHostExtensionService]
extensionTestError = 路径 {0} 未指向有效的扩展测试运行程序。

[vs/workbench/api/common/extHostProgress]
extensionSource = {0}（扩展）

[vs/workbench/api/common/extHostStatusBar]
status.extensionMessage = 扩展状态

[vs/workbench/api/common/extHostTreeViews]
treeView.duplicateElement = 标识符为 {0} 的元素已被注册。
treeView.notRegistered = 没有标识符为 {0} 的树视图。

[vs/workbench/api/common/extHostWorkspace]
updateerror = 扩展“{0}”未能更新工作区文件夹：{1}

[vs/workbench/api/common/jsonValidationExtensionPoint]
contributes.jsonValidation = 提供 JSON Schema。
contributes.jsonValidation.fileMatch = 要匹配的 JSON 文件的模式，如 `"package.json"` 或 `"*.launch"`。
contributes.jsonValidation.url = JSON Schema 文件的位置。可为使用 `http:` 或 `https:` 协议的 URL，或相对于扩展所在文件夹的相对路径。
invalid.fileMatch = `configuration.jsonValidation.fileMatch` 属性不能省略。
invalid.jsonValidation = `configuration.jsonValidation` 属性值应是数组。
invalid.path.1 = `contributes.{0}.url` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
invalid.url = `configuration.jsonValidation.url` 属性值应是 URL 或相对路径。
invalid.url.fileschema = `configuration.jsonValidation.url` 属性值是无效的相对 URL：{0}。
invalid.url.schema = `configuration.jsonValidation.url` 属性值必须以 `http:`，`https:` 或 `./` 开头。

[vs/workbench/api/common/menusExtensionPoint]
comment.actions = 提供的“评论”面板上下文菜单，显示为“评论”编辑器中的按钮。
comment.title = 提供的“评论”面板上下文菜单
commentThread.actions = 提供的评论条目上下文菜单，显示为“评论”编辑器中的按钮。
commentThread.title = 提供的评论条目上下文菜单
dup = 命令 `{0}` 在 `commands` 部分重复出现。
dupe.command = 菜单项引用的命令中默认和替代命令相同
menuId.invalid = `{0}` 不是有效的菜单标识符
menus.commandPalette = 命令栏
menus.debugCallstackContext = 调试调用堆栈上下文菜单
menus.editorContext = 编辑器上下文菜单
menus.editorTabContext = 编辑器选项卡上下文菜单
menus.editorTitle = 编辑器标题菜单
menus.explorerContext = “资源”面板上下文菜单
menus.resourceGroupContext = 源代码管理资源组上下文菜单
menus.resourceStateContext = 源代码管理资源状态上下文菜单
menus.scmSourceControl = 源代码管理菜单
menus.scmTitle = 源代码管理标题菜单
menus.touchBar = 触控栏（macOS）
missing.altCommand = 菜单项引用的替代命令 `{0}` 未在 `commands` 部分定义。
missing.command = 菜单项引用的命令 `{0}` 未在 `commands` 部分定义。
nonempty = 应为非空值。
opticon = `icon` 属性值（可省略）应是字符串, 如 `{dark, light}`。
optstring = `{0}` 属性值（可省略）应是字符串。
proposedAPI.invalid = {0} 是建议的菜单标识符, 仅在开发用完或使用以下命令行开关时可用：`--enable-proposed-api {1}`。
requireStringOrObject = `{0}` 属性值（不可省略）应是字符串或对象。
requirearray = 菜单项应是数组。
requirestring = `{0}` 属性值（不可省略）应是字符串。
requirestrings = `{0}` 和 `{1}` 属性值（不可省略）应是字符串。
view.itemContext = 提供的视图中的项目的上下文菜单。
view.viewTitle = 提供的视图的标题菜单。
vscode.extension.contributes.commandType.category = （可选）类别字符串，命令在界面中根据此项分组。
vscode.extension.contributes.commandType.command = 要执行的命令的标识符。
vscode.extension.contributes.commandType.icon = （可选）在界面中显示的命令图标，可为文件路径或主题配置。
vscode.extension.contributes.commandType.icon.dark = 使用暗主题时的图标路径。
vscode.extension.contributes.commandType.icon.light = 使用浅色主题时的图标路径。
vscode.extension.contributes.commandType.precondition = （可选）使命令可用的条件。
vscode.extension.contributes.commandType.title = 显示给用户的命令标题。
vscode.extension.contributes.commands = 对命令栏提供命令。
vscode.extension.contributes.menuItem.alt = 要执行的替代命令的标识符。该命令必须定义在 `commands` 部分中。
vscode.extension.contributes.menuItem.command = 要执行的命令的标识符。该命令必须定义在 `commands` 部分中。
vscode.extension.contributes.menuItem.group = 此命令所属的组。
vscode.extension.contributes.menuItem.when = 显示此项目的条件。
vscode.extension.contributes.menus = 向编辑器提供菜单项。

[vs/workbench/api/node/extHostDebugService]
debug.terminal.title = 调试对象

[vs/workbench/api/node/extHostLogService]
extension host Log = 扩展宿主
remote extension host Log = 远程扩展宿主

[vs/workbench/browser/actions/developerActions]
developer = 开发者
inspect context keys = 检查上下文键值
logStorage = 日志存储数据库内容
screencastMode.location.verticalPosition = 投屏模式叠加的垂直偏移，从底部作为工作台高度的百分比。
screencastMode.onlyKeyboardShortcuts = 仅在投屏模式下显示键盘快捷键。
screencastModeConfigurationTitle = 投屏模式
toggle screencast mode = 打开或关闭投屏模式

[vs/workbench/browser/actions/helpActions]
help = 帮助
keybindingsReference = 快捷键参考
miDocumentation = 文档(&&D)
miIntroductoryVideos = 介绍性视频(&&V)
miKeyboardShortcuts = 快捷键参考(&&K)
miLicense = 查看许可证(&&V)
miPrivacyStatement = 隐私声明(&&Y)
miReleaseNotes = 发行说明(&&R)
miTipsAndTricks = 提示和技巧(&&C)
miTwitter = 查看官方 Twitter 账户(&&J)
miUserVoice = 搜索功能请求(&&S)
newsletterSignup = 订阅 VS Code 资讯邮件
openDocumentationUrl = 文档
openIntroductoryVideosUrl = 入门视频
openLicenseUrl = 查看许可证
openPrivacyStatement = 隐私声明
openTipsAndTricksUrl = 提示与技巧
openTwitterUrl = 查看官方 Twitter 账户
openUserVoiceUrl = 搜索功能请求

[vs/workbench/browser/actions/layoutActions]
decreaseViewSize = 减小当前视图大小
flipLayout = 切换垂直或水平编辑器布局
increaseViewSize = 增加当前视图大小
miAppearance = 外观(&&A)
miMoveSidebarLeft = 使侧边栏靠左(&&M)
miMoveSidebarRight = 使侧边栏靠右(&&M)
miShowActivityBar = 显示活动栏(&&A)
miShowEditorArea = 显示编辑区域
miShowMenuBar = 显示菜单栏(&&B)
miShowSidebar = 显示侧边栏(&&S)
miShowStatusbar = 显示状态栏(&&T)
miToggleCenteredLayout = 切换居中布局
miToggleEditorLayout = 翻转布局(&&L)
miToggleZenMode = 切换禅模式
moveSidebarLeft = 使侧边栏靠左
moveSidebarRight = 使侧边栏靠右
toggleActivityBar = 显示或隐藏活动栏
toggleCenteredLayout = 切换居中布局
toggleEditor = 显示或隐藏编辑器区域
toggleMenuBar = 显示或隐藏菜单栏
toggleSidebar = 显示或隐藏侧边栏
toggleSidebarPosition = 使侧边栏靠左或靠右
toggleStatusbar = 显示或隐藏状态栏
toggleTabs = 显示或隐藏标签栏
toggleZenMode = 切换禅模式
view = 视图

[vs/workbench/browser/actions/navigationActions]
navigateDown = 导航到下方视图
navigateLeft = 导航到左侧视图
navigateRight = 导航到右侧视图
navigateUp = 导航到上方视图
view = 视图

[vs/workbench/browser/actions/textInputActions]
copy = 拷贝
cut = 剪切
paste = 粘贴
redo = 重做
selectAll = 全选
undo = 撤消

[vs/workbench/browser/actions/windowActions]
about = 关于
developer = 开发者
file = 文件
files = 文件
help = 帮助
miAbout = 关于(&&A)
miMore = 更多(&&M)…
miNewWindow = 新建窗口(&&W)
miOpenRecent = 打开最近的文件(&&R)
miToggleFullScreen = 切换全屏(&&F)
newWindow = 新建窗口
openRecent = 打开最近的文件…
openRecentPlaceHolder = 选择并打开（按住 Ctrl 键在新窗口中打开）
openRecentPlaceHolderMac = 选择并打开（按住 Command 键在新窗口中打开）
quickOpenRecent = 快速打开最近的文件…
reloadWindow = 重新加载窗口
remove = 从最近打开中删除
toggleFullScreen = 切换全屏
view = 视图
workspaces = 工作区

[vs/workbench/browser/actions/workspaceActions]
closeWorkspace = 关闭工作区
duplicateWorkspaceInNewWindow = 在新窗口中复制工作区
globalRemoveFolderFromWorkspace = 将文件夹从工作区移除…
miAddFolderToWorkspace = 将文件夹添加到工作区(&&D)…
miCloseFolder = 关闭文件夹(&&F)
miCloseWorkspace = 关闭工作区(&&W)
miSaveWorkspaceAs = 将工作区保存为…
noWorkspaceOpened = 没有打开工作区。
openFile = 打开文件…
openFileFolder = 打开…
openFolder = 打开文件夹…
openWorkspaceAction = 打开工作区…
openWorkspaceConfigFile = 打开工作区配置文件
saveWorkspaceAsAction = 将工作区保存为…
workspaces = 工作区

[vs/workbench/browser/actions/workspaceCommands]
add = 添加(&&A)
addFolderToWorkspace = 将文件夹添加到工作区…
addFolderToWorkspaceTitle = 将文件夹添加到工作区
workspaceFolderPickerPlaceholder = 选择工作区文件夹

[vs/workbench/browser/parts/activitybar/activitybarActions]
nextSideBarView = 下一个侧边栏面板
previousSideBarView = 上一个侧边栏面板
view = 视图

[vs/workbench/browser/parts/activitybar/activitybarPart]
hideActivitBar = 隐藏活动栏
hideMenu = 隐藏菜单
manage = 管理
showMenu = 显示菜单

[vs/workbench/browser/parts/compositeBar]
activityBarAriaLabel = 选择活动视图

[vs/workbench/browser/parts/compositeBarActions]
additionalViews = 其他视图
badgeTitle = {0} - {1}
compositeActive = {0}，活动
hide = 隐藏
keep = 保留
manageExtension = 管理扩展
numberBadge = {0}（{1}）
titleKeybinding = {0}（{1}）
toggle = 将视图固定或取消固定

[vs/workbench/browser/parts/compositePart]
ariaCompositeToolbarLabel = {0}操作
titleTooltip = {0}（{1}）

[vs/workbench/browser/parts/editor/binaryDiffEditor]
metadataDiff = {0} ↔ {1}

[vs/workbench/browser/parts/editor/binaryEditor]
binaryEditor = 二重编辑器

[vs/workbench/browser/parts/editor/breadcrumbs]
enabled = 启用面包屑。
filepath = 是否在面包屑中显示文件路径。
filepath.last = 仅显示文件名。
filepath.off = 不显示文件路径。
filepath.on = 显示相对于工作区根目录的文件路径。
filteredTypes.array = 显示数组。
filteredTypes.boolean = 显示布尔。
filteredTypes.class = 显示类。
filteredTypes.constant = 显示常量。
filteredTypes.constructor = 显示构造函数。
filteredTypes.enum = 显示枚举。
filteredTypes.enumMember = 显示枚举成员。
filteredTypes.event = 显示事件。
filteredTypes.field = 显示字段。
filteredTypes.file = 显示文件。
filteredTypes.function = 显示函数。
filteredTypes.interface = 显示接口。
filteredTypes.key = 显示键。
filteredTypes.method = 显示方法。
filteredTypes.module = 显示模块。
filteredTypes.namespace = 显示命名空间。
filteredTypes.null = 显示 null。
filteredTypes.number = 显示数字。
filteredTypes.object = 显示对象。
filteredTypes.operator = 显示运算符。
filteredTypes.package = 显示包。
filteredTypes.property = 显示属性。
filteredTypes.string = 显示字符串。
filteredTypes.struct = 显示结构。
filteredTypes.typeParameter = 显示类型参数。
filteredTypes.variable = 显示变量。
icons = 在面包屑的项中显示图标。
symbolSortOrder = 如何在面包屑中排列文件内同一层级的符号。
symbolSortOrder.name = 按字母顺序排列。
symbolSortOrder.position = 按文件中的出现位置排列。
symbolSortOrder.type = 按符号类型排列。
symbolpath = 是否在面包屑中显示文件内的符号层级。
symbolpath.last = 仅显示当前符号。
symbolpath.off = 不显示符号。
symbolpath.on = 显示所有层级的符号。
title = 面包屑

[vs/workbench/browser/parts/editor/breadcrumbsControl]
cmd.category = 视图
cmd.focus = 聚焦到面包屑
cmd.toggle = 显示或隐藏面包屑
miShowBreadcrumbs = 显示面包屑(&&B)

[vs/workbench/browser/parts/editor/editor.contribution]
allEditorsPicker = 显示所有已打开的编辑器
binaryDiffEditor = 二重差异编辑器
close = 关闭编辑器
closeAll = 关闭全部编辑器
closeAllSaved = 关闭已保存的编辑器
closeEditorsInGroup = 关闭组中全部编辑器
closeOtherEditors = 关闭同组编辑器
closeOthers = 关闭其他编辑器
closeRight = 关闭右侧编辑器
closeRightEditors = 关闭组中右侧编辑器
closeSavedEditors = 关闭组中已保存的编辑器
file = 文件
groupOnePicker = 显示活动组中的编辑器
ignoreTrimWhitespace.label = 忽略可裁剪的空白字符
keepEditor = 保留编辑器
keepOpen = 保持打开状态
miBack = 返回(&&B)
miClearRecentOpen = 清除最近打开记录(&&C)
miEditorLayout = 编辑器布局(&&L)
miFocusAboveGroup = 上方组(&&A)
miFocusBelowGroup = 下方组(&&B)
miFocusFifthGroup = 第 5 组(&&5)
miFocusFirstGroup = 第 1 组(&&1)
miFocusFourthGroup = 第 4 组(&&4)
miFocusLeftGroup = 左侧组(&&L)
miFocusRightGroup = 右侧组(&&R)
miFocusSecondGroup = 第 2 组(&&2)
miFocusThirdGroup = 第 3 组(&&3)
miForward = 前进(&&F)
miLastEditLocation = 上次编辑位置(&&L)
miNextEditor = 下一个编辑器(&&N)
miNextEditorInGroup = 组中下一个使用过的编辑器(&&N)
miNextGroup = 下一个组(&&N)
miPreviousEditor = 上一个编辑器(&&P)
miPreviousEditorInGroup = 组中上一个使用过的编辑器(&&P)
miPreviousGroup = 上一个组(&&P)
miReopenClosedEditor = 重新打开已关闭的编辑器(&&R)
miSingleColumnEditorLayout = 单列(&&S)
miSplitEditorDown = 向下拆分(&&D)
miSplitEditorLeft = 向左拆分(&&L)
miSplitEditorRight = 向右拆分(&&R)
miSplitEditorUp = 向上拆分(&&U)
miSwitchEditor = 切换编辑器(&&E)
miSwitchGroup = 切换组(&&G)
miThreeColumnsEditorLayout = 三列(&&H)
miThreeRowsEditorLayout = 三行(&&R)
miTwoByTwoGridEditorLayout = 田字形(&&G)
miTwoColumnsBottomEditorLayout = 底部双列(&&C)
miTwoColumnsEditorLayout = 双列(&&T)
miTwoRowsEditorLayout = 双行(&&W)
miTwoRowsRightEditorLayout = 右侧双行(&&O)
navigate.next.label = 下一个更改
navigate.prev.label = 上一个更改
showOpenedEditors = 显示打开的编辑器
showTrimWhitespace.label = 显示裁剪的空白字符
sideBySideEditor = 并排编辑器
splitDown = 向下拆分
splitEditorDown = 向下拆分编辑器
splitEditorRight = 向右拆分编辑器
splitLeft = 向左拆分
splitRight = 向右拆分
splitUp = 向上拆分
textDiffEditor = 文本差异编辑器
textEditor = 文本编辑器
toggleInlineView = 使用行内视图或并排视图
view = 视图

[vs/workbench/browser/parts/editor/editorActions]
clearEditorHistory = 清除编辑器历史记录
clearRecentFiles = 清除最近打开
closeAllEditors = 关闭所有编辑器
closeAllGroups = 关闭所有编辑器组
closeEditor = 关闭编辑器
closeEditorInAllGroups = 在所有组中关闭此编辑器
closeEditorsInOtherGroups = 关闭其他组中的编辑器
closeEditorsToTheLeft = 关闭组中左侧编辑器
closeOneEditor = 关闭
editorLayoutSingle = 单列编辑器布局
editorLayoutThreeColumns = 三列编辑器布局
editorLayoutThreeRows = 三行编辑器布局
editorLayoutTwoByTwoGrid = 田字形编辑器布局
editorLayoutTwoColumns = 双列编辑器布局
editorLayoutTwoColumnsBottom = 底部双列编辑器布局
editorLayoutTwoRows = 双行编辑器布局
editorLayoutTwoRowsRight = 右侧双行编辑器布局
evenEditorGroups = 重置编辑器组大小
firstEditorInGroup = 打开组中的第一个编辑器
focusAboveGroup = 聚焦到上方编辑器组
focusActiveEditorGroup = 聚焦到活动编辑器组
focusBelowGroup = 聚焦到下方编辑器组
focusFirstEditorGroup = 聚焦到第一个编辑器组
focusLastEditorGroup = 聚焦到最终组编辑器
focusLeftGroup = 聚焦到左侧编辑器组
focusNextGroup = 聚焦到下一组编辑器
focusPreviousGroup = 聚焦到上一组编辑器
focusRightGroup = 聚焦到右侧编辑器组
joinAllGroups = 合并所有编辑器组
joinTwoGroups = 将编辑器组与下一组合并
lastEditorInGroup = 打开组中上一个编辑器
maximizeEditor = 最大化编辑器组并隐藏侧边栏
minimizeOtherEditorGroups = 最大化编辑器组
moveActiveGroupDown = 向下移动编辑器组
moveActiveGroupLeft = 向左移动编辑器组
moveActiveGroupRight = 向右移动编辑器组
moveActiveGroupUp = 向上移动编辑器组
moveEditorLeft = 向左移动编辑器
moveEditorRight = 向右移动编辑器
moveEditorToAboveGroup = 将编辑器移动到上方组
moveEditorToBelowGroup = 将编辑器移动到下方组
moveEditorToFirstGroup = 将编辑器移动到第一组
moveEditorToLastGroup = 将编辑器移动到最后一组
moveEditorToLeftGroup = 将编辑器移动到左侧组
moveEditorToNextGroup = 将编辑器移动到下一组
moveEditorToPreviousGroup = 将编辑器移动到上一组
moveEditorToRightGroup = 将编辑器移动到右侧组
navigateEditorGroups = 在编辑器组间进行导航
navigateEditorHistoryByInput = 从历史记录里打开上一个编辑器
navigateLast = 转到最后
navigateNext = 前进
navigatePrevious = 后退
navigateToLastEditLocation = 转到上一编辑位置
newEditorAbove = 在上方新建编辑器组
newEditorBelow = 在下方新建编辑器组
newEditorLeft = 在左侧新建编辑器组
newEditorRight = 在右侧新建编辑器组
nextEditorInGroup = 打开组中的下一个编辑器
openNextEditor = 打开下一个编辑器
openNextRecentlyUsedEditor = 打开下一个最近使用的编辑器
openNextRecentlyUsedEditorInGroup = 打开组中下一个最近使用的编辑器
openPreviousEditor = 打开上一个编辑器
openPreviousEditorInGroup = 打开组中上一个编辑器
openPreviousRecentlyUsedEditor = 打开上一个最近使用的编辑器
openPreviousRecentlyUsedEditorInGroup = 打开组中上一个最近使用的编辑器
openToSide = 在侧边打开
reopenClosedEditor = 重新打开已关闭的编辑器
revertAndCloseActiveEditor = 还原并关闭编辑器
showAllEditors = 显示所有编辑器
showEditorsInActiveGroup = 显示活动组中的编辑器
splitEditor = 拆分编辑器
splitEditorGroupDown = 向下拆分编辑器
splitEditorGroupLeft = 向左拆分编辑器
splitEditorGroupRight = 向右拆分编辑器
splitEditorGroupUp = 向上拆分编辑器
splitEditorOrthogonal = 田字形拆分编辑器
toggleEditorWidths = 切换编辑器组大小

[vs/workbench/browser/parts/editor/editorCommands]
compare = 比较
editorCommand.activeEditorMove.arg.description = 参数属性：\n	* `to` 表示向何处移动的字符串值。\n	* `by` 表示移动单位的字符串值（按选项卡或按组）。\n	* `value` 表示移动的位置数量或移动到的绝对位置的数字型值。
editorCommand.activeEditorMove.arg.name = 活动编辑器移动参数
editorCommand.activeEditorMove.description = 按标签或按组移动活动编辑器
toggleInlineView = 切换内联视图

[vs/workbench/browser/parts/editor/editorGroupView]
araLabelGroupActions = 编辑器组操作
cancel = 取消
closeGroupAction = 关闭
editorOpenError = 未能打开“{0}”：{1}。
editorOpenErrorDialog = 未能打开“{0}”
emptyEditorGroup = {0}（空）
groupLabel = 第 {0} 组
ok = 确定

[vs/workbench/browser/parts/editor/editorPicker]
entryAriaLabel = {0}, 编辑器组选取器
noOpenedEditors = 已打开的编辑器组列表当前为空
noOpenedEditorsAllGroups = 已打开的编辑器列表当前为空
noResultsFound = 没有匹配的已打开编辑器
noResultsFoundInGroup = 未在组中找到匹配的已打开编辑器

[vs/workbench/browser/parts/editor/editorStatus]
autoDetect = 自动检测
changeEncoding = 更改文件编码
changeEndOfLine = 更改换行符
changeMode = 更改语言模式
configureAssociationsExt = “{0}”的配置文件关联…
configureModeSettings = 配置“{0}”语言基础设置…
currentAssociation = 当前关联
disableTabMode = 禁用辅助功能模式
endOfLineCarriageReturnLineFeed = CRLF
endOfLineLineFeed = LF
fileInfo = 文件信息
gotoLine = 转到行
guessedEncoding = 通过内容猜测
indentConvert = 转换文件
indentView = 更改视图
languageDescription = （{0}）- 已配置的语言
languageDescriptionConfigured = （{0}）
languagesPicks = 语言（标识符）
multiSelection = {0} 个选区
multiSelectionRange = {0} 个选区（选中 {1} 个字符）
noEditor = 此时没有活动的文本编辑器
noFileEditor = 此时无活动文件
noWritableCodeEditor = 活动代码编辑器为只读模式。
pickAction = 选择操作
pickEncodingForReopen = 选择文件编码以重新打开文件
pickEncodingForSave = 选择用于保存的文件编码
pickEndOfLine = 选择换行符
pickLanguage = 选择语言模式
pickLanguageToConfigure = 选择要与“{0}”关联的语言模式
reopenWithEncoding = 通过编码重新打开
saveWithEncoding = 通过编码保存
screenReaderDetected = 已为屏幕阅读器优化
screenReaderDetectedExplanation.answerNo = 否
screenReaderDetectedExplanation.answerYes = 是
screenReaderDetectedExplanation.question = 是否在通过屏幕阅读器使用 VS Code？（使用屏幕阅读器时，折叠、小地图和自动换行等功能会被禁用。）
screenReaderDetectedExtra = 如果没有使用屏幕阅读器，请将 `editor.accessibilitySupport` 设置改为 `"off"`。
selectEOL = 选择换行符
selectEncoding = 选择编码
selectIndentation = 选择缩进
selectLanguageMode = 选择语言模式
showLanguageExtensions = 搜索“{0}”的应用市场扩展…
singleSelection = 行 {0}，列 {1}
singleSelectionRange = 行 {0}，列 {1}（选中 {2} 个字符）
spacesSize = 空格：{0}
status.editor.encoding = 编辑器编码
status.editor.eol = 编辑器换行符
status.editor.indentation = 编辑器缩进
status.editor.info = 文件信息
status.editor.mode = 编辑器语言模式
status.editor.screenReaderMode = 屏幕阅读器模式
status.editor.selection = 编辑器选区
status.editor.tabFocusMode = 辅助功能模式
tabFocusModeEnabled = 按 Tab 键移动焦点
tabSize = 制表符长度：{0}

[vs/workbench/browser/parts/editor/editorWidgets]
openWorkspace = 打开工作区

[vs/workbench/browser/parts/editor/resourceViewer]
nativeBinaryError = 此文件是二进制文件或使用了不支持的文本编码，未能在编辑器中显示。
nativeFileTooLargeError = 文件太大，未能在编辑器中显示（{0}）
openAsText = 是否仍要打开？
sizeB = {0} B
sizeGB = {0} GB
sizeKB = {0} KB
sizeMB = {0} MB
sizeTB = {0} TB

[vs/workbench/browser/parts/editor/tabsTitleControl]
araLabelTabActions = 选项卡操作

[vs/workbench/browser/parts/editor/textDiffEditor]
editableEditorAriaLabel = 文本文件比较编辑器。
editableEditorWithInputAriaLabel = {0}。文本文件比较编辑器。
readonlyEditorAriaLabel = 只读文本比较编辑器。
readonlyEditorWithInputAriaLabel = {0}。只读文本比较编辑器。
textDiffEditor = 文本差异编辑器

[vs/workbench/browser/parts/editor/textEditor]
editorLabelWithGroup = {0}，{1}。

[vs/workbench/browser/parts/editor/textResourceEditor]
readonlyEditorAriaLabel = 只读文本编辑器。
readonlyEditorWithInputAriaLabel = {0}。只读文本编辑器。
textEditor = 文本编辑器
untitledFileEditorAriaLabel = 无标题文件文本编辑器。
untitledFileEditorWithInputAriaLabel = {0}。无标题文件文本编辑器。

[vs/workbench/browser/parts/editor/titleControl]
araLabelEditorActions = 编辑器操作
draggedEditorGroup = {0}（+{1}）

[vs/workbench/browser/parts/notifications/notificationsActions]
clearNotification = 清除通知
clearNotifications = 清除所有通知
collapseNotification = 折叠通知
configureNotification = 配置通知
copyNotification = 拷贝文本
expandNotification = 展开通知
hideNotificationsCenter = 隐藏通知

[vs/workbench/browser/parts/notifications/notificationsAlerts]
alertErrorMessage = 错误：{0}
alertInfoMessage = 信息：{0}
alertWarningMessage = 警告：{0}

[vs/workbench/browser/parts/notifications/notificationsCenter]
notifications = 通知
notificationsEmpty = 无新通知
notificationsList = 通知列表
notificationsToolbar = 通知中心操作

[vs/workbench/browser/parts/notifications/notificationsCommands]
clearAllNotifications = 清除所有通知
hideNotifications = 隐藏通知
notifications = 通知
showNotifications = 显示通知

[vs/workbench/browser/parts/notifications/notificationsStatus]
hideNotifications = 隐藏通知
noNotifications = 无新通知
notifications = {0} 条新通知
oneNotification = 1 条新通知
status.message = 状态消息
status.notifications = 通知
zeroNotifications = 没有通知

[vs/workbench/browser/parts/notifications/notificationsToasts]
notificationsToast = 通知横幅

[vs/workbench/browser/parts/notifications/notificationsViewer]
notificationActions = 通知操作
notificationSource = 来源：{0}

[vs/workbench/browser/parts/panel/panelActions]
closePanel = 关闭底边栏
focusPanel = 聚焦到底边栏
maximizePanel = 最大化底边栏
miShowPanel = 显示底边栏(&&P)
minimizePanel = 取消最大化底边栏
moveToBottom = 使底边栏靠下
moveToRight = 使底边栏靠右
nextPanelView = 下一个底边栏面板
previousPanelView = 上一个底边栏面板
toggleMaximizedPanel = 使底边栏最大化或取消最大化
togglePanel = 显示或隐藏底边栏
toggledPanelPosition = 使底边栏靠下或靠右
view = 视图

[vs/workbench/browser/parts/panel/panelPart]
hidePanel = 隐藏底边栏

[vs/workbench/browser/parts/quickinput/quickInput]
back = 上一步
custom = 自定义
inputModeEntry = 按 Enter 键确认，按 Esc 键取消
inputModeEntryDescription = {0}（按 Enter 键确认，按 Esc 键取消）
ok = 好
quickInput.back = 上一步
quickInput.backWithKeybinding = 后退（{0}）
quickInput.countSelected = 已选 {0} 项
quickInput.steps = {0}/{1}
quickInput.visibleCount = {0} 个结果
quickInputBox.ariaLabel = 在此输入可缩小结果范围。

[vs/workbench/browser/parts/quickopen/quickOpenController]
canNotRunPlaceholder = 在当前上下文中未能使用此“快速打开”处理程序
entryAriaLabel = {0}，最近打开
historyMatches = 最近打开
noResultsFound1 = 没有结果
pickHistory = 选择要从历史记录中删除的编辑器项
quickOpenInput = 键入“?”从此处获取有关可进行的操作的帮助
removeFromEditorHistory = 从历史记录中删除

[vs/workbench/browser/parts/quickopen/quickopen]
quickNavigateNext = 在“快速打开”中导航到下一个
quickNavigatePrevious = 在“快速打开”中导航到上一个
quickOpen = 转到文件…
quickSelectNext = 在“快速打开”中选择“下一步”
quickSelectPrevious = 在“快速打开”中选择“上一步”

[vs/workbench/browser/parts/sidebar/sidebarPart]
focusSideBar = 聚焦到侧边栏
viewCategory = 视图

[vs/workbench/browser/parts/statusbar/statusbarPart]
hide = 隐藏
hideStatusBar = 隐藏状态栏

[vs/workbench/browser/parts/titlebar/menubarControl]
DownloadingUpdate = 正在下载更新…
checkForUpdates = 检查更新(&&U)…
checkingForUpdates = 正在检查更新…
download now = 立即下载(&&O)
goToSetting = 打开设置
installUpdate... = 安装更新(&&U)…
installingUpdate = 正在安装更新…
mDebug = 调试(&&D)
mEdit = 编辑(&&E)
mFile = 文件(&&F)
mGoto = 转到(&&G)
mHelp = 帮助(&&H)
mSelection = 选择(&&S)
mTerminal = 终端(&&T)
mView = 查看(&&V)
menubar.customTitlebarAccessibilityNotification = 为您启用了辅助功能支持。对于最易于访问的体验, 我们建议使用自定义标题栏样式。
restartToUpdate = 重新启动以更新(&&U)

[vs/workbench/browser/parts/titlebar/titlebarPart]
devExtensionWindowTitlePrefix = [扩展开发宿主]
patchedWindowTitle = [不受支持]
userIsAdmin = [管理员]
userIsSudo = [超级用户]

[vs/workbench/browser/parts/views/customView]
collapseAll = 全部折叠
command-error = 运行命令 {1} 错误：{0}。这可能是由提交 {1} 的扩展引起的。
no-dataprovider = 当前没有可提供视图数据的提供来源进行注册。

[vs/workbench/browser/parts/views/panelViewlet]
viewToolbarAriaLabel = {0}操作

[vs/workbench/browser/parts/views/views]
focus view = 聚焦到“{0}”视图
view category = 视图

[vs/workbench/browser/parts/views/viewsViewlet]
hideView = 隐藏

[vs/workbench/browser/quickopen]
noResultsFound2 = 没有结果
noResultsMatching = 没有匹配的结果

[vs/workbench/browser/viewlet]
collapse = 全部折叠
compositePart.hideSideBarLabel = 隐藏侧边栏

[vs/workbench/browser/workbench]
loaderErrorNative = 未能加载所需文件。请重启应用程序重试。详细信息：{0}

[vs/workbench/browser/workbench.contribution]
activeEditorLong = “${activeEditorLong}”：文件的绝对路径。
activeEditorMedium = “${activeEditorMedium}”：相对于工作区文件夹的文件路径。
activeEditorShort = “${activeEditorShort}”：文件名。
activeFolderLong = “${activeFolderLong}”：文件所在文件夹的绝对路径。
activeFolderMedium = “${activeFolderMedium}”：相对于工作区文件夹的、包含文件的文件夹的路径。
activeFolderShort = “${activeFolderShort}”：文件所在的文件夹名称。
activityBarVisibility = 显示工作台活动栏。
appName = “${appName}”：应用程序名称，如 `"VS Code"`。
centeredLayoutAutoResize = 如果在居中布局中打开了超过一组编辑器，是否自动将宽度调整为最大宽度值。当回到只打开了一组编辑器的状态，将自动将宽度调整为原始的居中宽度值。
closeEmptyGroups = 编辑器组中最后一个选项卡关闭时这个空组的行为。若启用，将自动关闭空组。若禁用，空组仍将保留在网格布局中。
closeOnFileDelete = 当文件被其他进程删除或重命名时，是否自动关闭在这个期间内打开了此文件的编辑器。若禁用此项，在这种情况下将保留编辑器。若从应用内部进行删除，将始终关闭编辑器，并且为了保护您的数据，已更新文件始终不会关闭。
closeOnFocusLost = “快速打开”是否在其失去焦点时自动关闭。
commandHistory = 命令栏中保留最近使用命令的数量。设置为 `0` 表示禁用命令历史功能。
customMenuBarAltFocus = 按 Alt 键时聚焦到菜单栏。此设置不影响使用 Alt 键切换菜单栏。
dirty = “${dirty}”：表示活动编辑器为脏的脏指示器。
editorOpenPositioning = 编辑器打开的位置。选择 `"left"` 或 `"right"` 可分别在当前活动编辑器的左侧或右侧打开。选择 `first`（最前）或 `last`（最后）打开的位置与当前活动编辑器无关。
editorTabCloseButton = 是否显示选项卡中的关闭按钮。
enableMenuBarMnemonics = 使用 Alt 键打开主菜单。若禁用快捷键，这些 Alt 快捷键将能绑定到编辑器命令。
enableNaturalLanguageSettingsSearch = 是否在设置中启用自然语言搜索。自然语言搜索由微软在线服务提供。
enablePreview = 打开的编辑器是否为预览编辑器。预览编辑器在被固定（例如，通过双击或编辑）前可重用，其字体样式为斜体。
enablePreviewFromQuickOpen = 从“快速打开”打开的编辑器是否为预览编辑器。预览编辑器在被固定（例如，通过双击或编辑）前可重用。
focusRecentEditorAfterClose = 是否按最常使用的顺序或从左到右的顺序关闭选项卡。
folderName = “${folderName}”：文件所在工作区文件夹的名称。
folderPath = “${folderpath}”：文件所在工作区文件夹的绝对路径。
fontAliasing = 如何在窗口中渲染字体。
highlightModifiedTabs = 绘制已修改（存在更新）的编辑器选项卡的顶部边框。
menuBarVisibility = 显示菜单栏。`"toggle"` 表示隐藏菜单栏，按一次 Alt 键则将显示此菜单栏。默认情况下，除非窗口为全屏，否则菜单栏可见。
mouseBackForwardToNavigate = 使用鼠标上的 4 号和 5 号按钮（如果有）在打开的编辑器之间导航。
openDefaultKeybindings = 在打开快捷键设置时同时打开显示所有默认快捷键的编辑器。
openDefaultSettings = 在打开设置时同时打开显示所有默认设置的编辑器。
openFoldersInNewWindow = 是否在新窗口中打开文件。\n此设置可能会被忽略，如在使用 `--new-window` 或 `--reuse-window` 命令行选项时。
panelDefaultLocation = 底边栏的默认位置。可显示在工作台的底部或右侧。
preserveInput = 当再次打开命令栏时，是否恢复上一次输入的内容。
remoteName = “${remoteName}”，如 `"SSH"`。
restoreViewState = 在重新打开已关闭文件时，还原最后一个视图的状态（如滚动位置）
revealIfOpen = 是否在打开的任何可见组中显示编辑器。如果禁用，编辑器将优先在当前活动的编辑器组中打开。如果启用，将会显示在已打开的编辑器，而不是在当前活动的编辑器组中再次打开。请有些情况下会忽略此设置，例如，强制编辑器在特定组中打开或当前活动组的一侧时。
rootName = “${rootName}”：工作区文件夹的名称。
rootPath = “${rootPath}”：工作区文件夹的绝对路径。
separator = “${separator}”：一种条件分隔符（`-`），仅在被包含值或静态文本的变量包围时显示。
settings.editor.desc = 默认使用的设置编辑器。
settings.editor.json = JSON 设置编辑器。
settings.editor.ui = 可视化设置编辑器。
settingsSearchTocBehavior = 设置编辑器的目录在搜索时的行为。
settingsSearchTocBehavior.filter = 筛选目录为仅显示含有匹配设置的类别。点击一个类别将仅显示该类别的结果。
settingsSearchTocBehavior.hide = 在搜索时隐藏目录。
showEditorTabs = 打开的编辑器是否显示在选项卡中。
showIcons = 是否在编辑器选项卡中显示图标。要求同时启用图标主题。
sideBarLocation = 边栏的位置。它可显示在工作台的左侧或右侧。
sideBySideDirection = 编辑器在并排打开时出现的默认位置。默认在当前活动编辑器右侧打开。若更改为 `"down"`，则在当前活动编辑器下方打开。
splitSizing = 拆分编辑器组时编辑器组的大小。
statusBarVisibility = 工作台底部状态栏的可见性。
tabDescription = 编辑器标签的格式。
tabSizing = 编辑器选项卡的大小。
useSplitJSON = 在将设置编辑为 JSON 时是否使用拆分 JSON 编辑器。
viewVisibility = 是否显示视图头部的操作项。视图头部操作项可以一直，或是仅当聚焦到和悬停在视图上时显示。
window.menuBarVisibility.compact = 菜单在侧边栏中显示为一个紧凑的按钮。
window.menuBarVisibility.default = 在全屏模式下隐藏菜单。
window.menuBarVisibility.hidden = 始终隐藏菜单。
window.menuBarVisibility.toggle = 按 Alt 键时显示菜单。
window.menuBarVisibility.visible = 始终显示菜单。
window.openFoldersInNewWindow.default = 使用“文件”菜单时，在现有的窗口中打开文件夹；从外部打开时，在新窗口中打开文件夹。
window.openFoldersInNewWindow.off = 在现有的窗口中打开文件夹。
window.openFoldersInNewWindow.on = 始终在新窗口中打开文件夹。
windowConfigurationTitle = 窗口
windowTitle = 窗口标题。变量可根据上下文替换：
workbench.editor.labelFormat.default = 显示文件名。当启用选项卡且在同一组内有两个相同名称的文件时，将添加每个文件路径中可以用于区分的部分。在选项卡被禁用且编辑器活动时，将显示相对于工作区文件夹的路径。
workbench.editor.labelFormat.long = 在文件的绝对路径之后显示文件名。
workbench.editor.labelFormat.medium = 在文件相对当前工作区文件夹的路径之后显示文件名。
workbench.editor.labelFormat.short = 在文件的目录名之后显示文件名。
workbench.editor.splitSizingDistribute = 将所有编辑器组拆分为相等的部分。
workbench.editor.splitSizingSplit = 将活动编辑器组拆分为相等的部分。
workbench.editor.tabSizing.fit = 始终将标签页保持足够大，能够完全显示编辑器标签。
workbench.editor.tabSizing.shrink = 在不能同时显示所有选项卡时，允许选项卡缩小。
workbench.enableExperiments = 从微软在线服务中获取要进行的实验。
workbench.fontAliasing.antialiased = 像素级字体平滑，可能会导致字体整体显示得更细。
workbench.fontAliasing.auto = 根据显示器 DPI 自动应用 `"default"` 或 `"antialiased"` 选项。
workbench.fontAliasing.default = 次像素级字体平滑，在大多数非高清显示器上显示最清晰的文字。
workbench.fontAliasing.none = 禁用字体平滑，显示边缘粗糙、有锯齿的文字。
workbench.quickOpen.preserveInput = 在打开“快速打开”视图时，是否自动恢复上一次输入的值。
workbenchConfigurationTitle = 工作台
zenMode.centerLayout = 在打开禅模式时是否启用居中布局。
zenMode.fullScreen = 在打开禅模式时是否将工作台切换到全屏。
zenMode.hideActivityBar = 在打开禅模式时是否隐藏工作台左侧的活动栏。
zenMode.hideLineNumbers = 在打开禅模式时是否隐藏编辑器行号。
zenMode.hideStatusBar = 在打开禅模式时是否隐藏工作台底部的状态栏。
zenMode.hideTabs = 在打开禅模式时是否隐藏工作台选项卡。
zenMode.restore = 若窗口在处于禅模式时退出，其在恢复时是否还原到禅模式。
zenMode.silentNotifications = 在禅模式下隐藏一般通知。错误通知不受影响。
zenModeConfigurationTitle = 禅模式

[vs/workbench/common/notifications]
executeCommand = 点击以执行命令“{0}”

[vs/workbench/common/theme]
activityBarActiveBackground = 活动项的活动栏背景色。
activityBarActiveBorder = 活动项的活动栏边框颜色。
activityBarBackground = 活动栏背景色。
activityBarBadgeBackground = 活动通知徽章背景色。
activityBarBadgeForeground = 活动通知徽章前景色。
activityBarBorder = 活动栏分隔侧边栏的边框颜色。
activityBarDragAndDropBackground = 活动栏项在被拖放时的反馈颜色。应有透明度。
activityBarForeground = 活动栏项在活动时的前景色。
activityBarInActiveForeground = 活动栏项在非活动时的前景色。
deprecatedEditorGroupBackground = 已弃用：请改用 `editorGroup.emptyBackground`。
editorDragAndDropBackground = 拖动编辑器时的背景色。应有透明度。
editorGroupBackground = 编辑器组的背景色。（已弃用）
editorGroupBorder = 将多个编辑器组彼此分隔开的颜色。
editorGroupEmptyBackground = 空编辑器组的背景色。
editorGroupFocusedEmptyBorder = 空编辑器组获得焦点时的边框颜色。
editorGroupHeaderBackground = 禁用选项卡（`workbench.editor.showTabs` 设置为 `false`）时编辑器组标题颜色。
editorPaneBackground = 居中编辑器布局中左侧与右侧编辑器窗格的背景色。
extensionBadge.remoteBackground = 扩展视图中远程徽章的背景色。
extensionBadge.remoteForeground = 扩展视图中远程徽章的前景色。
imagePreviewBorder = 图像预览中图像的边框颜色。
menubarSelectionBackground = 菜单栏中选定菜单项的背景色。
menubarSelectionBorder = 菜单栏中所选菜单项的边框颜色。
menubarSelectionForeground = 菜单栏中选定菜单项的前景色。
notificationCenterBorder = 通知中心的边框颜色。
notificationCenterHeaderBackground = 通知中心头部的背景色。
notificationCenterHeaderForeground = 通知中心头部的前景色。
notificationToastBorder = 通知横幅的边框颜色。
notificationsBackground = 通知的背景色。
notificationsBorder = 通知中心中分隔通知的边框颜色。
notificationsErrorIconForeground = 用于错误通知图标的颜色。
notificationsForeground = 通知的前景色。
notificationsInfoIconForeground = 用于信息通知图标的颜色。
notificationsLink = 通知链接的前景色。
notificationsWarningIconForeground = 用于警告通知图标的颜色。
panelActiveTitleBorder = 活动面板标题的边框颜色。
panelActiveTitleForeground = 活动面板的标题的颜色。
panelBackground = 面板的背景色。
panelBorder = 将面板与编辑器隔开的边框颜色。
panelDragAndDropBackground = 面板标题项在拖放时的反馈颜色。应有透明度。
panelInactiveTitleForeground = 非活动面板的标题的颜色。
panelInputBorder = 用于面板中输入内容的输入框的边框颜色。
quickInputBackground = 快速输入的背景色。
quickInputForeground = 快速输入的前景色。
sideBarBackground = 侧边栏的背景色。
sideBarBorder = 侧边栏分隔编辑器的边框颜色。
sideBarDragAndDropBackground = 侧边栏中的部分在拖放时的反馈颜色。应有透明度。
sideBarForeground = 侧边栏的前景色。
sideBarSectionHeaderBackground = 侧边栏节标题的背景色。
sideBarSectionHeaderBorder = 侧边栏节标题的边框颜色。
sideBarSectionHeaderForeground = 侧边栏节标题的前景色。
sideBarTitleForeground = 侧边栏标题的前景色。
statusBarBackground = 工作区打开时状态栏的背景色。
statusBarBorder = 状态栏分隔侧边栏和编辑器的边框颜色。
statusBarForeground = 工作区打开时状态栏的前景色。
statusBarItemActiveBackground = 点击时的状态栏项背景色。
statusBarItemHostBackground = 状态栏上远程指示器的背景色。
statusBarItemHostForeground = 状态栏上远程指示器的前景色。
statusBarItemHoverBackground = 悬停时的状态栏项的背景色。
statusBarNoFolderBackground = 没有打开文件夹时状态栏的背景色。
statusBarNoFolderBorder = 当没有打开文件夹时，用来使状态栏与侧边栏、编辑器分隔的状态栏的边框颜色。
statusBarNoFolderForeground = 没有打开文件夹时状态栏的前景色。
statusBarProminentItemBackground = 状态栏突出显示项的背景色。
statusBarProminentItemForeground = 状态栏突出的项目的前景色。
statusBarProminentItemHoverBackground = 状态栏突出显示项在被悬停时的背景色。
tabActiveBackground = 活动选项卡的背景色。
tabActiveBorder = 活动选项卡底部的边框颜色。
tabActiveBorderTop = 活动选项卡顶部的边框颜色。
tabActiveForeground = 活动组中活动选项卡的前景色。
tabActiveModifiedBorder = 在活动编辑器组中已修改（存在更新）的活动选项卡顶部的边框颜色。
tabActiveUnfocusedBorder = 在失去焦点的编辑器组中的活动选项卡底部的边框颜色。
tabActiveUnfocusedBorderTop = 在失去焦点的编辑器组中的活动选项卡顶部的边框颜色。
tabBorder = 用于将选项卡彼此分隔开的边框颜色。
tabHoverBackground = 选项卡被悬停时的背景色。
tabHoverBorder = 选项卡被悬停时用于突出显示的边框颜色。
tabInactiveBackground = 非活动选项卡的背景色。
tabInactiveForeground = 活动组中非活动选项卡的前景色。
tabInactiveModifiedBorder = 在活动编辑器组中已修改（存在更新）的非活动选项卡顶部的边框颜色。
tabUnfocusedActiveBackground = 一个失去焦点的编辑器组中的活动选项卡的背景色。
tabUnfocusedActiveForeground = 一个失去焦点的编辑器组中的活动选项卡的前景色。
tabUnfocusedHoverBackground = 非焦点组选项卡被悬停时的背景色。
tabUnfocusedHoverBorder = 非焦点组选项卡被悬停时用于突出显示的边框颜色。
tabUnfocusedInactiveForeground = 在一个失去焦点的组中非活动选项卡的前景色。
tabsContainerBackground = 启用选项卡时编辑器组标题的背景色。
tabsContainerBorder = 选项卡启用时编辑器组标题的边框颜色。
titleBarActiveBackground = 窗口处于活动状态时的标题栏的背景色。仅支持 macOS。
titleBarActiveForeground = 窗口处于活动状态时的标题栏的前景色。仅支持 macOS。
titleBarBorder = 标题栏的边框颜色。仅支持 macOS。
titleBarInactiveBackground = 窗口处于非活动状态时的标题栏的背景色。仅支持 macOS。
titleBarInactiveForeground = 窗口处于非活动状态时的标题栏的前景色。仅支持 macOS。
unfocusedActiveModifiedBorder = 在未获焦点的编辑器组中已修改（存在更新）的活动选项卡顶部的边框颜色。
unfocusedINactiveModifiedBorder = 在未获焦点的编辑器组中已修改（存在更新）的非活动选项卡顶部的边框颜色。
windowActiveBorder = 窗口处于活动状态时用于窗口边框颜色。
windowInactiveBorder = 窗口处于非活动状态时用于窗口边框颜色。

[vs/workbench/common/views]
duplicateId = 面板“{1}”中已注册有标识符为“{0}”的子面板。

[vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution]
error = 无法显示调用层次结构
no.item = 无结果
title = 速览调用层次结构
title.refocus = 重新聚焦调用层次结构
title.toggle = 显示或隐藏调用层次结构

[vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek]
callFrom = 调用者：“{0}”
callsTo = 调用对象：“{0}”
empt.callsFrom = 没有来自“{0}”的调用
empt.callsTo = 没有对“{0}”的调用
title.loading = 正在加载…
toggle.from = 显示呼叫
toggle.to = 显示调用者
tree.aria = 调用层次结构

[vs/workbench/contrib/cli/node/cli.contribution]
aborted = 已中止
cancel2 = 取消
cantCreateBinFolder = 未能创建“/usr/local/bin”文件夹。
cantUninstall = 未能卸载 shell 命令“{0}”。
install = 将“{0}”命令添加到 PATH
not available = 此命令不可用
ok = 好
shellCommand = Shell 命令
successFrom = 已将命令“{0}”从 PATH 中移除。
successIn = 已将命令“{0}”添加到 PATH。
uninstall = 将“{0}”命令从 PATH 中移除
warnEscalation = 需要管理员权限以添加命令。
warnEscalationUninstall = 需要管理员权限以移除命令。

[vs/workbench/contrib/codeEditor/browser/accessibility/accessibility]
ShowAccessibilityHelpAction = 显示辅助功能帮助
auto_off = 编辑器被配置为自动检测是否附加了屏幕阅读器，当前未检测到。
auto_on = 编辑器自动检测到已附加屏幕阅读器。
auto_unknown = 编辑器被配置为使用平台 API 以检测是否附加了屏幕阅读器，但当前运行时不支持此功能。
changeConfigToOnMac = 要设置对屏幕阅读器优化，请按 Command+E。
changeConfigToOnWinLinux = 要设置为对屏幕阅读器优化，请按 Ctrl+E。
configuredOff = 已设置为不对屏幕阅读器优化。
configuredOn = 已设置为对屏幕阅读器优化，您可以更改 `editor.accessibilitySupport` 设置。
emergencyConfOn = 现在将 `editor.accessibilitySupport` 设置更改为 `"on"`。
introMsg = 感谢试用 VS Code 的辅助功能选项。
openDocMac = 按 Command+H 键以打开浏览器窗口，其中包含更多有关 VS Code 辅助功能的信息。
openDocWinLinux = 按 Ctrl+H 键以打开浏览器窗口，其中包含更多有关 VS Code 辅助功能的信息。
openingDocs = 正在打开 VS Code 辅助功能文档页面。
outroMsg = 按 Esc 键或 Shift+Esc 键以消除此工具提示并返回到编辑器。
status = 状态：
tabFocusModeOffMsg = 在当前编辑器中按 Tab 键将插入制表符。通过按 {0} 切换此行为。
tabFocusModeOffMsgNoKb = 在当前编辑器中按 Tab 键会插入制表符。当前未能通过快捷键触发命令 {0}。
tabFocusModeOnMsg = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。通过按 {0} 切换此行为。
tabFocusModeOnMsgNoKb = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。当前未能通过快捷键触发命令 {0}。

[vs/workbench/contrib/codeEditor/browser/diffEditorHelper]
hintTimeout = 差异算法已提前停止（在 {0} 毫秒后）
hintWhitespace = 显示空白差异
removeTimeout = 删除限制

[vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget]
label.closeButton = 关闭
label.find = 查找
label.nextMatchButton = 下一个匹配项
label.previousMatchButton = 上一个匹配项
placeholder.find = 查找

[vs/workbench/contrib/codeEditor/browser/inspectKeybindings]
developer = 开发者
workbench.action.inspectKeyMap = 开发者：检查按键映射
workbench.action.inspectKeyMapJSON = 检查按键映射（JSON）

[vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes]
inspectTMScopes = 开发者：检查 TextMate 作用域
inspectTMScopesWidget.loading = 正在加载…

[vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint]
formatError = {0}：格式无效，应为 JSON 对象。
parseErrors = 错误分析 {0}：{1}
schema.autoCloseBefore = 在自动闭合设置为 `"languageDefined"` 时，定义使括号或引号自动闭合的光标后面的字符。通常是不会成为表达式开头的一组字符。
schema.autoClosingPairs = 定义括号对。当输入左方括号时，将自动插入右方括号。
schema.autoClosingPairs.notIn = 定义禁用了自动配对的作用域列表。
schema.blockComment.begin = 作为块注释开头的字符序列。
schema.blockComment.end = 作为块注释结尾的字符序列。
schema.blockComments = 定义块注释的标记方式。
schema.brackets = 定义增加和减少缩进的括号。
schema.closeBracket = 右方括号字符或字符串序列。
schema.comments = 定义注释符号
schema.folding = 此语言的折叠设置。
schema.folding.markers = 语言特定的折叠标记，如 `"#region"` 与 `"#endregion"`。开始与结束标记的正则表达式需设计得效率高，因其将对每一行的内容进行测试。
schema.folding.markers.end = 结束标记的正则表达式模式。其应以 `^` 开始。
schema.folding.markers.start = 开始标记的正则表达式模式。其应以 `^` 开始。
schema.folding.offSide = 在使用缩进标记代码块（off-side rule）的语言中，空白行将属于其之后的代码块。
schema.indentationRules = 语言的缩进设置。
schema.indentationRules.decreaseIndentPattern = 如果某行文本匹配此模式，则其后所有行都应被取消缩进一次（直到匹配其他规则）
schema.indentationRules.decreaseIndentPattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.decreaseIndentPattern.flags = decreaseIndentPattern 的正则表达式开关。
schema.indentationRules.decreaseIndentPattern.pattern = decreaseIndentPattern 的正则表达式模式。
schema.indentationRules.increaseIndentPattern = 如果一行文本匹配此模式，则之后所有内容都应被缩进一次（直到匹配其他规则）。
schema.indentationRules.increaseIndentPattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.increaseIndentPattern.flags = increaseIndentPattern 的正则表达式开关。
schema.indentationRules.increaseIndentPattern.pattern = increaseIndentPattern 的正则表达式模式。
schema.indentationRules.indentNextLinePattern = 如果某一行匹配此模式，那么仅此行之后的**下一行**应缩进一次。
schema.indentationRules.indentNextLinePattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.indentNextLinePattern.flags = indentNextLinePattern 的正则表达式开关。
schema.indentationRules.indentNextLinePattern.pattern = indentNextLinePattern 的正则表达式模式。
schema.indentationRules.unIndentedLinePattern = 如果某一行匹配此模式，那么不应更改此行的缩进，且不应针对其他规则对其进行计算。
schema.indentationRules.unIndentedLinePattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.unIndentedLinePattern.flags = unIndentedLinePattern 的正则表达式开关。
schema.indentationRules.unIndentedLinePattern.pattern = unIndentedLinePattern 的正则表达式模式。
schema.lineComment = 作为行注释开头的字符序列。
schema.openBracket = 左方括号字符或字符串序列。
schema.surroundingPairs = 定义可用于包围所选字符串的括号对。
schema.wordPattern = 定义在编程语言里什么东西会被当做是一个单词。
schema.wordPattern.flags = 用于匹配文本的正则表达式开关。
schema.wordPattern.flags.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.wordPattern.pattern = 用于匹配文本的正则表达式模式。

[vs/workbench/contrib/codeEditor/browser/largeFileOptimizations]
largeFile = {0}：为减少内存使用并避免卡顿或崩溃，我们已关闭对此大型文件内容的标记、折行和折叠。
removeOptimizations = 强制启用功能
reopenFilePrompt = 请重新打开文件以使此设置生效。

[vs/workbench/contrib/codeEditor/browser/toggleMinimap]
miShowMinimap = 显示小地图(&&M)
toggleMinimap = 显示或隐藏小地图
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier]
miMultiCursorAlt = 切换为按住 Alt 键添加光标
miMultiCursorCmd = 切换为按住 Command 键添加光标
miMultiCursorCtrl = 切换为按住 Ctrl 键添加光标
toggleLocation = 切换多行修改键

[vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter]
miToggleRenderControlCharacters = 渲染控制字符(&&C)
toggleRenderControlCharacters = 显示或隐藏控制字符
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace]
miToggleRenderWhitespace = 渲染空格(&&R)
toggleRenderWhitespace = 显示或隐藏空格
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleWordWrap]
miToggleWordWrap = 打开自动换行(&&W)
toggle.wordwrap = 视图：打开或关闭自动换行
unwrapMinified = 在此文件禁用折行
wordWrap.notInDiffEditor = 不能在差异编辑器中打开或关闭自动换行。
wrapMinified = 在此文件启用折行

[vs/workbench/contrib/comments/browser/commentGlyphWidget]
editorGutterCommentRangeForeground = 编辑器行号栏中表示评论范围的颜色。

[vs/workbench/contrib/comments/browser/commentNode]
commentAddReactionDefaultError = 未能删除评论回应
commentAddReactionError = 未能删除评论回应：{0}。
commentDeleteReactionDefaultError = 未能删除评论回应
commentDeleteReactionError = 未能删除评论回应：{0}。
commentToggleReaction = 切换反应
commentToggleReactionDefaultError = 切换注释反应失败
commentToggleReactionError = 切换注释反应失败：{0}。

[vs/workbench/contrib/comments/browser/commentThreadWidget]
commentThreadParticipants = 参与者：{0}
label.collapse = 折叠
newComment = 键入新注释
reply = 回复…
startThread = 开始讨论

[vs/workbench/contrib/comments/browser/comments.contribution]
commentsConfigurationTitle = 评论
openComments = 何时打开评论面板。

[vs/workbench/contrib/comments/browser/commentsEditorContribution]
nextCommentThreadAction = 转到下一条评论串
pickCommentService = 选择注释提供程序

[vs/workbench/contrib/comments/browser/commentsPanel]
collapseAll = 全部折叠

[vs/workbench/contrib/comments/browser/commentsTreeViewer]
image = 图片
imageWithLabel = 图片：{0}

[vs/workbench/contrib/comments/browser/reactionsAction]
pickReactions = 选取反应…

[vs/workbench/contrib/comments/common/commentModel]
noComments = 此次审查中没有评论。

[vs/workbench/contrib/customEditor/browser/commands]
reopenWith.title = 重新打开方式
viewCategory = 视图

[vs/workbench/contrib/customEditor/browser/customEditors]
openWithCurrentlyActive = 当前处于活动状态
promptOpenWith.defaultEditor = VS Code 的标准文本编辑器
promptOpenWith.placeHolder = 选择要用于“{0}”的编辑器…

[vs/workbench/contrib/customEditor/browser/extensionPoint]
contributes.displayName = 自定义编辑器的可读名称。在选择要使用的编辑器时，会向用户显示该信息。
contributes.priority = 何时使用自定义编辑器。可能已被用户覆盖。
contributes.priority.builtin = 如果没有为资源注册其他默认或内置编辑器，则自动使用该编辑器。
contributes.priority.default = 如果没有为资源注册其他默认自定义编辑器，编辑器将自动用于资源。
contributes.priority.option = 不自动使用编辑器，但用户可选用它。
contributes.selector = 启用自定义编辑器的 glob 模式集。
contributes.selector.filenamePattern = 启用自定义编辑器的 glob 模式。
contributes.selector.mime = 与数据 URI 资源的 mime 类型匹配的 glob 模式。
contributes.viewType = 自定义编辑器的唯一标识符。
contributes.webviewEditors = 参与 Web 视图编辑器。

[vs/workbench/contrib/customEditor/browser/webviewEditor.contribution]
editor.editorAssociations = 配置资源要使用的编辑器。
editor.editorAssociations.filenamePattern = 编辑器应被应用于的 glob 模式。
editor.editorAssociations.mime = 编辑器可应用的 mime 类型。这用于二进制文件。
editor.editorAssociations.viewType = 编辑器视图类型。
workbenchConfigurationTitle = 工作台

[vs/workbench/contrib/debug/browser/breakpointEditorContribution]
addBreakpoint = 添加断点
addConditionalBreakpoint = 添加条件断点…
addLogPoint = 添加记录点…
breakpoint = 断点
breakpointHasConditionDisabled = 此{0}的{1}将在删除后丢失。请考虑仅启用此{0}。
breakpointHasConditionEnabled = 此{0}的{1}将在删除后丢失。请考虑仅禁用此{0}。
cancel = 取消
condition = 条件
disable = 禁用
disableBreakpoint = 禁用{0}
disableBreakpointOnLine = 禁用行断点
disableInlineColumnBreakpoint = 禁用第 {0} 列的内联断点
disableLogPoint = {0} {1}
editBreakpoint = 编辑{0}…
editBreakpoints = 编辑断点
editInlineBreakpointOnColumn = 编辑第 {0} 列的内联断点
editLineBrekapoint = 编辑行断点
enable = 启用
enableBreakpoint = 启用 {0}
enableBreakpointOnLine = 启用行断点
enableBreakpoints = 启用第 {0} 列的内联断点
enableDisableBreakpoints = 启用或禁用断点
logPoint = 记录点
message = 消息
removeBreakpoint = 删除 {0}
removeBreakpoints = 删除断点
removeInlineBreakpointOnColumn = 删除第 {0} 列的内联断点
removeLineBreakpoint = 删除行断点
removeLogPoint = 删除 {0}

[vs/workbench/contrib/debug/browser/breakpointWidget]
breakpointType = 断点类型
breakpointWidgetExpressionPlaceholder = 在表达式结果为真时中断。按 Enter 键确认，Esc 键取消。
breakpointWidgetHitCountPlaceholder = 在命中次数条件满足时中断。按 Enter 键确认，Esc 键取消。
breakpointWidgetLogMessagePlaceholder = 断点命中时记录的消息。{} 内的表达式将被替换。按 Enter 键确认，Esc 键取消。
expression = 表达式
hitCount = 命中次数
logMessage = 记录消息

[vs/workbench/contrib/debug/browser/breakpointsView]
Breakpoint = 断点
Logpoint = 记录点
breakpoint = 断点
breakpointUnsupported = 不支持此类型的断点
breakpointsSection = 断点部分
dataBreakpoint = 数据断点
dataBreakpointUnsupported = 此调试类型不支持数据断点
dataBreakpointsNotSupported = 此调试类型不支持数据断点
disabledBreakpoint = 已禁用的断点
disabledLogpoint = 已禁用的记录点
editBreakpoint = 编辑{0}…
expression = 表达式：{0}
functionBreakPointInputAriaLabel = 键入函数断点
functionBreakpoint = 函数断点
functionBreakpointPlaceholder = 要断开的函数
functionBreakpointUnsupported = 不受此调试类型支持的函数断点
functionBreakpointsNotSupported = 此调试类型不支持函数断点
hitCount = 点击量数：{0}
logMessage = 记录消息：{0}
removeBreakpoint = 删除 {0}
unverifiedBreakopint = 未验证的断点
unverifiedLogpoint = 未验证的记录点

[vs/workbench/contrib/debug/browser/callStackView]
callStackAriaLabel = 调试调用堆栈
callstackSection = 调用堆栈部分
debugStopped = 因 {0} 已暂停
loadMoreStackFrames = 加载多个堆栈帧
paused = 已暂停
running = 正在运行
session = 会话
sessionLabel = 调试会话 {0}
showMoreAndOrigin = 显示另外 {0} 个：{1}
showMoreStackFrames = 显示另外 {0} 个堆栈帧
showMoreStackFrames2 = 显示更多堆栈框架
stackFrameAriaLabel = 堆栈帧 {0} 行 {1} {2}，调用堆栈，调试
thread = 线程
threadAriaLabel = 线程 {0}，调用堆栈，调试

[vs/workbench/contrib/debug/browser/debug.contribution]
allowBreakpointsEverywhere = 允许在任何文件中设置断点。
always = 始终在状态栏中显示调试
breakpoints = 断点
callStack = 调用堆栈
copyStackTrace = 拷贝调用堆栈
debug = 调试
debug.console.fontFamily = 调试台中的字体系列。
debug.console.fontSize = 调试台中的字体大小，以像素为单位。
debug.console.lineHeight = 调试台中的行高，以像素为单位。设置为 `0` 表示计算从字体大小开始的行高。
debug.console.wordWrap = 在调试台中对较长行折行。
debug.focusWindowOnBreak = 当调试器中断时，使工作台窗口获得焦点。
debug.onTaskErrors = 在运行预启动任务后遇到错误时的操作。
debugAnyway = 忽略错误并开始调试。
debugCategory = 调试
debugCommands = 调试配置
debugConfigurationTitle = 调试
debugFocusConsole = 聚焦到“调试台”视图
debugPanel = 调试台
enableAllHovers = 在调试过程中启用非调试悬停提示。启用后，将调用悬停提供程序来提供悬停提示。即使启用此项设置，普通悬停提示也不会显示。
inlineBreakpoint = 内联断点
inlineValues = 当处于调试过程中时，在编辑器中内联显示变量值。
jumpToCursor = 跳转到光标
launch = 全局调试启动配置。应当作为跨工作区共享的“launch.json”的替代方法。
loadedScripts = 已载入的脚本
miAddConfiguration = 添加配置(&&D)…
miConditionalBreakpoint = 条件断点(&&C)…
miContinue = 继续(&&C)
miDisableAllBreakpoints = 禁用所有断点(&&L)
miEnableAllBreakpoints = 启用所有断点(&&E)
miFunctionBreakpoint = 函数断点(&&F)…
miInlineBreakpoint = 内联断点(&&O)
miInstallAdditionalDebuggers = 安装附加调试器(&&I)…
miLogPoint = 记录点(&&L)…
miNewBreakpoint = 新建断点(&&N)
miOpenConfigurations = 打开配置(&&C)
miRemoveAllBreakpoints = 删除所有断点(&&A)
miRestart Debugging = 重启调试(&&R)
miStartDebugging = 启动调试(&&S)
miStartWithoutDebugging = 在不调试的情况下启动(&&W)
miStepInto = 单步执行(&&I)
miStepOut = 单步停止(&&U)
miStepOver = 单步跳过(&&O)
miStopDebugging = 停止调试(&&S)
miToggleBreakpoint = 切换断点(&&B)
miToggleDebugConsole = 调试台(&&B)
miViewDebug = 调试(&&D)
never = 在状态栏中不再显示调试
onFirstSessionStart = 仅于第一次启动调试后在状态栏中显示调试
openDebug = 何时显示“调试”面板。
openExplorerOnEnd = 在调试结束时自动显示“资源”面板。
prompt = 询问下一步操作。
restartFrame = 重新启动框架
reverseContinue = 反向
showBreakpointsInOverviewRuler = 在概览标尺中显示断点。
showErrors = 显示“问题”面板，不开始调试。
showInStatusBar = 何时显示调试状态栏。
showSubSessionsInToolBar = 在调试工具栏中显示调试子会话。设置为 `false` 表示子会话上的停止命令也将停止父会话。
stepBackDebug = 后退
terminateThread = 终止线程
toggleDebugPanel = 调试台
toggleDebugViewlet = 显示调试
toolBarLocation = 调试工具栏的位置。`floating` 悬浮在所有视图之上，`docked` 固定在“调试”面板中，`hidden` 隐藏。
variables = 变量
view = 视图
watch = 监视

[vs/workbench/contrib/debug/browser/debugActionViewItems]
addConfigTo = 添加配置（{0}）…
addConfiguration = 添加配置…
debugLaunchConfigurations = 调试启动配置
debugSession = 调试会话
noConfigurations = 没有配置

[vs/workbench/contrib/debug/browser/debugActions]
activateBreakpoints = 激活断点
addFunctionBreakpoint = 添加函数断点
addWatchExpression = 添加表达式
copyValue = 拷贝值
deactivateBreakpoints = 停用断点
disableAllBreakpoints = 禁用所有断点
enableAllBreakpoints = 启用所有断点
focusSession = 聚焦到“会话”视图
launchJsonNeedsConfigurtion = 配置或修复“launch.json”
noFolderDebugConfig = 请先打开一个文件夹以进行高级调试配置。
openLaunchJson = 打开 {0}
reapplyAllBreakpoints = 重新应用所有断点
removeAllBreakpoints = 删除所有断点
removeAllWatchExpressions = 删除所有表达式
removeBreakpoint = 删除断点
selectAndStartDebugging = 选择并开始调试
startDebug = 开始调试
startWithoutDebugging = 开始执行（不调试）

[vs/workbench/contrib/debug/browser/debugCallStackContribution]
focusedStackFrameLineHighlight = 堆栈帧中焦点一行的高亮背景色。
topStackFrameLineHighlight = 堆栈帧中顶部一行的高亮背景色。

[vs/workbench/contrib/debug/browser/debugCommands]
addInlineBreakpoint = 添加内联断点
chooseLocation = 选择特定的位置
continueDebug = 继续
debug = 调试
disconnect = 断开连接
jumpToCursor = 跳转到光标
noExecutableCode = 当前光标位置没有可执行的代码。
noFolderDebugConfig = 请先打开一个文件夹以进行高级调试配置。
pauseDebug = 暂停
restartDebug = 重启
stepIntoDebug = 单步调试
stepOutDebug = 单步跳出
stepOverDebug = 单步跳过
stop = 停止

[vs/workbench/contrib/debug/browser/debugConfigurationManager]
DebugConfig.failed = 未能在“.vscode”文件夹（{0}）内创建“launch.json”文件。
debugNoType = 调试器的 `type` 属性值（不可省略）应是字符串。
selectDebug = 选择环境
user settings = 用户设置
workspace = 工作区

[vs/workbench/contrib/debug/browser/debugEditorActions]
conditionalBreakpointEditorAction = 调试：添加条件断点…
debugAddToWatch = 调试：添加到监视
debugEvaluate = 调试：求值
goToNextBreakpoint = 调试：转到下一个断点
goToPreviousBreakpoint = 调试：到前面的断点
logPointEditorAction = 调试：添加记录点…
runToCursor = 运行到光标处
showDebugHover = 调试：显示悬停
toggleBreakpointAction = 调试：切换断点

[vs/workbench/contrib/debug/browser/debugEditorContribution]
addConfiguration = 添加配置…

[vs/workbench/contrib/debug/browser/debugHover]
treeAriaLabel = 调试悬停
variableAriaLabel = {0} 值 {1}，变量，调试

[vs/workbench/contrib/debug/browser/debugQuickOpen]
addConfigTo = 添加配置（{0}）…
addConfiguration = 添加配置…
debugAriaLabel = 键入启动配置的名称以运行。
entryAriaLabel = {0}，调试
noConfigurationsFound = 找不到任何调试配置。请创建一个“launch.json”文件。
noConfigurationsMatching = 无任何调试配置匹配

[vs/workbench/contrib/debug/browser/debugService]
DebugTaskNotFound = 找不到指定的任务。
DebugTaskNotFoundWithTaskId = 找不到任务“{0}”。
breakpointAdded = 已添加断点，行 {0}，文件 {1}
breakpointRemoved = 已删除断点，行 {0，文件 {1}
cancel = 取消
compoundMustHaveConfigurations = 复合项必须拥有 `configurations` 属性集，才能启动多个配置。
configMissing = “launch.json”中缺少配置“{0}”。
configurationAlreadyRunning = 调试配置“{0}”已在运行。
debugAdapterCrash = 调试适配器进程意外终止（{0}）
debugAnyway = 仍进行调试
debugRequesMissing = 所选的调试配置缺少属性“{0}”。
debugRequestNotSupported = 所选调试配置的属性“{0}”的值“{1}”不受支持。
debugTypeMissing = 所选的启动配置缺少属性“type”。
debugTypeNotSupported = 配置的类型“{0}”不受支持。
debuggingPaused = 调试暂停的 {0}，{1} {2} {3}
invalidTaskReference = 未能在其他工作区文件夹的启动配置中引用任务“{0}”。
launchJsonDoesNotExist = “launch.json”不存在。
multipleConfigurationNamesInWorkspace = 工作区中存在多个启动配置“{0}”。请使用文件夹名称来限定配置。
noConfigurationNameInWorkspace = 在工作区中找不到启动配置“{0}”。
noFolderWithName = 未能在复合项“{2}”中为配置“{1}”找到名为“{0}”的文件夹。
noFolderWorkspaceDebugError = 未能调试活动文件。请确保它保存在硬盘上，并确保已为该文件类型安装了调试扩展。
preLaunchTaskError = 运行 preLaunchTask“{0}”时出错。
preLaunchTaskErrors = 运行 preLaunchTask“{0}”时出错。
preLaunchTaskExitCode = preLaunchTask“{0}”已终止，退出代码为 {1}。
remember = 记住选择
showErrors = 显示错误
taskNotTracked = 未能跟踪任务“{0}”。
taskNotTrackedWithTaskId = 未能跟踪指定的任务。

[vs/workbench/contrib/debug/browser/debugSession]
debuggingStarted = 已开始调试。
debuggingStopped = 已停止调试。
sessionNotReadyForBreakpoints = 会话还没有为断点做好准备。

[vs/workbench/contrib/debug/browser/debugStatus]
selectAndStartDebug = 选择并启动调试配置
status.debug = 调试

[vs/workbench/contrib/debug/browser/debugToolBar]
debugIcon.continueForeground = 调试工具栏中用于继续的图标的前景色。
debugIcon.disconnectForeground = 调试工具栏中用于断开连接的图标的前景色。
debugIcon.pauseForeground = 调试工具栏中用于暂停的图标的前景色。
debugIcon.restartForeground = 调试工具栏中用于重启的图标的前景色。
debugIcon.startForeground = 调试工具栏中用于开始调试的图标的前景色。
debugIcon.stepIntoForeground = 调试工具栏中用于单步执行的图标的前景色。
debugIcon.stepOutForeground = 调试工具栏中用于跳过的图标的前景色。
debugIcon.stepOverForeground = 调试工具栏中用于单步执行的图标的前景色。
debugIcon.stopForeground = 调试工具栏中用于停止的图标的前景色。
debugToolBarBackground = 调试工具栏背景色。
debugToolBarBorder = 调试工具栏边框颜色。

[vs/workbench/contrib/debug/browser/debugViewlet]
debugConsoleAction = 调试台
startAdditionalSession = 启动其他会话

[vs/workbench/contrib/debug/browser/exceptionWidget]
debugExceptionWidgetBackground = 异常小组件背景色。
debugExceptionWidgetBorder = 异常小组件边框颜色。
exceptionThrown = 出现异常。
exceptionThrownWithId = 发生异常：{0}

[vs/workbench/contrib/debug/browser/linkDetector]
fileLink = 点击打开（按住 Ctrl 键并点击在侧边打开）
fileLinkMac = 点击打开（按住 Command 键并点击在侧边打开）

[vs/workbench/contrib/debug/browser/loadedScriptsView]
loadedScriptsAriaLabel = 在调试中已加载的脚本
loadedScriptsFolderAriaLabel = 文件夹 {0}，已加载的脚本，调试
loadedScriptsRootFolderAriaLabel = 工作区文件夹 {0}，已加载的脚本，调试
loadedScriptsSection = “已加载脚本”部分
loadedScriptsSession = 调试会话
loadedScriptsSessionAriaLabel = 会话 {0}，已加载的脚本，调试
loadedScriptsSourceAriaLabel = {0}，已加载的脚本，调试

[vs/workbench/contrib/debug/browser/rawDebugSession]
moreInfo = 详细信息

[vs/workbench/contrib/debug/browser/repl]
actions.repl.acceptInput = 接受 REPL 的输入
actions.repl.copyAll = 调试：拷贝调试台所有内容
clearRepl = 清除控制台
collapse = 全部折叠
copy = 拷贝
copyAll = 全部拷贝
debugConsole = 调试台
debugConsoleCleared = 调试台已清除
repl.action.filter = 在筛选器中聚焦 REPL 内容
replAriaLabel = REPL 面板
replRawObjectAriaLabel = Repl 变量 {0} 具有值 {1}，REPL，调试
replValueOutputAriaLabel = {0}，REPL，调试
replVariableAriaLabel = 变量 {0} 具有值 {1}，REPL，调试
selectRepl = 选择调试台
startDebugFirst = 开始调试以计算表达式
stateCapture = 对象状态捕获自第一个评估

[vs/workbench/contrib/debug/browser/statusbarColorProvider]
statusBarDebuggingBackground = 调试程序时状态栏的背景色。状态栏显示在窗口底部
statusBarDebuggingBorder = 调试程序时区别于侧边栏和编辑器的状态栏边框颜色。状态栏显示在窗口底部。
statusBarDebuggingForeground = 调试程序时状态栏的前景色。状态栏显示在窗口底部

[vs/workbench/contrib/debug/browser/variablesView]
addToWatchExpressions = 添加到监视
breakWhenValueChanges = 在值更改时中断
copyAsExpression = 拷贝表达式
setValue = 设置值
variableAriaLabel = {0} 值 {1}，变量，调试
variableScopeAriaLabel = 范围 {0}，变量，调试
variableValueAriaLabel = 键入新的变量值
variablesAriaTreeLabel = 调试变量
variablesSection = 变量部分

[vs/workbench/contrib/debug/browser/watchExpressionsView]
editWatchExpression = 编辑表达式
removeWatchExpression = 删除表达式
watchAriaTreeLabel = 调试监视表达式
watchExpressionAriaLabel = {0} 值 {1}，监视，调试
watchExpressionInputAriaLabel = 键入监视表达式
watchExpressionPlaceholder = 要监视的表达式
watchExpressionsSection = “监视表达式”部分
watchVariableAriaLabel = {0} 值 {1}，监视，调试

[vs/workbench/contrib/debug/common/debug]
internalConsoleOptions = 何时打开调试台。

[vs/workbench/contrib/debug/common/debugContentProvider]
canNotResolveSource = 未能加载源“{0}”。
canNotResolveSourceWithError = 未能加载源“{0}”：{1}。
unable = 未能解析无调试会话的资源

[vs/workbench/contrib/debug/common/debugModel]
breakpointDirtydHover = 未验证的断点。对文件进行了修改，请重启调试会话。
notAvailable = 不可用
paused = 已暂停
pausedOn = 因 {0} 已暂停
running = 正在运行
startDebugFirst = 开始调试以计算表达式

[vs/workbench/contrib/debug/common/debugSchemas]
app.launch.json.compound.folder = 复合项所在的文件夹的名称。
app.launch.json.compound.name = 复合的名称。在启动配置下拉菜单中显示。
app.launch.json.compounds = 复合列表。每个复合可引用多个配置，这些配置将一起启动。
app.launch.json.compounds.configurations = 将作为此复合的一部分启动的配置名称。
app.launch.json.configurations = 配置列表。使用智能感知添加新配置或编辑现有配置。
app.launch.json.title = 启动
app.launch.json.version = 此文件格式的版本。
compoundPrelaunchTask = 要在任何复合配置开始之前运行的任务。
useUniqueNames = 配置名称必须唯一。
vscode.extension.contributes.breakpoints = 添加断点。
vscode.extension.contributes.breakpoints.language = 对此语言允许断点。
vscode.extension.contributes.debuggers = 用于调试适配器。
vscode.extension.contributes.debuggers.adapterExecutableCommand = 如果指定的 VS Code 将调用此命令以确定调试适配器的可执行路径和要传递的参数。
vscode.extension.contributes.debuggers.args = 要传递给适配器的可选参数。
vscode.extension.contributes.debuggers.configurationAttributes = 用于验证“launch.json”的 JSON 架构配置。
vscode.extension.contributes.debuggers.configurationSnippets = 用于在“launch.json”中添加新配置的代码段。
vscode.extension.contributes.debuggers.initialConfigurations = 用于生成初始“launch.json”的配置。
vscode.extension.contributes.debuggers.label = 显示此调试适配器的名称。
vscode.extension.contributes.debuggers.languages = 可能被视为“默认调试程序”的调试扩展的语言列表。
vscode.extension.contributes.debuggers.linux = Linux 特定的设置。
vscode.extension.contributes.debuggers.linux.runtime = 用于 Linux 的运行时。
vscode.extension.contributes.debuggers.osx = macOS 特定的设置。
vscode.extension.contributes.debuggers.osx.runtime = 用于 macOS 的运行时。
vscode.extension.contributes.debuggers.program = 调试适配器程序的路径。该路径是绝对路径或相对于扩展文件夹的相对路径。
vscode.extension.contributes.debuggers.runtime = 可选运行时，以防程序属性不可执行，但需要运行时。
vscode.extension.contributes.debuggers.runtimeArgs = 可选运行时参数。
vscode.extension.contributes.debuggers.type = 此调试适配器的唯一标识符。
vscode.extension.contributes.debuggers.variables = 将“launch.json”中的交互式变量（例如 ${action.pickProcess}）映射到命令中。
vscode.extension.contributes.debuggers.windows = Windows 特定的设置。
vscode.extension.contributes.debuggers.windows.runtime = 用于 Windows 的运行时。

[vs/workbench/contrib/debug/common/debugSource]
unknownSource = 未知源

[vs/workbench/contrib/debug/common/debugger]
cannot.find.da = 找不到类型为“{0}”的调试适配器。
debugLinuxConfiguration = 特定于 Linux 的启动配置属性。
debugName = 配置名称；在启动配置下拉菜单中显示。
debugOSXConfiguration = 特定于 macOS 的启动配置属性。
debugPostDebugTask = 调试会话结束后运行的任务。
debugPrelaunchTask = 调试会话开始前要运行的任务。
debugRequest = 请求配置类型。可以是 `"launch"` 或 `"attach"`。
debugServer = 仅用于调试扩展开发：如果已指定端口，VS Code 会尝试连接到在服务器模式中运行的调试适配器
debugType = 配置类型。
debugTypeNotRecognised = 未能识别此调试类型。确保已经安装并启用相应的调试扩展。
debugWindowsConfiguration = 特定于 Windows 的启动配置属性。
launch.config.comment1 = 使用智能感知了解相关属性。
launch.config.comment2 = 悬停以查看现有属性的描述。
launch.config.comment3 = 欲了解更多信息，请访问：{0}
node2NotSupported = 不再支持 `node2`，请改用 `node`，并将 `protocol` 属性设为 `inspector`。

[vs/workbench/contrib/debug/common/replModel]
consoleCleared = 控制台已清除
snapshotObj = 仅显示了此对象的基元值。

[vs/workbench/contrib/debug/node/debugAdapter]
debugAdapterBinNotFound = 调试适配器可执行的“{0}”不存在。
debugAdapterCannotDetermineExecutable = 未能确定调试适配器“{0}”的可执行文件。
unableToLaunchDebugAdapter = 未能从“{0}”启动调试适配器。
unableToLaunchDebugAdapterNoArgs = 未能启动调试适配器。

[vs/workbench/contrib/emmet/browser/actions/expandAbbreviation]
expandAbbreviationAction = 展开 Emmet 缩写
miEmmetExpandAbbreviation = 展开 Emmet 缩写(&&X)

[vs/workbench/contrib/emmet/browser/actions/showEmmetCommands]
miShowEmmetCommands = Emmet(&&M)…
showEmmetCommands = 显示 Emmet 命令

[vs/workbench/contrib/extensions/browser/extensionEditor]
JSON Validation = JSON 验证（{0}）
builtin = 内置
changelog = 更改日志
changelogtooltip = 扩展的更新历史，显示扩展的“CHANGELOG.md”文件。
colorId = 标识符
colorThemes = 颜色主题（{0}）
colors = 颜色（{0}）
command name = 名称
commands = 命令（{0}）
contributions = 发布内容
contributionstooltip = 包含此扩展向 VS Code 编辑器提供的功能
debugger name = 名称
debugger type = 类型
debuggers = 调试程序（{0}）
default = 默认值
defaultDark = 深色默认
defaultHC = 高对比度默认
defaultLight = 浅色默认
dependencies = 依赖项
dependenciestooltip = 包含此扩展依赖的扩展
description = 说明
details = 细节
detailstooltip = 扩展详细信息，显示扩展的“README.md”文件。
extension id = 扩展标识符
extensionPack = 扩展包
extensionsPack = 多个可以一起安装的扩展
file extensions = 文件扩展名
fileMatch = 匹配文件
grammar = 语法
iconThemes = 图标主题（{0}）
install count = 安装数
keyboard shortcuts = 快捷键
language id = 标识符
language name = 名称
languages = 语言（{0}）
license = 许可证
localizations = 本地化（{0}）
localizations language id = 语言标识符
localizations language name = 语言名称
localizations localized language name = 语言本地名称
menuContexts = 菜单上下文
name = 扩展名
noChangelog = 无可用的更改日志。
noContributions = 没有发布内容
noDependencies = 没有依赖项
noReadme = 无可用 README 文件。
preview = 预览版
publisher = 发布者名称
rating = 评分
recommendationHasBeenIgnored = 您已选择不接收此扩展的推荐。
repository = 存储库
schema = 结构
setting name = 名称
settings = 设置（{0}）
snippets = 片段
view container id = 标识符
view container location = 位置
view container title = 标题
view id = 标识符
view location = 位置
view name = 名称
viewContainers = 视图容器（{0}）
views = 视图（{0}）

[vs/workbench/contrib/extensions/browser/extensionTipsService]
dontShowAgainExtension = 不再对“.{0}”文件显示
dynamicWorkspaceRecommendation = 您可能会对这个扩展感兴趣，它在 {0} 存储库的用户间流行。
exeBasedRecommendation = 根据安装的 {0} 推荐此扩展。
exeRecommended = 系统上已安装 {1}，因此建议使用“{0}”扩展。
fileBasedRecommendation = 根据最近打开的文件推荐此扩展。
ignoreAll = 是，忽略全部
ignoreExtensionRecommendations = 是否忽略所有推荐的扩展？
installAll = 全部安装
neverShowAgain = 不再显示
reallyRecommended2 = 建议对这种类型的文件使用“{0}”扩展。
reallyRecommendedExtensionPack = 建议对这种类型的文件使用“{0}”扩展包。
searchMarketplace = 搜索商店
showLanguageExtensions = 商店中有可以对“.{0}”文件提供帮助的扩展。
showRecommendations = 显示建议
workspaceRecommendation = 当前工作区的用户推荐此扩展。
workspaceRecommended = 有对于此工作区的扩展建议。

[vs/workbench/contrib/extensions/browser/extensions.contribution]
extension = 扩展
extensionsAutoUpdate = 启用后，将自动安装扩展更新。更新将从微软在线服务中获取。
extensionsCheckUpdates = 启用后，将自动检查扩展更新。若扩展存在更新，将在“扩展”视图中将其标记为过时扩展。更新将从微软在线服务中获取。
extensionsCloseExtensionDetailsOnViewChange = 启用后，将在离开“扩展”视图时，自动关闭扩展详细信息页面。
extensionsCommands = 管理扩展
extensionsConfigurationTitle = 扩展
extensionsIgnoreRecommendations = 启用后，将不会显示扩展建议的通知。
extensionsShowRecommendationsOnlyOnDemand = 启用后，除非用户特别进行请求，将不会获取或显示推荐。某些推荐将从微软在线服务中获取。
galleryExtensionsCommands = 安装库扩展
handleUriConfirmedExtensions = 对此处列出的扩展，扩展处理 URI 时将不会显示确认提示。
id required = 需要扩展标识符。
miOpenKeymapExtensions = 按键映射(&&K)
miOpenKeymapExtensions2 = 按键映射
miPreferencesExtensions = 扩展(&&E)
miViewExtensions = 扩展(&&X)
notInstalled = 未安装扩展“{0}”。请确保使用了完整的扩展标识符，包括发布者，例如“ms-vscode.csharp”。
showExtensions = 扩展
view = 视图
workbench.extensions.uninstallExtension.arg.name = 要卸载的扩展的标识符。
workbench.extensions.uninstallExtension.description = 卸载指定的扩展。

[vs/workbench/contrib/extensions/browser/extensionsActions]
AddToWorkspaceFolderIgnoredRecommendations.alreadyExists = 工作区文件夹的不需要推荐中已包含此扩展。
AddToWorkspaceFolderIgnoredRecommendations.success = 已成功添加此扩展到工作区文件夹的不需要推荐中。
AddToWorkspaceFolderRecommendations.alreadyExists = 工作区文件夹的推荐中已包含此扩展。
AddToWorkspaceFolderRecommendations.failure = 未能写入“extensions.json”。{0}
AddToWorkspaceFolderRecommendations.noWorkspace = 当前没有打开的工作区文件夹，未能添加推荐。
AddToWorkspaceFolderRecommendations.success = 已成功添加此扩展到工作区文件夹的推荐中。
AddToWorkspaceRecommendations.alreadyExists = 工作区推荐中已包含此扩展。
AddToWorkspaceRecommendations.failure = 写入失败。{0}
AddToWorkspaceRecommendations.success = 已成功添加此扩展到工作区推荐中。
AddToWorkspaceUnwantedRecommendations.alreadyExists = 工作区的不需要推荐中已包含此扩展。
AddToWorkspaceUnwantedRecommendations.success = 已成功添加此扩展到工作区的不需要推荐中。
InstallAnotherVersionExtensionAction.reloadNow = 立即重新加载
InstallAnotherVersionExtensionAction.success = 扩展 {0} 安装完毕。
InstallAnotherVersionExtensionAction.successReload = 请重新加载 VS Code 以完成扩展 {0} 的安装。
InstallVSIXAction.reloadNow = 立即重新加载
InstallVSIXAction.success = 已完成安装扩展 {0}。
InstallVSIXAction.successReload = 请重新加载 VS Code 以完成扩展 {0} 的安装。
ManageExtensionAction.uninstallingTooltip = 正在卸载
OpenExtensionsFile.failed = 未能在“.vscode”文件夹（{0}）内创建“extensions.json”文件。
ReinstallAction.success = 扩展 {0} 重新安装完毕。
ReinstallAction.successReload = 请重新加载 VS Code 以完成扩展 {0} 的重新安装。
Uninstalling = 正在卸载
addToWorkspaceFolderIgnoredRecommendations = 忽略推荐的扩展（工作区文件夹）
addToWorkspaceFolderRecommendations = 添加到推荐的扩展（工作区文件夹）
addToWorkspaceIgnoredRecommendations = 忽略推荐的扩展（工作区）
addToWorkspaceRecommendations = 添加到推荐的扩展（工作区）
checkForUpdates = 检查扩展更新
clearExtensionsInput = 清除扩展输入
color theme = 设置颜色主题
configureWorkspaceFolderRecommendedExtensions = 配置建议的扩展（工作区文件夹）
configureWorkspaceRecommendedExtensions = 配置建议的扩展（工作区）
current = 当前
disableAction = 禁用
disableAll = 禁用所有已安装的扩展
disableAllWorkspace = 禁用此工作区的所有已安装的扩展
disableAutoUpdate = 禁用自动更新扩展
disableForWorkspaceAction = 禁用（工作区）
disableGloballyAction = 禁用
disabled = 已禁用
download = 手动下载
enableAction = 启用
enableAll = 启用所有扩展
enableAllWorkspace = 启用这个工作区的所有扩展
enableAutoUpdate = 启用自动更新扩展
enableForWorkspaceAction = 启用（工作区）
enableGloballyAction = 启用
enabled = 已启用
extension enabled on remote = 已在“{0}”上启用扩展
extensionButtonProminentBackground = 扩展中突出操作的按钮背景色，如安装按钮。
extensionButtonProminentForeground = 扩展中突出操作的按钮前景色，如安装按钮。
extensionButtonProminentHoverBackground = 扩展中突出操作的按钮被悬停时的颜色，如安装按钮。
extensionInfoAction = 拷贝扩展信息
extensionInfoDescription = 说明：{0}
extensionInfoId = 标识符：{0}
extensionInfoName = 名称：{0}
extensionInfoPublisher = 发布者：{0}
extensionInfoVSMarketplaceLink = VS Marketplace 链接：{0}
extensionInfoVersion = 版本：{0}
extensionSettingsAction = 配置扩展设置
failedToInstall = 未能安装“{0}”。
failedToUpdate = 未能升级“{0}”。
file icon theme = 设置文件图标主题
ignoreExtensionRecommendation = 不再推荐此扩展
install another version = 安装另一个版本…
install locally = 本地安装
install previous version = 安装特定版本的扩展…
install vsix = 下载后，请手动安装“{0}”的 VSIX。
installButton = 安装(&&I)
installExtensionComplete = 已完成安装扩展 {0}。请重新加载 VS Code 进行启用。
installExtensionStart = 已启动安装扩展 {0}。将打开编辑器，显示此扩展的更多详细信息。
installExtensions = 安装扩展
installFromVSIX = 从 VSIX 文件安装
installRecommendedExtension = 安装推荐的扩展
installVSIX = 从 VSIX 安装…
installWorkspaceRecommendedExtensions = 安装工作区推荐的所有扩展
installing = 正在安装
installing extensions = 正在安装扩展…
just now = 刚刚
malicious tooltip = 此扩展被报告存在问题。
no local extensions = 没有要安装的扩展。
noOfDaysAgo = {0} 天前
noOfHoursAgo = {0} 小时前
noOfMonthsAgo = {0} 个月前
noOfYearsAgo = {0} 年前
noUpdatesAvailable = 所有扩展都是最新的。
one day ago = 1 天前
one hour ago = 1 小时前
one month ago = 1 个月前
one year ago = 1 年前
postEnableTooltip = 请重新加载 VS Code 以启用此扩展。
postUninstallTooltip = 请重新加载 VS Code 以完成此扩展的卸载。
postUpdateTooltip = 请重新启动 VS Code 以完成对此扩展的更新。
reinstall = 重新安装扩展…
reloadAction = 重新加载
reloadRequired = 需要重新加载
select color theme = 选择颜色主题
select extensions to install = 选择要安装的扩展
select file icon theme = 选择文件图标主题
selectExtension = 选择扩展
selectExtensionToReinstall = 选择要重新安装的扩展
selectVersion = 选择要安装的版本
showAzureExtensionsShort = Azure 扩展
showBuiltInExtensions = 显示内置的扩展
showDisabledExtensions = 显示已禁用的扩展
showEnabledExtensions = 显示启用的扩展
showInstalledExtensions = 显示已安装扩展
showLanguageExtensionsShort = 语言扩展
showOutdatedExtensions = 显示过时的扩展
showPopularExtensions = 显示常用的扩展
showRecommendedExtensions = 显示推荐的扩展
showRecommendedKeymapExtensionsShort = 键映射
singleDisabledUpdateAvailable = 1 个禁用扩展存在更新。
singleUpdateAvailable = 1 个扩展存在更新。
toggleExtensionsViewlet = 显示扩展
undo = 撤消
uninstallAction = 卸载
uninstallExtensionComplete = 请重新加载 VS Code 以完成对扩展 {0} 的卸载。
uninstallExtensionStart = 开始卸载扩展{0}。
uninstalled = 已卸载
updateAction = 更新
updateAll = 更新所有扩展
updateExtensionComplete = 已完成更新扩展 {0} 到版本 {1}。
updateExtensionStart = 已启动更新扩展 {0} 到版本 {1}。
updateTo = 更新到 {0}
updated = 已更新
updatesAvailable = {0} 个扩展存在更新。
updatesAvailableAllDisabled = {0} 个扩展存在更新。其全部为禁用扩展。
updatesAvailableIncludingDisabled = {0} 个扩展存在更新。其中 {1} 个是禁用扩展。
updatesAvailableOneDisabled = {0} 个扩展存在更新。其中 1 个是禁用扩展。
viewChanges = 查看更改

[vs/workbench/contrib/extensions/browser/extensionsActivationProgress]
activation = 正在激活扩展…

[vs/workbench/contrib/extensions/browser/extensionsDependencyChecker]

[vs/workbench/contrib/extensions/browser/extensionsQuickOpen]
noExtensionsToInstall = 键入扩展名称
searchFor = 按 Enter 键在商店中搜索“{0}”。

[vs/workbench/contrib/extensions/browser/extensionsViewer]
Unknown Extension = 未知扩展：

[vs/workbench/contrib/extensions/browser/extensionsViewlet]
builtInBasicsExtensions = 编程语言
builtInExtensions = 功能
builtInThemesExtensions = 主题
disabledExtensions = 已禁用
enabledExtensions = 已启用
extensionFound = 找到 1 个扩展。
extensionFoundInSection = 在“{0}”小节中找到 1 个扩展。
extensionsFound = 找到 {0} 个扩展。
extensionsFoundInSection = 在“{1}”小节中找到 {0} 个扩展。
malicious warning = 我们卸载了“{0}”，它被报告存在问题。
marketPlace = 商店
otherRecommendedExtensions = 其他推荐
outdatedExtensions = {0} 个过时的扩展
popularExtensions = 热门
recommendedExtensions = 推荐
reloadNow = 立即重新加载
searchExtensions = 在应用商店中搜索扩展
sort by installs = 排序依据：安装数
sort by name = 排序依据：名称
sort by rating = 排序依据：评分
workspaceRecommendedExtensions = 工作区推荐

[vs/workbench/contrib/extensions/browser/extensionsViews]
galleryError = 现在未能连接到扩展商店，请稍后再试。
no extensions found = 找不到扩展。

[vs/workbench/contrib/extensions/browser/extensionsWidgets]
extension-arialabel = {0}。{1}按 Enter 键可获取扩展详细信息。
noRating = 没有评分
ratedBySingleUser = 评价来自 1 位用户
ratedByUsers = 评价来自 {0} 位用户
remote extension title = {0} 中的扩展
viewExtensionDetailsAria = {0}。按 Enter 键可获取扩展详细信息。

[vs/workbench/contrib/extensions/browser/extensionsWorkbenchService]
Manifest is not found = 没有清单文件
incompatible = 未能安装版本为“{1}”的扩展“{0}”，因为它与 VS Code 不兼容。
installing extension = 正在安装扩展..。
installing named extension = 正在安装“{0}”扩展..。
multipleDependentsError = 未能禁用扩展“{0}”。扩展“{1}”、“{2}”和其他扩展取决于此。
singleDependentError = 未能禁用扩展“{0}”。扩展“{1}”取决于此。
twoDependentsError = 未能禁用扩展“{0}”。扩展“{1}”和扩展“{2}”取决于此。
uninstallingExtension = 正在卸载扩展…

[vs/workbench/contrib/extensions/browser/remoteExtensionsInstaller]

[vs/workbench/contrib/extensions/common/extensionsFileTemplate]
app.extension.identifier.errorMessage = 预期的格式为 `${publisher}.${name}`，如 `vscode.csharp`。
app.extensions.json.recommendations = 向此工作区的用户推荐的扩展列表。扩展的标识符始终为 `${publisher}.${name}`，如 `vscode.csharp`。
app.extensions.json.title = 扩展
app.extensions.json.unwantedRecommendations = 不应向此工作区的用户推荐的扩展列表。扩展的标识符始终为 `${publisher}.${name}`，如 `vscode.csharp`。

[vs/workbench/contrib/extensions/common/extensionsInput]

[vs/workbench/contrib/extensions/common/extensionsUtils]
disableOtherKeymapsConfirmation = 是否禁用其他按键映射扩展（{0}），从而避免快捷键之间的冲突？
yes = 是

[vs/workbench/contrib/extensions/electron-browser/extensionProfileService]
profilingExtensionHost = $(sync~spin) 正在分析扩展宿主
profilingExtensionHostTime = $(sync~spin) 正在分析扩展宿主（{0} 秒）
selectAndStartDebug = 点击可停止分析。
status.profiler = 扩展分析

[vs/workbench/contrib/extensions/electron-browser/extensions.contribution]
runtimeExtension = 正在运行的扩展

[vs/workbench/contrib/extensions/electron-browser/extensionsActions]
openExtensionsFolder = 打开扩展文件夹

[vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler]
show = 显示扩展
unresponsive-exthost = 扩展“{0}”的上一次操作花费时间较长，阻碍了其他扩展的运行。

[vs/workbench/contrib/extensions/electron-browser/extensionsSlowActions]
attach.msg = 这是一个提醒，以确保您没有忘记将“{0}”附加到刚刚创建的问题。
attach.msg2 = 这是一个提醒，以确保您没有忘记将“{0}”归入现有的性能问题中。
attach.title = 您是否附上了 CPU 配置文件？
cmd.report = 报告问题
cmd.reportOrShow = 性能问题
cmd.show = 显示问题
ok = 确定

[vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor]
debugExtensionHost = 启动调试扩展宿主
debugExtensionHost.launch.name = 附加扩展宿主
disable = 禁用
disable workspace = 禁用（工作区）
errors = {0} 个未捕获的错误
extensionHostProfileStart = 开始分析扩展宿主
languageActivation = 因您打开了 {0} 文件而被激活
reportExtensionIssue = 报告问题
saveExtensionHostProfile = 保存扩展宿主分析文件
showRuntimeExtensions = 显示正在运行的扩展
stopExtensionHostProfileStart = 停止分析扩展宿主
unresponsive.title = 扩展已导致扩展宿主冻结。
workspaceContainsTimeout = 因搜索 {0} 耗时太长而被激活

[vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput]

[vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution]
globalConsoleAction = 打开新终端
scopedConsoleAction = 在终端中打开

[vs/workbench/contrib/externalTerminal/node/externalTerminalService]
console.title = VS Code 控制台
explorer.openInTerminalKind = 自定义要启动的终端类型。
ext.term.app.not.found = 找不到终端应用程序 "{0}"
linux.term.failed = “{0}”失败，退出代码为 {1}
mac.terminal.script.failed = 脚本“{0}”失败，退出代码为 {1}
mac.terminal.type.not.supported = 不支持“{0}”
press.any.key = 按任意键继续…
terminal.explorerKind.external = 使用设定的外部终端。
terminal.explorerKind.integrated = 使用 VS Code 的集成终端。
terminal.external.linuxExec = 自定义要在 Linux 上运行的终端。
terminal.external.osxExec = 定义在 macOS 上运行的终端应用程序。
terminal.external.windowsExec = 自定义要在 Windows 上运行的终端。
terminalConfigurationTitle = 外部终端

[vs/workbench/contrib/feedback/browser/feedback]
character left = 剩余字符
characters left = 剩余字符
close = 关闭
feedbackTextInput = 告诉我们您的反馈意见
frownCaption = 负面反馈情绪
label.sendASmile = 通过 Tweet 向我们发送反馈。
other ways to contact us = 联系我们的其他方式
patchedVersion1 = 安装已损坏。
patchedVersion2 = 如果提交了 bug，请指定此项。
request a missing feature = 请求缺失功能
sendFeedback = Tweet 反馈
sentiment = 您的体验如何？
showFeedback = 在状态栏中显示反馈笑脸图标
smileCaption = 正面反馈情绪
submit a bug = 提交 bug
tell us why = 告诉我们原因？
tweet = Tweet
tweetFeedback = Tweet 反馈

[vs/workbench/contrib/feedback/browser/feedbackStatusbarItem]
status.feedback = Tweet 反馈

[vs/workbench/contrib/files/browser/editors/binaryFileEditor]
binaryFileEditor = 二进制文件查看器

[vs/workbench/contrib/files/browser/editors/textFileEditor]
createFile = 创建文件
fileEditorAriaLabel = 文本文件编辑器。
fileEditorWithInputAriaLabel = {0}。文本文件编辑器。
openFolderError = 文件是目录
textFileEditor = 文本文件编辑器

[vs/workbench/contrib/files/browser/explorerViewlet]
folders = 文件

[vs/workbench/contrib/files/browser/fileActions]
binFailed = 未能删除到回收站。是否永久删除？
clipboardComparisonLabel = 粘贴板 ↔ {0}
closeGroup = 关闭组
collapseExplorerFolders = 在“资源”面板中折叠文件夹
compareWithClipboard = 比较活动文件与粘贴板内容
confirmDeleteMessageFile = 是否永久删除“{0}”？
confirmDeleteMessageFilesAndDirectories = 是否永久删除以下 {0} 个文件或文件夹（包括其内容）？
confirmDeleteMessageFolder = 是否永久删除“{0}”及其内容？
confirmDeleteMessageMultiple = 是否永久删除以下 {0} 个文件？
confirmDeleteMessageMultipleDirectories = 是否永久删除以下 {0} 个目录及其内容？
confirmMoveTrashMessageFile = 是否删除“{0}”？
confirmMoveTrashMessageFilesAndDirectories = 是否删除以下 {0} 个文件或文件夹（包括其内容）？
confirmMoveTrashMessageFolder = 是否确实要删除“{0}”及其内容？
confirmMoveTrashMessageMultiple = 是否删除以下 {0} 个文件？
confirmMoveTrashMessageMultipleDirectories = 是否删除以下 {0} 个文件夹及其内容？
copyFile = 拷贝
createNewFile = 新建文件
createNewFolder = 新建文件夹
delete = 删除
deleteButtonLabel = 删除(&&D)
deleteButtonLabelRecycleBin = 移动到回收站(&&M)
deleteButtonLabelTrash = 移动到废纸篓(&&M)
deletePermanentlyButtonLabel = 永久删除(&&D)
dirtyMessageFileDelete = 删除的文件中有未保存的更改。是否继续？
dirtyMessageFilesDelete = 删除的文件中有未保存的更改。是否继续？
dirtyMessageFolderDelete = 删除的文件夹中有 {0} 个文件有未保存的更改。是否继续？
dirtyMessageFolderOneDelete = 删除的文件夹中有 1 个文件有未保存的更改。是否继续？
dirtyWarning = 如果不保存，更改将丢失。
doNotAskAgain = 不再询问
download = 下载
downloadFile = 下载文件
downloadFolder = 下载文件夹
emptyFileNameError = 必须提供文件或文件夹名。
fileDeleted = 粘贴的文件已被删除或移动
fileIsAncestor = 粘贴的项目是目标文件夹的上级
fileNameExistsError = 此位置已存在文件或文件夹 **{0}**。请选择其他名称。
fileNameStartsWithSlashError = 文件或文件夹名称不能以斜杠开头。
focusFilesExplorer = 聚焦到“资源”面板
globalCompareFile = 比较活动文件与…
invalidFileNameError = 名称 **{0}** 作为文件或文件夹名无效。请选择其他名称。
irreversible = 此操作不可逆！
newFile = 新建文件
newFolder = 新建文件夹
newUntitledFile = 新的无标题文件
openFileInNewWindow = 在新窗口中打开活动文件
openFileToCompare = 首先打开文件以将其与另外一个文件比较。
openFileToShow = 请先打开要在浏览器中显示的文件
openFileToShowInNewWindow.nofile = 请先打开要在新窗口中打开的文件
openFileToShowInNewWindow.unsupportedschema = 活动编辑器必须包含可打开的资源。
pasteFile = 粘贴
refreshExplorer = 刷新“资源”面板
rename = 重命名
retry = 重试
retryButtonLabel = 重试(&&R)
saveAllInGroup = 保存组中的全部内容
showInExplorer = 在侧边栏中显示活动文件
toggleAutoSave = 切换开关自动保存
trashFailed = 未能删除到废纸篓。是否永久删除？
undoBin = 可以从回收站还原。
undoTrash = 可以从废纸篓还原。

[vs/workbench/contrib/files/browser/fileActions.contribution]
acceptLocalChanges = 使用您的更改覆盖硬盘上的内容
close = 关闭
closeAll = 全部关闭
closeEditor = 关闭编辑器
closeOthers = 关闭其他
closeSaved = 关闭已保存
compareActiveWithSaved = 比较活动与已保存的文件
compareSelected = 将已选项进行比较
compareSource = 选择以进行比较
compareWithSaved = 与已保存文件比较
compareWithSelected = 与已选项目进行比较
copyPath = 拷贝路径
copyPathOfActive = 拷贝活动文件的路径
copyRelativePath = 拷贝相对路径
copyRelativePathOfActive = 拷贝活动文件的相对路径
cut = 剪切
deleteFile = 永久删除
file = 文件
filesCategory = 文件
miAutoSave = 自动保存(&&U)
miCloseEditor = 关闭编辑器(&&C)
miGotoFile = 转到文件(&&F)…
miNewFile = 新建文件(&&N)
miOpen = 打开(&&O)...
miOpenFile = 打开文件(&&O)...
miOpenFolder = 打开文件夹(&&F)...
miOpenWorkspace = 打开工作区(&&K)...
miRevert = 还原文件(&&V)
miSave = 保存(&&S)
miSaveAll = 全部保存(&&L)
miSaveAs = 保存为(&&A)…
newFile = 新建文件
openFile = 打开文件…
openToSide = 在侧边打开
revealInSideBar = 在“资源”面板中显示
revert = 还原文件
revertLocalChanges = 放弃您的更改并还原为硬盘上的内容
saveAll = 全部保存
saveAllInGroup = 保存组中的全部内容
saveFiles = 保存所有文件
view = 视图
workspaces = 工作区

[vs/workbench/contrib/files/browser/fileCommands]
genericRevertError = 未能还原“{0}”：{1}
modifiedLabel = {0}（硬盘上）↔ {1}
openFileToCopy = 打开文件以拷贝路径
removeFolderFromWorkspace = 将文件夹从工作区删除
save = 保存
saveAll = 全部保存
saveAs = 保存为…
saveWithoutFormatting = 保存但不更改格式

[vs/workbench/contrib/files/browser/files.contribution]
associations = 配置语言的文件关联（如：`"*.extension"："html"`）这些关联的优先级高于已安装语言的默认关联。
autoGuessEncoding = 启用后，将在文件打开时尝试猜测字符集编码。可以按语言对此项进行配置。
autoReveal = 在编辑器中打开文件时，自动在“资源”面板中选择该文件。
autoSave = 自动保存文件。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)阅读有关自动保存的详细信息。
autoSaveDelay = 自动保存文件的延迟时间，以毫秒为单位（适用于 `#files.autoSave#` 设置为 `{0}` 时）。
binaryFileEditor = 二进制文件编辑器
confirmDelete = 在“资源”面板中把文件删除到废纸篓时进行确认。
confirmDragAndDrop = 在“资源”面板中拖放移动文件或文件夹时进行确认。
defaultLanguage = 分配给新文件的默认语言模式。
editorConfigurationTitle = 编辑器
enableDragAndDrop = 启用“资源”面板中的拖放移动文件和文件夹功能。
encoding = 在读取和写入文件时使用的默认字符集编码。可以按语言对此项进行配置。
eol = 默认换行符。
eol.CRLF = CRLF
eol.LF = LF
eol.auto = 使用具体操作系统规定的行末字符。
exclude = 配置排除的文件和文件夹的 glob 模式。例如，“文件”视图将根据此设置决定要显示或隐藏的文件和文件夹。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)阅读有关 glob 模式的详细信息。
explore = 资源
explorer.decorations.badges = 在文件列表中根据文件状态显示不同徽章。
explorer.decorations.colors = 在文件列表中根据文件状态显示不同颜色。
explorer.incrementalNaming = 在粘贴文件（夹）时如何重命名重复的项目。
explorerConfigurationTitle = 资源
files.autoSave.afterDelay = 当文件修改后的时间超过 `#files.autoSaveDelay#` 中配置的值时自动进行保存。
files.autoSave.off = 永不自动保存更新后的文件。
files.autoSave.onFocusChange = 编辑器失去焦点时自动保存更新后的文件。
files.autoSave.onWindowChange = 窗口失去焦点时自动保存更新后的文件。
files.exclude.boolean = 匹配文件路径所依据的 glob 模式。设置为 `true` 或 `false` 可启用或禁用该模式。
files.exclude.when = 对匹配文件的同级文件的其他检查。使用 $(basename) 作为匹配文件名的变量。
files.simpleDialog.enable = 使用简化的文件对话框，以代替系统文件对话框。
filesConfigurationTitle = 文件
formatOnSave = 在保存时格式化文件。格式化程序必须可用，延迟后文件不能保存，并且编辑器不能关闭。
formatOnSaveTimeout = 在保存文件时进行格式化的超时时间，以毫秒为单位。
hotExit = 是否在会话间记住未保存的文件，以允许在退出编辑器时跳过保存提示。
hotExit.off = 禁用热退出。
hotExit.onExit = 在关闭所有窗口（macOS 除外），或触发 `workbench.action.quit` 命令时进行热退出。下次启动时将还原所有已备份的窗口。
hotExit.onExitAndWindowClose = 在关闭所有窗口（macOS 除外），或触发 `workbench.action.quit` 命令时引起应用程序关闭。对于任何有文件夹打开的窗口，则不论该窗口是否是最后一个窗口进行热退出。下次启动时将还原所有未打开文件夹的窗口。若要还原打开有文件夹的窗口，请将 `#window.restoreWindows#` 设置为 `all`。
hotExit.onExitAndWindowCloseBrowser = 当退出浏览器或关闭网页时，触发热退出。
insertFinalNewline = 启用后，保存文件时在文件末尾插入一个最终新行。
maxMemoryForLargeFilesMB = 在打开大型文件时，VS Code 可在重启后使用的内存。在命令行中指定 `--max-memory=新的大小` 参数可达到相同效果。
miViewExplorer = 资源(&&E)
openEditorsVisible = 在“打开的编辑器”视图中显示的编辑器数量。
showExplorerViewlet = 显示“资源”面板
simple = 在重复名称的末尾添加单词“copy”，后面可能跟一个数字。
smart = 在重复名称的末尾添加一个数字。如果名称以数字结尾，则增大该数字。
sortOrder = 文件和文件夹在“资源”面板中如何排列。
sortOrder.default = 按名称的字母顺序排列，文件夹显示在文件前。
sortOrder.filesFirst = 按名称的字母顺序排列，文件显示在文件夹前。
sortOrder.mixed = 按名称的字母顺序排列，两者穿插显示。
sortOrder.modified = 按修改日期从新到旧排列，文件夹显示在文件前。
sortOrder.type = 按扩展名的字母顺序排列，文件夹显示在文件前。
trimFinalNewlines = 启用后，保存文件时将删除在最终新行后的所有新行。
trimTrailingWhitespace = 启用后，将在保存文件时剪裁尾随空格。
useTrash = 在删除文件或文件夹时，将它们移动到操作系统的回收站中。禁用此设置将永久删除文件或文件夹。
view = 视图
watcherExclude = 配置文件路径的 glob 模式以从文件监视排除。模式必须在绝对路径上匹配（例如 ** 前缀或完整路径需正确匹配）更改此设置需要重启。如果在启动时遇到 VS Code 消耗大量 CPU 时间，则可以排除大型文件夹以减少初始加载。

[vs/workbench/contrib/files/browser/saveErrorHandler]
compareChanges = 比较
discard = 放弃
dontShowAgain = 不再显示
genericSaveError = 未能保存“{0}”：{1}
learnMore = 了解详细信息
overwrite = 覆盖
overwriteElevated = 以管理员身份覆盖…
overwriteElevatedSudo = 以 sudo 身份覆盖…
permissionDeniedSaveError = 保存“{0}”失败：权限不足。选择“以管理员身份覆盖…”可以管理员身份重试。
permissionDeniedSaveErrorSudo = 保存“{0}”失败：权限不足。选择“以 sudo 身份重试…”可以超级用户身份重试。
readonlySaveError = 保存“{0}”失败：文件为只读。可选择“覆盖”以尝试使其可写。
readonlySaveErrorAdmin = 保存“{0}”失败：文件为只读。选择“以管理员身份覆盖…”可以管理员身份重试。
readonlySaveErrorSudo = 保存“{0}”失败：文件为只读。选择“以 sudo 身份重试…”可以超级用户身份重试。
retry = 重试
saveConflictDiffLabel = {0}（硬盘上）↔ {1}（{2} 中）- 解决保存的冲突
saveElevated = 以管理员身份重试…
saveElevatedSudo = 以 sudo 身份重试…
staleSaveError = 未能保存“{0}”：硬盘上的内容较新。请将您的版本和硬盘上的版本进行比较。
userGuide = 使用编辑器工具栏中的操作撤消更改或覆盖硬盘上的内容

[vs/workbench/contrib/files/browser/views/emptyView]
addFolder = 添加文件夹
connecting = 正在连接…
explorerSection = “资源”面板
noFolderHelp = 尚未打开文件夹。
noWorkspace = 无打开的文件夹
noWorkspaceHelp = 您还没有在工作区中添加文件夹。
openFolder = 打开文件夹
remoteNoFolderHelp = 已连接到 {0}

[vs/workbench/contrib/files/browser/views/explorerDecorationsProvider]
canNotResolve = 未能解析工作区文件夹
label = 资源
symbolicLlink = 符号链接

[vs/workbench/contrib/files/browser/views/explorerView]
explorerSection = “文件”视图
treeAriaLabel = “文件”视图

[vs/workbench/contrib/files/browser/views/explorerViewer]
addFolder = 添加文件夹(&&A)
addFolders = 添加文件夹(&&A)
cancel = 取消
confirmMove = 是否确实要移动“{0}”？
confirmMultiMove = 是否移动以下 {0} 个文件？
confirmOverwrite = 目标文件夹中已存在具有相同名称的文件或文件夹。是否替换它？
confirmOverwriteMessage = 目标文件夹中已存在“{0}”。是否将其替换？
confirmRootMove = 是否要更改工作区中根文件夹“{0}”的顺序？
confirmRootsMove = 是否要更改工作区中根文件夹的顺序？
copyFolder = 拷贝文件夹(&&C)
copyFolders = 拷贝文件夹(&&C)
copyfolder = 是否要拷贝文件夹“{0}”？
copyfolders = 是否要拷贝文件夹？
doNotAskAgain = 不再询问
dropFolder = 要拷贝文件夹“{0}”，还是要将它添加到工作区？
dropFolders = 要拷贝文件夹，还是要将它们添加到工作区？
fileInputAriaLabel = 输入文件名。按 Enter 键确认，按 Esc 键取消。
irreversible = 此操作不可逆！
moveButtonLabel = 移动(&&M)
replaceButtonLabel = 替换(&&R)

[vs/workbench/contrib/files/browser/views/openEditorsView]
dirtyCounter = {0} 个未保存
openEditors = 打开的编辑器
openEditosrSection = 打开的编辑器部分

[vs/workbench/contrib/files/common/dirtyFilesTracker]
dirtyFile = 1 个未保存的文件
dirtyFiles = {0} 个未保存的文件

[vs/workbench/contrib/files/common/editors/fileEditorInput]
orphanedFile = {0}（已删除）
readonlyFile = {0}（只读）

[vs/workbench/contrib/files/common/workspaceWatcher]
enospcError = 未能在大型工作区中监视文件更改。请按照说明链接来解决此问题。
installNet = 下载 .NET Framework 4.5
learnMore = 说明
netVersionError = 需要微软.NET Framework 4.5。请访问链接安装它。

[vs/workbench/contrib/files/electron-browser/fileActions.contribution]
filesCategory = 文件
openContainer = 打开所在的文件夹
revealInMac = 在访达中显示
revealInWindows = 在 Windows 资源管理器中显示

[vs/workbench/contrib/files/electron-browser/fileCommands]
openFileToReveal = 打开文件以显示

[vs/workbench/contrib/files/electron-browser/files.contribution]
textFileEditor = 文本文件编辑器

[vs/workbench/contrib/files/electron-browser/textFileEditor]
configureMemoryLimit = 配置内存限制
relaunchWithIncreasedMemoryLimit = 以 {0}MB 内存重启

[vs/workbench/contrib/format/browser/formatActionsMultiple]
config = 配置默认格式化程序…
config.bad = 扩展“{0}”配置为格式化程序，但不可用。选择其他默认格式化程序以继续。
config.needed = {0} 文件有多个格式化程序。选择一个默认格式化程序以继续操作。
def = （默认值）
do.config = 配置…
format.placeHolder = 选择格式化程序
formatDocument.label.multiple = 格式化文档，方法是使用…
formatSelection.label.multiple = 格式选择与…
formatter.default = 定义一个默认格式化程序，该格式化程序优先于所有其他格式化程序设置。应是提供格式化程序的扩展的标识符。
miss = 扩展“{0}”未能格式化“{1}”
nullFormatterDescription = 没有
select = 为 {0} 文件选择默认格式化程序

[vs/workbench/contrib/format/browser/formatActionsNone]
formatDocument.label.multiple = 设置文档的格式
install.formatter = 安装格式化程序…
no.provider = 当前没有安装“{0}”文件的格式化程序。

[vs/workbench/contrib/issue/electron-browser/issue.contribution]
developer = 开发者
help = 帮助
reportIssueInEnglish = 报告问题

[vs/workbench/contrib/issue/electron-browser/issueActions]
openProcessExplorer = 打开进程管理器
reportPerformanceIssue = 报告性能问题

[vs/workbench/contrib/localizations/browser/localizations.contribution]
activateLanguagePack = 需要重新启动 VS Code 以将用户界面语言更改为 {0}。
neverAgain = 不再显示
restart now = 重新启动
updateLocale = 是否将 VS Code 的界面语言更换为 {0} 并重新启动？
vscode.extension.contributes.localizations = 向编辑器提供本地化内容
vscode.extension.contributes.localizations.languageId = 显示字符串翻译的目标语言标识符。
vscode.extension.contributes.localizations.languageName = 语言的英语名称。
vscode.extension.contributes.localizations.languageNameLocalized = 提供语言的名称。
vscode.extension.contributes.localizations.translations = 与语言关联的翻译的列表。
vscode.extension.contributes.localizations.translations.id = 使用此翻译的 VS Code 或扩展的标识符。VS Code 的标识符为“vscode”，扩展的标识符的格式为“publisherId.extensionName”。
vscode.extension.contributes.localizations.translations.id.pattern = 翻译 VS Code 或者扩展，标识符分别应为“vscode”或格式为“publisherId.extensionName”。
vscode.extension.contributes.localizations.translations.path = 包含语言翻译的文件的相对路径。
yes = 是

[vs/workbench/contrib/localizations/browser/localizationsActions]
chooseDisplayLanguage = 选择显示语言
configureLocale = 配置显示语言
installAdditionalLanguages = 安装其他语言…
relaunchDisplayLanguageDetail = 点击重新启动按钮来重新启动 {0} 并更改显示语言。
relaunchDisplayLanguageMessage = 需要重新启动 VS Code 以更改用户界面语言。
restart = 重新启动(&&R)

[vs/workbench/contrib/localizations/browser/minimalTranslations]
installAndRestart = 安装并重新启动
installAndRestartMessage = 安装语言包并将显示语言更改为 {0}。
searchMarketplace = 搜索商店
showLanguagePackExtensions = 在商店中搜索语言包并将显示语言更改为 {0}。

[vs/workbench/contrib/logs/common/logs.contribution]
developer = 开发者
mainLog = 主进程
rendererLog = 窗口
sharedLog = 共享进程
telemetryLog = 遥测
userDataSyncLog = 配置同步

[vs/workbench/contrib/logs/common/logsActions]
critical = 严重
current = 当前
debug = 调试
default = 默认值
default and current = 默认、当前
err = 错误
info = 信息
log placeholder = 选择日志文件
off = 关
openSessionLogFile = 打开当前日志文件…
selectLogLevel = 选择日志级别
sessions placeholder = 选择会话
setLogLevel = 设置日志级别…
trace = 跟踪
warn = 警告

[vs/workbench/contrib/logs/electron-browser/logs.contribution]
developer = 开发者

[vs/workbench/contrib/logs/electron-browser/logsActions]
openLogsFolder = 打开日志文件夹…

[vs/workbench/contrib/markers/browser/markers]
totalProblems = 总计 {0} 个问题

[vs/workbench/contrib/markers/browser/markers.contribution]
copyMarker = 拷贝
copyMessage = 拷贝消息
manyProblems = 多于 1 万
miMarker = 问题(&&P)
noProblems = 没有问题
problems = 问题
show multiline = 在多行中显示消息
show singleline = 在单行中显示消息
status.problems = 问题
totalErrors = {0} 条错误
totalInfos = {0} 条信息
totalWarnings = {0} 条警告

[vs/workbench/contrib/markers/browser/markersFileDecorations]
label = 问题
markers.showOnFile = 在文件和文件夹上显示错误和警告。
tooltip.1 = 此文件存在 1 个问题
tooltip.N = 此文件存在 {0} 个问题

[vs/workbench/contrib/markers/browser/markersPanel]
No problems filtered = 显示 {0} 个问题
clearFilter = 清除筛选。
collapseAll = 全部折叠
disableFilesExclude = 禁用排除的文件筛选器。
problems filtered = 显示第 {0} 个（共 {1} 个）问题

[vs/workbench/contrib/markers/browser/markersPanelActions]
showing filtered problems = 显示 {0} / {1}

[vs/workbench/contrib/markers/browser/markersTreeViewer]
multi line = 在多行中显示消息
single line = 在单行中显示消息

[vs/workbench/contrib/markers/browser/messages]
errors.warnings.show.label = 显示错误和警告
markers.panel.action.donotUseFilesExclude = 不使用文件排除设置
markers.panel.action.filter = 筛选器问题
markers.panel.action.quickfix = 显示修复方案
markers.panel.action.useFilesExclude = 使用文件排除设置进行筛选
markers.panel.at.ln.col.number = [{0}, {1}]
markers.panel.filter.ariaLabel = 筛选器问题
markers.panel.filter.errors = 错误
markers.panel.filter.infos = 信息
markers.panel.filter.placeholder = 筛选。例如 text, **/*.ts, !**/node_modules/**
markers.panel.filter.warnings = 警告
markers.panel.multiple.errors.label = {0} 条错误
markers.panel.multiple.infos.label = {0} 条信息
markers.panel.multiple.unknowns.label = {0} 条未归类问题
markers.panel.multiple.warnings.label = {0} 条警告
markers.panel.no.problems.build = 没有问题。
markers.panel.no.problems.file.exclusions = 未排除的文件中没有问题。
markers.panel.no.problems.filters = 没有符合筛选条件的问题。
markers.panel.single.error.label = 1 条错误
markers.panel.single.info.label = 1 条信息
markers.panel.single.unknown.label = 1 条未归类问题
markers.panel.single.warning.label = 1 条警告
markers.panel.title.problems = 问题
problems.panel.configuration.autoreveal = 在打开文件时，在“问题”视图中对其进行定位。
problems.panel.configuration.title = 问题预览
problems.tree.aria.label.error.marker = {0} 生成的错误：行 {2}，列 {3}，{1}。{4}
problems.tree.aria.label.error.marker.nosource = 错误：行 {1}，列 {2}，{0}。{3}
problems.tree.aria.label.info.marker = {0} 生成的信息：行 {2}，列 {3}，{1}。{4}
problems.tree.aria.label.info.marker.nosource = 信息：行 {1}，列 {2}，{0}。{3}
problems.tree.aria.label.marker = {0} 生成的问题：行 {2}，列 {3}，{1}。{4}
problems.tree.aria.label.marker.nosource = 问题：行 {1}，列 {2}，{0}。{3}
problems.tree.aria.label.marker.relatedInformation = 此问题包含对 {0} 个位置的引用。
problems.tree.aria.label.relatedinfo.message = {3} 的 行 {1}，列 {2}，{0}
problems.tree.aria.label.resource = 在文件夹 {2} 的文件 {1} 中有 {0} 个问题
problems.tree.aria.label.warning.marker = {0} 生成的警告：行 {2}，列 {3}，{1}。{4}
problems.tree.aria.label.warning.marker.nosource = 警告：行 {1}，列 {2}，{0}。{3}
problems.view.focus.label = 聚焦到问题（错误、警告、信息）
problems.view.toggle.label = 切换问题（错误、警告、信息）视图
viewCategory = 视图

[vs/workbench/contrib/outline/browser/outline.contribution]
filteredTypes.array = 显示数组。
filteredTypes.boolean = 显示布尔。
filteredTypes.class = 显示类。
filteredTypes.constant = 显示常量。
filteredTypes.constructor = 显示构造函数。
filteredTypes.enum = 显示枚举。
filteredTypes.enumMember = 显示枚举成员。
filteredTypes.event = 显示事件。
filteredTypes.field = 显示字段。
filteredTypes.file = 显示文件。
filteredTypes.function = 显示函数。
filteredTypes.interface = 显示接口。
filteredTypes.key = 显示键。
filteredTypes.method = 显示方法。
filteredTypes.module = 显示模块。
filteredTypes.namespace = 显示命名空间。
filteredTypes.null = 显示 null。
filteredTypes.number = 显示数字。
filteredTypes.object = 显示对象。
filteredTypes.operator = 显示运算符。
filteredTypes.package = 显示包。
filteredTypes.property = 显示属性。
filteredTypes.string = 显示字符串。
filteredTypes.struct = 显示结构。
filteredTypes.typeParameter = 显示类型参数。
filteredTypes.variable = 显示变量。
name = 大纲
outline.problem.colors = 使用颜色表示错误和警告。
outline.problems.badges = 使用错误和警告的徽章。
outline.showIcons = 显示大纲元素的图标。
outline.showProblem = 显示大纲元素上的错误和警告。
outlineConfigurationTitle = 大纲

[vs/workbench/contrib/outline/browser/outlinePanel]
collapse = 全部折叠
filterOnType = 在输入时筛选
followCur = 跟随光标
loading = 正在加载“{0}”的文档符号…
no-editor = 活动编辑器没有大纲信息。
no-symbols = 在文档“{0}”中找不到符号
sortByKind = 排序方式：类型
sortByName = 排序依据：名称
sortByPosition = 排序依据：位置

[vs/workbench/contrib/output/browser/output.contribution]
clearOutput.label = 清除输出
developer = 开发者
logViewer = 日志查看器
miToggleOutput = 输出(&&O)
openActiveLogOutputFile = 打开活动日志输出文件
output = 输出
viewCategory = 视图

[vs/workbench/contrib/output/browser/outputActions]
clearOutput = 清除输出
logChannel = 日志（{0}）
openInLogViewer = 打开日志文件
openLogFile = 打开日志文件…
outputChannels = 输出通道。
outputCleared = 输出被清除
outputScrollOff = 关闭自动滚动
outputScrollOn = 打开自动滚动
selectlog = 选择日志
selectlogFile = 选择日志文件
showLogs = 显示日志…
switchToOutput.label = 切换到输出
toggleOutput = 切换输出
toggleOutputScrollLock = 切换输出滚动锁定

[vs/workbench/contrib/output/browser/outputPanel]
output = 输出
outputPanelAriaLabel = 输出面板
outputPanelWithInputAriaLabel = {0}，输出面板

[vs/workbench/contrib/output/browser/outputServices]
channel = “{0}”的输出通道
output = {0} - 输出

[vs/workbench/contrib/performance/electron-browser/performance.contribution]
show.cat = 开发者
show.label = 启动性能

[vs/workbench/contrib/performance/electron-browser/perfviewEditor]
name = 启动性能

[vs/workbench/contrib/performance/electron-browser/startupProfiler]
prof.detail = 请创建问题并手动附加以下文件：\n{0}
prof.detail.restart = 需要重新启动才能继续使用“{0}”。再次感谢您的贡献。
prof.message = 成功创建的配置文件。
prof.restart = 重启
prof.restartAndFileIssue = 创建问题并重启
prof.thanks = 感谢您的帮助。

[vs/workbench/contrib/preferences/browser/keybindingWidgets]
defineKeybinding.chordsTo = 加上
defineKeybinding.existing = 已有 {0} 条命令的快捷键与此相同
defineKeybinding.initial = 先按所需的组合键，再按 Enter 键。
defineKeybinding.oneExists = 已有 1 条命令的快捷键与此相同

[vs/workbench/contrib/preferences/browser/keybindingsEditor]
SearchKeybindings.FullTextSearchPlaceholder = 在此键入搜索快捷键
SearchKeybindings.KeybindingsSearchPlaceholder = 正在录制按键。按 Esc 键退出
addKeybindingLabel = 添加快捷键
addKeybindingLabelWithKey = 添加快捷键 {0}
addLabel = 添加快捷键
changeLabel = 更改快捷键
clearInput = 清除快捷键搜索输入内容
command = 命令
commandAriaLabel = 命令为 {0}。
copyCommandLabel = 拷贝命令
copyLabel = 拷贝
editKeybindingLabel = 更改快捷键
editKeybindingLabelWithKey = 更改快捷键 {0}
editWhen = 更改 `when` 表达式
error = 编辑快捷键时发生错误“{0}”。请打开“keybindings.json”文件并检查错误。
keybinding = 快捷键
keybindingAriaLabel = 快捷键为 {0}。
keybindingsLabel = 快捷键
noKeybinding = 未分配快捷键。
noWhen = 没有时间上下文。
recordKeysLabel = 录制按键
recordKeysLabelWithKeybinding = {0}（{1}）
recording = 正在录制按键
removeLabel = 删除快捷键
resetLabel = 重置快捷键
show keybindings = 按字母顺序显示 {0} 个快捷键
show sorted keybindings = 按优先级顺序显示 {0} 个快捷键
showSameKeybindings = 显示相同的快捷键
sortByPrecedeneLabel = 按优先级排序
sortByPrecedeneLabelWithKeybinding = {0}（{1}）
source = SOURCE
sourceAriaLabel = 源为 {0}。
title = {0}（{1}）
when = 当
whenAriaLabel = 时间为 {0}。
whenContextInputAriaLabel = 请键入 `when` 上下文。按 Enter 键确认，按 Esc 键取消。

[vs/workbench/contrib/preferences/browser/keybindingsEditorContribution]
defineKeybinding.kbLayoutErrorMessage = 在当前键盘布局下未能生成此组合键。
defineKeybinding.kbLayoutLocalAndUSMessage = 在您的键盘布局上为 **{0}**（美国标准布局上为 **{1}**）。
defineKeybinding.kbLayoutLocalMessage = 在您的键盘布局上为 **{0}**。
defineKeybinding.start = 定义快捷键

[vs/workbench/contrib/preferences/browser/preferences.contribution]
defaultPreferencesEditor = 默认设置编辑器
filterModifiedLabel = 显示已修改设置
filterOnlineServicesLabel = 显示在线服务设置
keybindingsEditor = 快捷键
keyboardShortcuts = 快捷键
miOpenKeymap = 按键映射(&&K)
miOpenOnlineSettings = 在线服务设置(&&S)
miOpenSettings = 设置(&&S)
miPreferences = 设置(&&P)
onlineServices = 在线服务设置
openRemoteSettings = 显示远程设置（{0}）
openSettingsJson = 显示设置（JSON）
preferences = 设置
preferencesCategory = 设置
settings = 设置
settingsEditor2 = 设置编辑器
showDefaultKeybindings = 显示默认快捷键
showUserKeybindings = 显示用户快捷键

[vs/workbench/contrib/preferences/browser/preferencesActions]
configureLanguageBasedSettings = 配置语言特定的设置…
languageDescriptionConfigured = （{0}）
openDefaultKeybindingsFile = 打开默认快捷键设置（JSON）
openFolderSettings = 打开文件夹设置
openGlobalKeybindings = 打开快捷键设置
openGlobalKeybindingsFile = 打开快捷键设置（JSON）
openGlobalSettings = 打开用户设置
openRawDefaultSettings = 打开默认设置（JSON）
openSettings2 = 打开设置
openSettingsJson = 打开设置（JSON）
openWorkspaceSettings = 打开工作区设置
pickLanguage = 选择语言

[vs/workbench/contrib/preferences/browser/preferencesEditor]
SearchSettingsWidget.AriaLabel = 搜索设置
SearchSettingsWidget.Placeholder = 搜索设置
defaultEditorReadonly = 在右侧编辑器中编辑以覆盖默认值。
defaultFolderSettings = 默认文件夹设置
defaultSettings = 默认设置
defaultUserSettings = 默认用户设置
defaultWorkspaceSettings = 默认工作区设置
filterResult = 筛选结果
nlpResult = 自然语言结果
noSettingsFound = 没有设置
oneSettingFound = 找到 1 个设置
preferencesAriaLabel = 默认首选项。只读文本编辑器。
settingsFound = 找到 {0} 个设置
totalSettingsMessage = 总计 {0} 个设置

[vs/workbench/contrib/preferences/browser/preferencesRenderers]
copyDefaultValue = 拷贝到设置
editTtile = 编辑
emptyFolderSettingsHeader = 将文件夹设置放在此处以覆盖工作区设置。
emptyUserSettingsHeader = 将设置放在此处以覆盖默认设置。
emptyWorkspaceSettingsHeader = 将设置放在此处以覆盖用户设置。
replaceDefaultValue = 在设置中替换
unknown configuration setting = 未知设置
unsupportedApplicationSetting = 此设置只适用于用户设置。
unsupportedMachineSetting = 此设置只适用于用户设置。
unsupportedRemoteMachineSetting = 此设置只适用于远程设置。
unsupportedWindowSetting = 未能应用此设置。将在直接打开此文件夹时应用。

[vs/workbench/contrib/preferences/browser/preferencesWidgets]
defaultSettings = 将您的设置放入右侧编辑器以覆盖。
folderSettings = 文件夹
noSettingsFound = 没有设置。
settingsSwitcherBarAriaLabel = 设置转换器
userSettings = 用户
userSettingsRemote = 远程
workspaceSettings = 工作区

[vs/workbench/contrib/preferences/browser/settingsEditor2]
SearchSettings.AriaLabel = 搜索设置
clearInput = 清除设置搜索输入
clearSearch = 清除搜索
clearSearchFilters = 清除筛选
moreThanOneResult = 找到 {0} 个设置
noResults = 没有设置
oneResult = 找到 1 个设置
settingsContextMenuAriaShortcut = 更多操作，请按 {0}。
settingsNoSaveNeeded = 将在您编辑时自动保存所作的更改。

[vs/workbench/contrib/preferences/browser/settingsLayout]
appearance = 外观
application = 应用程序
breadcrumbs = 面包屑
comments = 评论
commonlyUsed = 常用设置
configuration sync = 配置同步
cursor = 光标
debug = 调试
diffEditor = 差异
editorManagement = 视图
extensionViewlet = 扩展
features = 功能
fileExplorer = 资源
files = 文件
find = 查找
font = 字体
formatting = 格式化
keyboard = 键盘
minimap = 小地图
newWindow = 新建窗口
problems = 问题
proxy = 代理服务器
remote = 远程
scm = 版本
screencastMode = 投屏模式
search = 搜索
settings = 设置编辑器
suggestions = 建议
task = 任务
telemetry = 遥测
terminal = 终端
textEditor = 编辑器
update = 更新
window = 窗口
workbench = 工作台
zenMode = 禅模式

[vs/workbench/contrib/preferences/browser/settingsTree]
alsoConfiguredIn = 同时修改于
configuredIn = 修改于
copySettingAsJSONLabel = 拷贝设置为 JSON 项
copySettingIdLabel = 拷贝设置标识符
editInSettingsJson = 在“settings.json”中编辑
extensions = 扩展
modified = 已修改
newExtensionsButtonLabel = 显示匹配的扩展
resetSettingLabel = 恢复默认设置
settings.Default = {0}
settings.Modified = 已修改。
settingsContextMenuTitle = 更多操作…
treeAriaLabel = 设置
validationError = 验证错误。

[vs/workbench/contrib/preferences/browser/settingsTreeModels]
remote = 远程
user = 用户
workspace = 工作区

[vs/workbench/contrib/preferences/browser/settingsWidgets]
addItem = 添加项目
addPattern = 添加模式
cancelButton = 取消
editExcludeItem = 编辑排除项目
editExcludeItemInSettingsJson = 在“settings.json”中编辑排除项目
editItem = 编辑项目
editItemInSettingsJson = 在“settings.json”中编辑项目
excludePatternHintLabel = 排除与“{0}”匹配的文件
excludePatternInputPlaceholder = 排除项的模式…
excludeSiblingHintLabel = 仅当存在匹配“{1}”的文件时，才排除匹配“{0}”的文件
excludeSiblingInputPlaceholder = 当符合此模式的项目存在时…
headerForeground = （预览版设置编辑器）小节标题与活动标题的前景色。
itemInputPlaceholder = 文本…
listSiblingHintLabel = 列出与“${1}”同级的项目“{0}”
listSiblingInputPlaceholder = 同级…
listValueHintLabel = 列出项目“{0}”
modifiedItemForeground = （预览版设置编辑器）已修改设置指示器的颜色。
numberInputBoxBackground = （预览版设置编辑器）设置编辑器数字输入框的背景色。
numberInputBoxBorder = （预览版设置编辑器）设置编辑器数字输入框的边框颜色。
numberInputBoxForeground = （预览版设置编辑器）设置编辑器数字输入框的前景色。
okButton = 确定
removeExcludeItem = 删除排除项
removeItem = 删除项目
settingsCheckboxBackground = （预览版设置编辑器）设置编辑器复选框的背景色。
settingsCheckboxBorder = （预览版设置编辑器）设置编辑器复选框的边框颜色。
settingsCheckboxForeground = （预览版设置编辑器）设置编辑器复选框的前景色。
settingsDropdownBackground = （预览版设置编辑器）设置编辑器下拉列表的背景色。
settingsDropdownBorder = （预览版设置编辑器）设置编辑器下拉列表的边框颜色。
settingsDropdownForeground = （预览版设置编辑器）设置编辑器下拉列表的前景色。
settingsDropdownListBorder = （预览版设置编辑器）设置编辑器下拉列表选项的边框颜色。边框将围绕这些选项，并区分选项与描述。
textInputBoxBackground = （预览版设置编辑器）设置编辑器文本输入框的背景色。
textInputBoxBorder = （预览版设置编辑器）设置编辑器文本输入框的边框颜色。
textInputBoxForeground = （预览版设置编辑器）设置编辑器文本输入框的前景色。

[vs/workbench/contrib/preferences/browser/tocTree]
groupRowAriaLabel = {0}，组

[vs/workbench/contrib/quickopen/browser/commandsHandler]
actionNotEnabled = 在当前上下文中没有启用命令“{0}”。
canNotRun = 命令“{0}”导致了一个错误。
cat.title = {0}：{1}
clearCommandHistory = 清除命令历史记录
entryAriaLabel = {0}，命令
entryAriaLabelWithKey = {0}、{1} ，命令
morecCommands = 其他命令
noCommandsMatching = 没有匹配的命令
recentlyUsed = 最近使用
showCommands.label = 命令栏…
showTriggerActions = 显示所有命令

[vs/workbench/contrib/quickopen/browser/gotoLineHandler]
cannotRunGotoLine = 首先打开文本文件以转到一行。
gotoLine = 转到行…
gotoLineColumnLabel = 转到行 {0} 和字符 {1}。
gotoLineLabel = 转到行 {0}。
gotoLineLabelEmpty = 当前行：{0}。请键入要导航到的行号。
gotoLineLabelEmptyWithLimit = 当前行：{0}。请键入一个要导航到的行号（介于 1 至 {1} 之间）

[vs/workbench/contrib/quickopen/browser/gotoSymbolHandler]
_constructor = 构造函数（{0}）
array = 数组（{0}）
boolean = 布尔值（{0}）
cannotRunGotoSymbol = 首先打开文本文件以转到符号
cannotRunGotoSymbolInFile = 没有该文件的任何符号信息
class = 类（{0}）
constant = 常量（{0}）
entryAriaLabel = {0}，符号
enum = 枚举（{0}）
enumMember = 枚举成员（{0}）
event = 事件（{0}）
field = 字段（{0}）
file = 文件（{0}）
function = 函数（{0}）
gotoSymbol = 转到文件中的符号…
gotoSymbolHandlerAriaLabel = 键入以减少当前活动编辑器的符号
interface = 接口（{0}）
key = 键（{0}）
method = 方法（{0}）
modules = 模块（{0}）
namespace = 命名空间（{0}）
noSymbolsFound = 找不到符号
noSymbolsMatching = 没有匹配的符号
number = 编号（{0}）
object = 对象（{0}）
operator = 运算符（{0}）
package = 包（{0}）
property = 属性（{0}）
string = 字符串（{0}）
struct = 结构（{0}）
symbols = 符号（{0}）
typeParameter = 类型参数（{0}）
variable = 变量（{0}）

[vs/workbench/contrib/quickopen/browser/helpHandler]
editorCommands = 编辑器命令
entryAriaLabel = {0}，选取器帮助
globalCommands = 全局命令

[vs/workbench/contrib/quickopen/browser/quickopen.contribution]
commandPalette = 命令栏…
commandsHandlerDescriptionDefault = 显示并运行命令
gotoLineDescriptionMac = 转到行
gotoLineDescriptionWin = 转到行
gotoSymbolDescription = 转到文件中的符号
gotoSymbolDescriptionScoped = 按类别转到文件中的符号
helpDescription = 显示帮助
miCommandPalette = 命令栏(&&C)…
miGotoLine = 转到行和列(&&L)…
miGotoSymbolInFile = 转到文件中的符号(&&S)…
miOpenView = 打开视图(&&O)…
view = 视图
viewPickerDescription = 打开视图

[vs/workbench/contrib/quickopen/browser/viewPickerHandler]
channels = 输出
entryAriaLabel = {0}，选择视图
logChannel = 日志（{0}）
openView = 打开视图
panels = 底边栏
quickOpenView = “快速打开”视图
terminalTitle = {0}：{1}
terminals = 终端
views = 侧边栏

[vs/workbench/contrib/relauncher/browser/relauncher.contribution]
relaunchSettingDetail = 点击“重启”按钮以重新启动 {0} 并启用该设置。
relaunchSettingDetailWeb = 点击“重新载入”按钮以重新载入 {0} 并启用该设置。
relaunchSettingMessage = 更改的设置将在重启后生效。
relaunchSettingMessageWeb = 更改的设置将在重新载入后生效。
restart = 重启(&&R)
restartWeb = 重新载入

[vs/workbench/contrib/remote/browser/remote]
RemoteHelpInformationExtPoint = 为远程提供帮助信息
RemoteHelpInformationExtPoint.documentation = 项目文档页面的 URL
RemoteHelpInformationExtPoint.feedback = 项目反馈报告的 URL
RemoteHelpInformationExtPoint.getStarted = 项目入门页面的 URL
RemoteHelpInformationExtPoint.issues = 项目问题列表的 URL
cancel = 取消
connectionLost = 连接丢失
pickRemoteExtension = 选择要打开的 URL
pickRemoteExtensionToReportIssue = 选择要报告问题的扩展
reconnectNow = 立即重新连接
reconnectionPermanentFailure = 重新连接失败。请重新加载窗口。
reconnectionRunning = 尝试重新连接…
reconnectionWaitMany = 在 {0} 秒后尝试重新连接…
reconnectionWaitOne = 在 {0} 秒后尝试重新连接…
reloadWindow = 重新加载窗口
remote.explorer = 远程资源管理器
remote.help = 帮助和反馈
remote.help.documentation = 阅读文档
remote.help.feedback = 提供反馈
remote.help.getStarted = 入门
remote.help.issues = 查看问题
remote.help.report = 报告问题
toggleRemoteViewlet = 显示远程资源管理器
view = 视图

[vs/workbench/contrib/remote/common/remote.contribution]
remoteExtensionLog = 远程服务器

[vs/workbench/contrib/remote/electron-browser/remote.contribution]
cat.title = {0}：{1}
closeRemote.title = 关闭远程连接
disconnectedFrom = 关闭连接
host.open = $(sync~spin) 正在开启连接…
host.tooltip = 正在编辑 {0}
host.tooltipDisconnected = 与 {0} 关闭连接
miCloseRemote = 关闭远程连接(&&L)
noHost.tooltip = 打开远程窗口
remote = 远程
remote.category = 远程
remote.close = 关闭远程连接
remote.extensionKind = 指定扩展的类型。可以控制扩展应在本地运行还是在远程运行。
remote.showMenu = 显示远程菜单
status.host = 远程宿主
ui = 用户界面扩展。在远程窗口中，用户界面扩展只在本地启用。
workspace = 工作区扩展。在远程窗口中，用户界面扩展只在远程启用。

[vs/workbench/contrib/scm/browser/activity]
scmPendingChangesBadge = {0} 个挂起的更改
status.scm = 源代码管理（{0}）：{1}

[vs/workbench/contrib/scm/browser/dirtydiffDecorator]
change = 第 {0} 个更改，共 {1} 个
changes = 第 {0} 个更改，共 {1} 个
editorGutterAddedBackground = 编辑器行号栏中已插入行的背景色。
editorGutterDeletedBackground = 编辑器行号栏中被删除行的背景色。
editorGutterModifiedBackground = 编辑器行号栏中被修改行的背景色。
miGotoNextChange = 下一个更改(&&C)
miGotoPreviousChange = 上一个更改(&&C)
move to next change = 移动到下一个更改
move to previous change = 移动到上一个更改
overviewRulerAddedForeground = 概览标尺中已增加内容的颜色。
overviewRulerDeletedForeground = 概览标尺中已删除内容的颜色。
overviewRulerModifiedForeground = 概览标尺中已修改内容的颜色。
show next change = 显示下一个更改
show previous change = 显示上一个更改

[vs/workbench/contrib/scm/browser/mainPanel]
scm providers = 源代码管理提供程序

[vs/workbench/contrib/scm/browser/repositoryPanel]
toggleViewMode = 切换视图模式

[vs/workbench/contrib/scm/browser/scm.contribution]
alwaysShowActions = 在“版本”面板中始终显示内联操作。
alwaysShowProviders = 始终显示“源代码管理提供程序”子面板。
autoReveal = 在打开文件时是否应自动显示和选择文件。
diffDecorations = 编辑器中差异的显示效果。
diffGutterWidth = 编辑器行号栏中不同装饰的宽度，以像素为单位（添加和修改）。
miViewSCM = 版本(&&C)
providersVisible = 在“源代码管理提供程序”子面板中可见的提供程序数。设置为 `0` 表示手动调整视图的大小。
scm accept = 源代码管理：接受输入
scm.countBadge = 显示源代码管理计数徽章。
scm.countBadge.all = 显示所有源代码管理程序的计数的总和。
scm.countBadge.focused = 显示聚焦的源代码管理提供程序的计数。
scm.countBadge.off = 不显示源代码管理计数徽章。
scm.defaultViewMode = 源代码管理中存储库的样式。
scm.defaultViewMode.list = 显示为列表。
scm.defaultViewMode.tree = 显示为树。
scm.diffDecorationsGutterVisibility = 显示行号槽中源代码管理差异装饰器。
scm.diffDecorationsGutterVisibility.always = 始终显示差异装饰器。
scm.diffDecorationsGutterVisibility.hover = 仅在悬停时显示差异装饰器。
scmConfigurationTitle = 版本
source control = 版本
toggleGitViewlet = 显示 Git
toggleSCMViewlet = 显示版本
view = 视图

[vs/workbench/contrib/scm/browser/scmViewlet]
no open repo = 当前没有源代码管理提供程序进行注册。
source control = 版本
viewletTitle = {0}：{1}

[vs/workbench/contrib/search/browser/openAnythingHandler]
fileAndTypeResults = 文件和符号结果
fileResults = 文件结果

[vs/workbench/contrib/search/browser/openFileHandler]
entryAriaLabel = {0}，文件选取器
searchResults = 搜索结果

[vs/workbench/contrib/search/browser/openSymbolHandler]
entryAriaLabel = {0}，符号选取器
noSymbolsMatching = 没有匹配的符号
noSymbolsWithoutInput = 键入以搜索符号
symbols = 符号结果

[vs/workbench/contrib/search/browser/patternInputWidget]
defaultLabel = 输入
useExcludesAndIgnoreFilesDescription = 使用“排除设置”与“忽略文件”

[vs/workbench/contrib/search/browser/replaceService]
fileReplaceChanges = {0} ↔ {1}（替换预览）

[vs/workbench/contrib/search/browser/search.contribution]
clearSearchHistoryLabel = 清除搜索历史记录
copyAllLabel = 全部拷贝
copyMatchLabel = 拷贝
copyPathLabel = 拷贝路径
exclude = 配置在搜索中排除的文件和文件夹的 glob 模式。已经继承 `#files.exclude#` 设置的所有 glob 模式。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)阅读有关 glob 模式的详细信息。
exclude.boolean = 匹配文件路径所依据的 glob 模式。设置为 `true` 或 `false` 可启用或禁用该模式。
exclude.when = 对匹配文件的同级文件的其他检查。使用 $(basename) 作为匹配文件名的变量。
findInFiles = 在文件中查找
findInFolder = 在文件夹中查找…
findInWorkspace = 在工作区中查找…
focusSearchListCommandLabel = 聚焦到列表
miFindInFiles = 在文件中查找(&&I)
miGotoSymbolInWorkspace = 转到工作区中的符号(&&W)…
miReplaceInFiles = 在文件中替换(&&I)
miViewSearch = 搜索(&&S)
name = 搜索
openAnythingHandlerDescription = 转到文件
openSymbolDescriptionNormal = 转到工作区中的符号
revealInSideBar = 在“资源”面板中显示
search = 搜索
search.actionsPosition = 在搜索视图操作栏的位置。
search.actionsPositionAuto = 当搜索视图较窄时将操作栏置于右侧，当搜索视图较宽时，将它紧接在内容之后。
search.actionsPositionRight = 始终将操作栏放置在右侧。
search.collapseAllResults = 是折叠还是展开搜索结果。
search.followSymlinks = 在搜索中跟踪符号链接。
search.globalFindClipboard = 搜索时读取或修改 macOS 的共享查找粘贴板。
search.location = 使“搜索”面板显示在侧边栏或底边栏。
search.maintainFileSearchCache = 使搜索服务进程将保持活动状态，而不是在一个小时不活动后关闭。这将使文件搜索缓存保留在内存中。
search.quickOpen.includeHistory = 在“快速打开”的文件结果中包含最近打开的文件。
search.quickOpen.includeSymbols = “快速打开”文件结果中是否包括全局符号搜索的结果。
search.showLineNumbers = 显示搜索结果所在的行号。
search.smartCase = 若搜索词全为小写，则不区分大小写进行搜索，否则区分大小写进行搜索。
search.usePCRE2 = 在文本搜索中使用 pcre2 正则表达式引擎。这允许使用一些高级正则表达式功能，如前瞻和反向引用。
search.useReplacePreview = 在选择或替换匹配项时打开“替换预览”视图。
searchConfigurationTitle = 搜索
showTriggerActions = 转到工作区中的符号…
toggleSearchViewPositionLabel = 切换搜索视图位置
useGlobalIgnoreFiles = 在搜索文件时使用全局“.gitignore”和“.ignore”文件。
useIgnoreFiles = 在搜索文件时使用“.gitignore”和“.ignore”文件。
usePCRE2Deprecated = 已弃用：当使用仅支持 PCRE2 的正则表达式功能时，将自动使用 PCRE2。
useRipgrep = 已弃用：请改用 `search.usePCRE2`。
useRipgrepDeprecated = 已弃用：请改用 `search.usePCRE2` 获取对高级正则表达式功能的支持。
view = 视图

[vs/workbench/contrib/search/browser/searchActions]
CancelSearchAction.label = 取消搜索
ClearSearchResultsAction.label = 清除搜索结果
CollapseDeepestExpandedLevelAction.label = 全部折叠
FocusNextSearchResult.label = 聚焦到下一搜索结果
FocusPreviousSearchResult.label = 聚焦到上一搜索结果
RefreshAction.label = 刷新
RemoveAction.label = 消除
file.replaceAll.label = 全部替换
match.replace.label = 替换
replaceInFiles = 在文件中替换
showSearch = 显示搜索

[vs/workbench/contrib/search/browser/searchPanel]
search = 搜索

[vs/workbench/contrib/search/browser/searchResultsView]
fileMatchAriaLabel = 文件夹 {2} 的文件 {1} 中有 {0} 个匹配项，搜索结果
folderMatchAriaLabel = 根目录 {1} 中找到 {0} 个匹配，搜索结果
lineNumStr = 位于第 {0} 行
numLinesStr = 其他 {0} 行
otherFilesAriaLabel = 在工作区外存在 {0} 个匹配，搜索结果
replacePreviewResultAria = 在第 {2} 列替换词组 {0} 为 {1}，同行文本为 {3}
searchFileMatch = 已找到 {0} 个文件
searchFileMatches = 已找到 {0} 个文件
searchFolderMatch.other.label = 其他文件
searchMatch = 已找到 {0} 个匹配项
searchMatches = 已找到 {0} 个匹配项
searchResultAria = 在第 {1} 列找到词组 {0}，同行文本为 {2}

[vs/workbench/contrib/search/browser/searchView]
ariaSearchResultsClearStatus = 搜索结果已清除
ariaSearchResultsStatus = 搜索 {1} 文件中返回的 {0} 个结果
label.excludes = 搜索排除模式
label.includes = 搜索包含模式
moreSearch = 切换搜索详细信息
noResultsExcludes = 除“{0}”外，没有任何结果 -\s
noResultsFound = 没有结果。查看您的设置配置排除，并检查您的“.gitignore”文件-\s
noResultsIncludes = “{0}”中没有任何结果 -\s
noResultsIncludesExcludes = 在“{0}”中找不到结果（“{1}”除外）-\s
openFolder = 打开文件夹
openSettings.learnMore = 了解详细信息
openSettings.message = 打开设置
removeAll.occurrence.file.confirmation.message = 是否将 {1} 文件中出现的 {0} 替换为“{2}”？
removeAll.occurrence.file.message = 已替换 {1} 文件中出现的 {0}。
removeAll.occurrence.files.confirmation.message = 是否将 {1} 文件中出现的 {0} 替换为“{2}”？
removeAll.occurrence.files.message = 已替换 {1} 文件中出现的 {0}。
removeAll.occurrences.file.confirmation.message = 是否将 {1} 文件中出现的 {0} 替换为“{2}”？
removeAll.occurrences.file.message = 已替换 {1} 文件中出现的 {0}。
removeAll.occurrences.files.confirmation.message = 是否将 {1} 个文件中的 {0} 次匹配替换为“{2}”？
removeAll.occurrences.files.message = 已替换 {1} 文件中出现的 {0}。
replaceAll.confirm.button = 替换(&&R)
replaceAll.confirmation.title = 全部替换
replaceAll.occurrence.file.confirmation.message = 替换 {1} 个文件中出现的全部 {0} 处？
replaceAll.occurrence.file.message = 已将 {1} 文件中出现的 {0} 替换为“{2}”。
replaceAll.occurrence.files.confirmation.message = 是否替换 {1} 文件中出现的 {0}？
replaceAll.occurrence.files.message = 已将 {1} 文件中出现的 {0} 替换为“{2}”。
replaceAll.occurrences.file.confirmation.message = 是否替换 {1} 文件中出现的 {0}？
replaceAll.occurrences.file.message = 已将 {1} 文件中出现的 {0} 替换为“{2}”。
replaceAll.occurrences.files.confirmation.message = 是否替换 {1} 文件中出现的 {0}？
replaceAll.occurrences.files.message = 已将 {1} 个文件中出现的 {0} 处替换为“{2}”。
rerunSearch.message = 再次搜索
rerunSearchInAll.message = 在所有文件中再次搜索
search.file.result = {0} 个结果，包含于 {1} 个文件中
search.file.results = {1} 文件中有 {0} 个结果
search.files.result = {1} 文件中有 {0} 个结果
search.files.results = {1} 文件中有 {0} 个结果
searchCanceled = 在找到结果前取消了搜索 -\s
searchMaxResultsWarning = 结果集仅包含所有匹配项的子集。请使您的搜索更加具体，减少结果。
searchPathNotFoundError = 找不到搜索路径：{0}
searchScope.excludes = 排除的文件
searchScope.includes = 要包含的文件
searchView = 搜索
searchWithoutFolder = 尚未打开文件夹。当前仅可搜索打开的文件夹 -\s
useIgnoresAndExcludesDisabled = \s- 排除设置和忽略文件被禁用了

[vs/workbench/contrib/search/browser/searchWidget]
label.Replace = 替换：键入待替换词，然后按 Enter 键预览或按 Esc 键取消
label.Search = 搜索：键入搜索词，然后按 Enter 键搜索或按 Esc 键取消
regexp.backreferenceValidationFailure = 不支持后向引用
search.action.replaceAll.disabled.label = 全部替换（提交搜索以启用）
search.action.replaceAll.enabled.label = 全部替换
search.placeHolder = 搜索
search.replace.placeHolder = 替换
search.replace.toggle.button.title = 切换替换

[vs/workbench/contrib/search/common/queryBuilder]
search.noWorkspaceWithName = 工作区中没有名为“{0}”的文件夹

[vs/workbench/contrib/snippets/browser/configureSnippets]
bad_name1 = 文件名无效
bad_name2 = “{0}”不是有效的文件名
bad_name3 = “{0}”已存在
global.1 = （{0}）
global.scope = （全局）
group.global = 现有代码片段
miOpenSnippets = 用户代码片段(&&S)
name = 代码片段名称
new.folder = 新建“{0}”文件夹的代码片段文件…
new.global = 新建全局代码片段文件…
new.global.sep = 新代码片段
new.global_scope = 全局
new.workspace_scope = {0} 工作区
openSnippet.label = 配置用户代码片段
openSnippet.pickLanguage = 选择代码片段文件或创建代码片段
preferences = 设置
userSnippets = 用户代码片段

[vs/workbench/contrib/snippets/browser/insertSnippet]
sep.extSnippet = 扩展代码片段
sep.userSnippet = 用户代码片段
sep.workspaceSnippet = 工作区代码片段
snippet.suggestions.label = 插入片段

[vs/workbench/contrib/snippets/browser/snippetCompletionProvider]
detail.snippet = {0}（{1}）
snippetSuggest.longLabel = {0}，{1}

[vs/workbench/contrib/snippets/browser/snippets.contribution]
snippetSchema.json = 用户代码片段配置
snippetSchema.json.body = 代码片段的内容。使用 `$1` 和 `${1:defaultText}` 定义光标位置，使用 `$0` 定义最终光标位置。使用 `${varName}` 和 `${varName:defaultText}` 插入变量值，例如 `This is file: $TM_FILENAME`。
snippetSchema.json.default = 空代码片段
snippetSchema.json.description = 代码片段描述。
snippetSchema.json.prefix = 在智能感知中选择代码片段时将使用的前缀
snippetSchema.json.scope = 此代码片段适用语言的名称列表，例如 `"typescript,javascript"`。

[vs/workbench/contrib/snippets/browser/snippetsFile]
source.userSnippet = 用户代码片段
source.userSnippetGlobal = 全局用户代码片段
source.workspaceSnippetGlobal = 工作区代码片段

[vs/workbench/contrib/snippets/browser/snippetsService]
badFile = 未能读取代码片段文件 `{0}`。
badVariableUse = 扩展 `{0}` 中的一个或多个代码片段很可能混淆了片段变量和片段占位符（详细信息请见 https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax）
invalid.language = `contributes.{0}.language` 属性值包含未知语言。提供的值为 {1}
invalid.language.0 = 省略语言时，`contributes.{0}.path` 属性值必须指向一个“.code-snippets”文件。提供的值为 {1}
invalid.path.0 = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
invalid.path.1 = `contributes.{0}.url` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
vscode.extension.contributes.snippets = 贡献代码段。
vscode.extension.contributes.snippets-language = 此代码片段参与的语言标识符。
vscode.extension.contributes.snippets-path = 代码片段文件的路径，相对于扩展文件夹。

[vs/workbench/contrib/stats/electron-browser/workspaceStatsService]
openWorkspace = 打开工作区
selectToOpen = 选择要打开的工作区
selectWorkspace = 选择工作区
workspaceFound = 此文件夹包含工作区文件“{0}”，是否打开？[了解更多]({1})有关工作区文件的详细信息。
workspacesFound = 此文件夹包含多个工作区文件，是否打开？[了解更多]({0})有关工作区文件的详细信息。

[vs/workbench/contrib/surveys/browser/languageSurveys.contribution]
helpUs = 帮助我们改善对 {0} 的支持
neverAgain = 不再显示
remindLater = 稍后提醒
takeShortSurvey = 参与小调查

[vs/workbench/contrib/surveys/browser/nps.contribution]
neverAgain = 不再显示
remindLater = 稍后提醒
surveyQuestion = 是否要参加简短的反馈调查？
takeSurvey = 参加调查

[vs/workbench/contrib/tasks/browser/abstractTaskService]
ConfigureTaskRunnerAction.label = 配置任务
TaskServer.folderIgnored = 由于使用任务版本 0.1.0，文件夹 {0} 将被忽略
TaskServer.noTask = 未定义要执行的任务
TaskService.associate = 关联
TaskService.attachProblemMatcher.continueWithout = 继续而不扫描任务输出
TaskService.attachProblemMatcher.learnMoreAbout = 了解有关扫描任务输出的详细信息
TaskService.attachProblemMatcher.never = 永不扫描任务输出
TaskService.attachProblemMatcher.neverType = 从不扫描 {0} 个任务的任务输出
TaskService.createJsonFile = 使用模板创建“tasks.json”文件
TaskService.defaultBuildTaskExists = {0} 已被标记为默认生成任务
TaskService.defaultTestTaskExists = {0} 已被标记为默认测试任务。
TaskService.fetchingBuildTasks = 正在获取生成任务…
TaskService.fetchingTestTasks = 正在获取测试任务…
TaskService.ignoredFolder = 由于使用任务版本 0.1.0，以下工作区文件夹将被忽略：{0}
TaskService.learnMore = 了解详细信息
TaskService.noBuildTask = 没有找到要运行的生成任务。配置生成任务…
TaskService.noBuildTask1 = 未定义任何生成任务。使用 `isBuildCommand` 属性在“tasks.json”文件中标记任务。
TaskService.noBuildTask2 = 未定义任何生成任务。在“tasks.json”文件中将任务标记为生成任务。
TaskService.noConfiguration = 错误：{0} 任务检测没有提供拥有下列配置的任务：\n{1}\n将忽略此任务。\n
TaskService.noEntryToRun = 没有找到要运行的任务。配置任务…
TaskService.noTaskIsRunning = 没有运行中的任务
TaskService.noTaskRunning = 当前没有运行中的任务
TaskService.noTaskToRestart = 没有要重启的任务
TaskService.noTestTask1 = 未定义任何测试任务。使用 `isTestCommand` 属性在“tasks.json”文件中标记任务。
TaskService.noTestTask2 = 未定义任何测试任务。在“tasks.json”文件中将任务标记为测试任务。
TaskService.noTestTaskTerminal = 没有找到要运行的测试任务。配置任务…
TaskService.noWorkspace = 任务仅在工作区文件夹上可用。
TaskService.notAgain = 不再显示
TaskService.openJsonFile = 打开“tasks.json”文件
TaskService.pickBuildTask = 选择要运行的生成任务
TaskService.pickBuildTaskForLabel = 选择生成任务（未定义默认生成任务）
TaskService.pickDefaultBuildTask = 选择要用作默认生成任务的任务
TaskService.pickDefaultTestTask = 选择要用作默认测试任务的任务
TaskService.pickRunTask = 选择要运行的任务
TaskService.pickShowTask = 选择要显示输出的任务
TaskService.pickTask = 选择要配置的任务
TaskService.pickTestTask = 选择要运行的测试任务
TaskService.taskToRestart = 选择要重启的任务
TaskService.taskToTerminate = 选择要终止的任务
TaskService.template = 选择任务模板
TaskService.terminateAllRunningTasks = 所有正在运行的任务
TaskSystem.active = 当前已有任务正在运行。请先终止它，然后再执行另一项任务。
TaskSystem.activeSame.background = 任务“{0}”已激活，并且处于后台模式。
TaskSystem.activeSame.noBackground = 任务“{0}”已处于活动状态。
TaskSystem.configurationErrors = 错误：提供的任务配置具有验证错误，未能使用。请首先改正错误。
TaskSystem.exitAnyways = 仍然退出(&&E)
TaskSystem.invalidTaskJson = 错误：“tasks.json”文件的内容具有语法错误。请先更正错误然后再执行任务。\n
TaskSystem.invalidTaskJsonOther = 错误： {0} 中的“tasks.json”文件的内容存在语法错误。请在执行任务之前更正它们。
TaskSystem.noHotSwap = 在有活动任务运行时更换任务执行引擎需要重新加载窗口
TaskSystem.noProcess = 启动的任务不再存在。如果任务已生成出后台进程，则退出 VS Code 可能会导致出现孤立的进程。若要避免此情况，请使用等待标记启动最后一个后台进程。
TaskSystem.restartFailed = 未能终止并重启任务 {0}
TaskSystem.runningTask = 存在运行中的任务。要终止它吗？
TaskSystem.slowProvider = {0} 任务提供程序速度很慢。提供 {0} 任务的扩展可能提供禁用该任务的设置，或者您可以禁用所有任务提供程序。
TaskSystem.slowProvider.disableAll = 禁用所有
TaskSystem.slowProvider.dontShow = 不再警告 {0} 个任务
TaskSystem.slowProvider.settings = 设置
TaskSystem.terminateTask = 终止任务(&&T)
TaskSystem.unknownError = 运行任务时出错。请参见任务日志了解详细信息。
TaskSystem.versionSettings = 用户设置中只允许版本为 2.0.0 的任务。
TaskSystem.versionWorkspaceFile = 工作区中只允许 2.0.0 版本的任务。
TasksSystem.locationUserConfig = 用户设置
TasksSystem.locationWorkspaceConfig = 工作区文件
TerminateAction.failed = 未能终止运行中的任务
TerminateAction.label = 终止任务
TerminateAction.noProcess = 启动的进程不再存在。如果任务生成的后台任务退出 VS Code，则可能会导致出现孤立的进程。
configureTask = 配置任务
configured = 已配置的任务
customizeParseErrors = 当前任务配置存在错误。请先更正错误，再自定义任务。
detected = 检测到的任务
moreThanOneBuildTask = 当前“tasks.json”中定义了多个生成任务。正在执行第一个。\n
recentlyUsed = 最近使用的任务
reloadWindow = 重新加载窗口
restartTask = 重启任务
selectProblemMatcher = 选择针对何种错误和警告扫描任务输出
showOutput = 显示输出
taskQuickPick.userSettings = 用户设置
taskService.ignoreingFolder = 将忽略工作区文件夹 {0} 的任务配置。多文件夹工作区任务支持要求所有文件夹使用任务版本 2.0.0\n
taskServiceOutputPrompt = 任务出现错误。请查看输出结果，了解更多详细信息
tasks = 任务
tasksJsonComment = // 有关“tasks.json”文件的格式，请参见\n	// https://go.microsoft.com/fwlink/?LinkId=733558
terminateTask = 终止任务

[vs/workbench/contrib/tasks/browser/quickOpen]
configured = 已配置的任务
customizeTask = 配置任务
detected = 检测到的任务
entryAriaLabel = {0}，任务
recentlyUsed = 最近使用的任务

[vs/workbench/contrib/tasks/browser/runAutomaticTasks]
allow = 允许并运行
disallow = 不允许
openTasks = 打开“tasks.json”
tasks.run.allowAutomatic = 此文件夹已在“tasks.json”中定义任务（{0}）；打开此文件夹时，这些任务将自动运行。是否自动任务在您打开此文件夹时运行？
workbench.action.tasks.allowAutomaticTasks = 允许文件夹中的自动任务
workbench.action.tasks.disallowAutomaticTasks = 禁止文件夹中的自动任务
workbench.action.tasks.manageAutomaticRunning = 管理文件夹中的自动任务

[vs/workbench/contrib/tasks/browser/task.contribution]
BuildAction.label = 运行生成任务
ConfigureDefaultBuildTask.label = 配置默认生成任务
ConfigureDefaultTestTask.label = 配置默认测试任务
ReRunTaskAction.label = 重新运行上一个任务
RestartTaskAction.label = 重启正在运行的任务
RunTaskAction.label = 运行任务
ShowLogAction.label = 显示任务日志
ShowTasksAction.label = 显示运行中的任务
TerminateAction.label = 终止任务
TestAction.label = 运行测试任务
building = 正在生成…
miBuildTask = 运行生成任务(&&B)…
miConfigureBuildTask = 配置默认生成任务(&&F)…
miConfigureTask = 配置任务(&&C)…
miRestartTask = 重启正在运行的任务(&&E)…
miRunTask = 运行任务(&&R)…
miRunningTask = 显示正在运行的任务(&&G)…
miTerminateTask = 终止任务(&&T)…
quickOpen.task = 运行任务
runningTasks = 显示运行中的任务
status.runningTasks = 运行任务
task.autoDetect = 允许所有任务提供程序扩展提供任务。如果运行任务命令速度较慢，则禁用任务提供程序的自动检测可能会有所帮助。单个扩展可以提供设置禁用自动检测。
task.problemMatchers.neverPrompt = 在运行任务时关闭问题匹配器提示。
task.problemMatchers.neverPrompt.array = 包含任务类型布尔对的对象，从不提示有问题的匹配者。
task.problemMatchers.neverPrompt.boolean = 为所有任务设置问题匹配器提示行为。
task.quickOpen.detail = 在“运行任务”快速选取中显示具有详细信息的任务的任务详细信息。
task.quickOpen.history = 任务快速打开对话框中跟踪的最近项目数。
task.quickOpen.skip = 当只有一个任务要选取时是否跳过任务快速选取。
task.slowProviderWarning = 当提供程序速度较慢时是否显示警告。
task.slowProviderWarning.array = 从不显示慢速提供程序警告的任务类型的数组。
task.slowProviderWarning.boolean = 为所有任务设置慢速提供程序警告。
tasksCategory = 任务
tasksConfigurationTitle = 任务

[vs/workbench/contrib/tasks/browser/taskQuickOpen]
noTasksFound = 找不到任务
noTasksMatching = 没有匹配的任务
tasksAriaLabel = 键入要运行的任务的名称

[vs/workbench/contrib/tasks/browser/terminalTaskSystem]
TerminalTaskSystem = 未能使用 cmd.exe 在 UNC 驱动器上执行 shell 命令。
TerminalTaskSystem.nonWatchingMatcher = 任务 {0} 是后台任务，但使用的问题匹配器没有后台模式。
TerminalTaskSystem.terminalName = 任务 - {0}
TerminalTaskSystem.unknownError = 在执行任务时发生未知错误。请参见任务输出日志了解详细信息。
closeTerminal = 按任意键关闭终端。
dependencyFailed = 未能解析在工作区文件夹“{1}”中的依赖任务“{0}”
reuseTerminal = 终端将被任务重用，按任意键关闭。
unknownProblemMatcher = 未能解析问题匹配程序 {0}。此匹配程序将被忽略

[vs/workbench/contrib/tasks/common/jsonSchemaCommon]
JsonSchema.args = 传递到命令的其他参数。
JsonSchema.background = 已执行的任务是否保持活动状态并在后台运行。
JsonSchema.command = 要执行的命令。可以是外部程序或 shell 命令。
JsonSchema.echoCommand = 是否将已执行的命令回显到输出。默认为 `false`。
JsonSchema.matchers = 要使用的问题匹配程序。可以是字符串或问题匹配程序定义，或字符串和问题匹配程序数组。
JsonSchema.options = 其他命令选项
JsonSchema.options.cwd = 已执行程序或脚本的当前工作目录。默认为 VS Code 的工作区根目录。
JsonSchema.options.env = 已执行程序或 shell 的环境变量。默认为父进程的环境变量。
JsonSchema.promptOnClose = 在具有正在运行的后台任务的情况下关闭 VS Code 时是否提示用户。
JsonSchema.shell.args = shell 参数。
JsonSchema.shell.executable = 待使用的 shell。
JsonSchema.shellConfiguration = 配置使用的 shell。
JsonSchema.showOutput = 是否显示运行任务的输出。默认为 `"always"`。
JsonSchema.suppressTaskName = 是否将任务名作为参数添加到命令。默认为 `false`。
JsonSchema.taskSelector = 指示参数是任务的前缀。
JsonSchema.tasks = 任务配置。通常是外部任务运行程序中已定义任务的扩充。
JsonSchema.tasks.args = 在调用此任务时传递给命令的参数。
JsonSchema.tasks.background = 已执行的任务是否保持活动状态并在后台运行。
JsonSchema.tasks.build = 将此任务映射到代码的默认生成命令。
JsonSchema.tasks.linux = Linux 特定的命令配置
JsonSchema.tasks.mac = macOS 特定的命令配置
JsonSchema.tasks.matchers = 要使用的问题匹配程序。可以是字符串或问题匹配程序定义，或字符串和问题匹配程序数组。
JsonSchema.tasks.promptOnClose = 当 VS 代码与运行的任务一起关闭时是否提示用户。
JsonSchema.tasks.showOutput = 是否显示正在运行的任务的输出。如果省略，则使用全局定义的值。
JsonSchema.tasks.suppressTaskName = 是否将任务名作为参数添加到命令。如果省略，则使用全局定义的值。
JsonSchema.tasks.taskName = 任务名称
JsonSchema.tasks.test = 将此任务映射到代码的默认测试命令。
JsonSchema.tasks.watching = 已执行的任务是否保持活动状态，并且是否在监视文件系统。
JsonSchema.tasks.watching.deprecation = 已弃用：请改用 `isBackground`。
JsonSchema.tasks.windows = Windows 特定的命令配置
JsonSchema.watching = 已执行的任务是否保持活动状态，并且是否在监视文件系统。
JsonSchema.watching.deprecation = 已弃用：请改用 `isBackground`。

[vs/workbench/contrib/tasks/common/jsonSchema_v1]
JsonSchema._runner = 此 runner 已完成使命。请使用官方 runner 属性。
JsonSchema.linux = Linux 特定的命令配置
JsonSchema.mac = macOS 特定的命令配置
JsonSchema.runner = 定义任务是否作为进程执行，输出显示在输出窗口还是在终端内。
JsonSchema.shell = 指定命令是 shell 命令还是外部程序。如果省略，默认为 `false`。
JsonSchema.version = 配置的版本号
JsonSchema.version.deprecated = 任务版本 0.1.0 已弃用，请使用 2.0.0。
JsonSchema.windows = Windows 特定的命令配置

[vs/workbench/contrib/tasks/common/jsonSchema_v2]
JsonSchema.args.quotedString.value = 实际参数值。
JsonSchema.args.quotesString.quote = 参数值应该如何引用。
JsonSchema.command = 要执行的命令。可以是外部程序或 shell 命令。
JsonSchema.command.quotedString.value = 实际命令值。
JsonSchema.command.quotesString.quote = 如何引用命令值。
JsonSchema.commandArray = 执行的 shell 命令。数组项将使用空格连接。
JsonSchema.customizations.customizes.type = 要自定义的任务类型。
JsonSchema.linux = Linux 特定的命令配置。
JsonSchema.mac = macOS 特定的命令配置。
JsonSchema.shell = 指定命令是 shell 命令还是外部程序。默认为 `false`。
JsonSchema.tasks.args = 在调用此任务时传递给命令的参数。
JsonSchema.tasks.background = 已执行的任务是否保持活动状态并在后台运行。
JsonSchema.tasks.customize.deprecated = 已弃用：请参见 1.14 发行说明了解如何迁移到新的自定义任务。
JsonSchema.tasks.dependsOn = 表示另一个任务的字符串或此任务所依赖的其他任务的数组。
JsonSchema.tasks.dependsOn.array = 此任务依赖的其他任务。
JsonSchema.tasks.dependsOn.identifier = 任务标识符。
JsonSchema.tasks.dependsOn.string = 此任务依赖的另一任务。
JsonSchema.tasks.dependsOrder = 此任务依赖的其他任务的运行顺序。不可使用递归。
JsonSchema.tasks.dependsOrder.parallel = 并行运行其他任务。
JsonSchema.tasks.dependsOrder.sequence = 串行运行其他任务。
JsonSchema.tasks.detail = 任务的可选说明，在“运行任务”快速选取中作为详细信息显示。
JsonSchema.tasks.echoCommand.deprecated = 已弃用：请改用 `presentation` 属性中的 `echo` 属性。参见 1.14 发行说明。
JsonSchema.tasks.group = 定义此任务属于的执行组。可为 `"build"` 以将其添加到生成组，`"test"` 以将其添加到测试组。
JsonSchema.tasks.group.build = 将任务标记为可通过“运行生成任务”命令访问的生成任务。
JsonSchema.tasks.group.defaultBuild = 将此任务标记为默认生成任务。
JsonSchema.tasks.group.defaultTest = 将此任务标记为默认测试任务。
JsonSchema.tasks.group.isDefault = 定义此任务是否为组中的默认任务。
JsonSchema.tasks.group.kind = 任务的执行组。
JsonSchema.tasks.group.none = 将任务分配为没有组
JsonSchema.tasks.group.test = 将任务标记为测试任务。
JsonSchema.tasks.identifier = 用于在“launch.json”或“dependsOn”子句中引用任务的用户定义标识符。
JsonSchema.tasks.identifier.deprecated = 已弃用用户定义的标识符。对于自定义任务，请使用名称进行引用；对于由扩展提供的任务，请使用其中定义的任务标识符。
JsonSchema.tasks.isBuildCommand.deprecated = 已弃用：请改用 `group` 属性。参见 1.14 发行说明。
JsonSchema.tasks.isShellCommand.deprecated = 已弃用：请改用任务的 `type` 属性和选项中的 `shell` 属性。参见 1.14 发行说明。
JsonSchema.tasks.isTestCommand.deprecated = 已弃用：请改用 `group` 属性。参见 1.14 发行说明。
JsonSchema.tasks.label = 显示给用户的任务标签
JsonSchema.tasks.matchers = 要使用的问题匹配程序。可以是字符串或问题匹配程序定义，或字符串和问题匹配程序数组。
JsonSchema.tasks.presentation = 配置用于显示任务输出和读取输入的面板。
JsonSchema.tasks.presentation.clear = 是否在执行任务之前清除终端。
JsonSchema.tasks.presentation.echo = 是否将执行的命令显示到面板中。默认为 `true`。
JsonSchema.tasks.presentation.focus = 面板是否获取焦点。默认为 `false`。
JsonSchema.tasks.presentation.group = 是否使用拆分窗格在特定终端组中执行任务。
JsonSchema.tasks.presentation.instance = 是否在任务间共享面板。同一个任务使用相同面板还是每次运行时新创建一个面板。
JsonSchema.tasks.presentation.reveal = 是否显示运行任务的面板。适用于 `revealProblems` 选项没有指定时。默认为 `"always"`。
JsonSchema.tasks.presentation.reveal.always = 始终显示面板。
JsonSchema.tasks.presentation.reveal.never = 从不显示面板。
JsonSchema.tasks.presentation.reveal.silent = 只在任务报错并退出，或问题匹配程序发现错误时显示面板。
JsonSchema.tasks.presentation.revealProblems = 在运行任务时是否显示问题面板。优先于 `reveals` 选项。默认为 `"never"`。
JsonSchema.tasks.presentation.revealProblems.always = 始终显示问题面板。
JsonSchema.tasks.presentation.revealProblems.never = 从不显示问题面板。
JsonSchema.tasks.presentation.revealProblems.onProblem = 只在发现问题时显示问题面板。
JsonSchema.tasks.presentation.showReuseMessage = 是否显示“终端将被任务重用，按任意键关闭”提示。
JsonSchema.tasks.promptOnClose = 当 VS 代码与运行的任务一起关闭时是否提示用户。
JsonSchema.tasks.quoting.escape = 使用 shell 的转义字符来转义文本，如 PowerShell 中的 `\\` 和 bash 中的 `\\\\`）
JsonSchema.tasks.quoting.strong = 使用 shell 的强引用字符来引用参数，如 PowerShell 和 bash 中的 `"`）
JsonSchema.tasks.quoting.weak = 使用 shell 的弱引用字符来引用参数，如 PowerShell 和 bash 中的 `'`）
JsonSchema.tasks.reevaluateOnRerun = 是否在重新运行时重新评估任务变量。
JsonSchema.tasks.runOn = 对该任务何时运行进行配置。设置为 `"folderOpen"` 表示那么该任务将在文件夹打开时自动运行。
JsonSchema.tasks.runOptions = 任务的运行相关选项
JsonSchema.tasks.showOutput.deprecated = 已弃用：请改用 `presentation` 属性内的 `reveal` 属性。另请参见 1.14 发行说明。
JsonSchema.tasks.suppressTaskName.deprecated = 已弃用：请改为在任务中内嵌命令及其参数。另请参见 1.14 发行说明。
JsonSchema.tasks.taskLabel = 任务标签
JsonSchema.tasks.taskName = 任务名称
JsonSchema.tasks.taskName.deprecated = 已弃用：请改用 `label`。
JsonSchema.tasks.taskSelector.deprecated = 已弃用：请改为在任务中内嵌命令及其参数。另请参见 1.14 发行说明。
JsonSchema.tasks.terminal = 已弃用：请改用 `presentation`。
JsonSchema.tasks.type = 定义任务是被作为进程运行还是在 shell 中作为命令运行。
JsonSchema.version = 配置的版本号。
JsonSchema.windows = Windows 特定的命令配置

[vs/workbench/contrib/tasks/common/problemMatcher]
LegacyProblemMatcherSchema.watchedBegin = 一个正则表达式，发出受监视任务开始执行（通过文件监视触发）的信号。
LegacyProblemMatcherSchema.watchedBegin.deprecated = 已弃用：请改用 `watching`。
LegacyProblemMatcherSchema.watchedEnd = 一个正则表达式，发出受监视任务结束执行的信号。
LegacyProblemMatcherSchema.watchedEnd.deprecated = 已弃用：请改用 `watching`。
NamedMultiLineProblemPatternSchema.name = 问题多行问题模式的名称。
NamedMultiLineProblemPatternSchema.patterns = 实际模式。
NamedProblemMatcherSchema.label = 显示给用户的问题匹配程序标签。
NamedProblemMatcherSchema.name = 要引用的问题匹配程序的名称。
NamedProblemPatternSchema.name = 问题模式的名称。
PatternTypeSchema.description = 问题模式或者所提供或预定义问题模式的名称。如果已指定 `base`，则可以省略。
PatternTypeSchema.name = 所提供或预定义模式的名称
ProblemMatcherExtPoint = 提供问题匹配程序
ProblemMatcherParser.invalidRegexp = 错误：字符串 {0} 不是有效的正则表达式。\n
ProblemMatcherParser.noDefinedPatter = 错误：标识符为 {0} 的模式不存在。
ProblemMatcherParser.noFileLocation = 错误：描述未定义文件位置：\n{0}\n
ProblemMatcherParser.noIdentifier = 错误：模式属性引用空标识符。
ProblemMatcherParser.noOwner = 错误：描述未指定所有者：\n{0}\n
ProblemMatcherParser.noProblemMatcher = 错误：描述未能转换为问题匹配程序：\n{0}\n
ProblemMatcherParser.noProblemPattern = 错误：描述未定义有效的问题模式：\n{0}\n
ProblemMatcherParser.noValidIdentifier = 错误：模式属性 {0} 是无效的模式变量名。
ProblemMatcherParser.problemPattern.watchingMatcher = 问题匹配程序必须定义监视的开始模式和结束模式。
ProblemMatcherParser.unknownSeverity = 信息：未能识别严重性 `"{0}"`。有效值为 `"error"`、`"warning"` 和 `"info"`。\n
ProblemMatcherSchema.applyTo = 文本文档上报告的问题是否仅应用于打开、关闭或所有文档。
ProblemMatcherSchema.background = 用于跟踪在后台任务上激活的匹配程序的开始和结束的模式。
ProblemMatcherSchema.background.activeOnStart = 在任务开始时激活后台监控。这相当于发出与 `beginPattern` 匹配的行。
ProblemMatcherSchema.background.beginsPattern = 如果在输出内匹配，则会发出后台任务开始的信号。
ProblemMatcherSchema.background.endsPattern = 如果在输出内匹配，则会发出后台任务结束的信号。
ProblemMatcherSchema.base = 要使用的基问题匹配程序的名称。
ProblemMatcherSchema.fileLocation = 定义应如何解释问题模式中报告的文件名。
ProblemMatcherSchema.owner = 代码内问题的所有者。如果指定了 `base`，则可省略。如果省略，并且未指定 `base`，则默认为 `"external"`。
ProblemMatcherSchema.severity = 捕获问题的默认严重性。如果模式未定义严重性的匹配组，则使用。
ProblemMatcherSchema.source = 显示给用户的诊断信息来源，如 `"typescript"` 或 `"super lint"`。
ProblemMatcherSchema.watching = 用于跟踪监视匹配程序开始和结束的模式。
ProblemMatcherSchema.watching.activeOnStart = 在任务开始时观察程序处于活动模式。这相当于发出与 `beginPattern` 匹配的行。
ProblemMatcherSchema.watching.beginsPattern = 如果在输出内匹配，则在监视任务开始时会发出信号。
ProblemMatcherSchema.watching.deprecated = 已弃用：请改用 `background`。
ProblemMatcherSchema.watching.endsPattern = 如果在输出内匹配，则在监视任务结束时会发出信号。
ProblemPatternExtPoint = 提供问题模式
ProblemPatternParser.invalidRegexp = 错误：字符串 {0} 不是有效的正则表达式。\n
ProblemPatternParser.loopProperty.notLast = 循环属性仅在最一个行匹配程序上受支持。
ProblemPatternParser.problemPattern.kindProperty.notFirst = 问题模式无效。`kind` 属性必须提供，且仅能为第一个元素
ProblemPatternParser.problemPattern.missingLocation = 问题模式无效。它应是 `file`，代码行或消息匹配组其中的一项。
ProblemPatternParser.problemPattern.missingProperty = 问题模式无效。必须至少包含一个文件和一条消息。
ProblemPatternParser.problemPattern.missingRegExp = 问题模式缺少正则表达式。
ProblemPatternRegistry.error = 无效问题模式。此模式将被忽略。
ProblemPatternSchema.code = 问题代码的匹配组索引。默认为 `undefined`。
ProblemPatternSchema.column = 问题行字符的匹配组索引。默认为 `3`。
ProblemPatternSchema.endColumn = 问题结束行字符的匹配组索引。默认为 `undefined`。
ProblemPatternSchema.endLine = 问题结束行的匹配组索引。默认为 `undefined`。
ProblemPatternSchema.file = 文件名的匹配组索引。默认为 `1`。
ProblemPatternSchema.kind = 模式匹配的是一个位置（文件、一行）还是仅为一个文件。
ProblemPatternSchema.line = 问题行的匹配组索引。默认为 `2`。
ProblemPatternSchema.location = 问题位置的匹配组索引。有效的位置模式为 (line)、(line,column) 和 (startLine,startColumn,endLine,endColumn)。默认为 (line,column)。
ProblemPatternSchema.loop = 在多行中，匹配程序循环指示是否只要匹配就在循环中执行此模式。只能在多行模式的最后一个模式上指定。
ProblemPatternSchema.message = 消息的匹配组索引。如果省略，则在指定了位置时默认为 `4`，在其他情况下默认为 `5`。
ProblemPatternSchema.regexp = 用于在输出中查找错误、警告或信息的正则表达式。
ProblemPatternSchema.severity = 问题严重性的匹配组索引。默认为 `undefined`。
WatchingPatternSchema.file = 文件名的匹配组索引。可以省略。
WatchingPatternSchema.regexp = 用于检测后台任务开始或结束的正则表达式。
eslint-compact = ESLint compact 问题
eslint-stylish = ESLint stylish 问题
go = Go 问题
gulp-tsc = Gulp TSC 问题
jshint = JSHint 问题
jshint-stylish = JSHint stylish 问题
lessCompile = Less 问题
msCompile = MS Build 问题

[vs/workbench/contrib/tasks/common/taskConfiguration]
ConfigurationParser.inValidArg = 错误：命令参数应是字符串或有效引用的字符串。提供的值为 ：{0}
ConfigurationParser.incorrectType = 错误：任务配置“{0}”使用了未知类型。已忽略该任务。
ConfigurationParser.invalidCWD = 警告：`options.cwd` 属性值应是字符串。将忽略值 {0}。\n
ConfigurationParser.invalidVariableReference = 错误：无效的 `problemMatcher` 引用：{0}\n
ConfigurationParser.missingType = 错误：任务配置“{0}”缺失必要属性 `type`。已忽略该任务。
ConfigurationParser.noName = 错误：声明范围内的问题匹配程序必须具有名称：\n{0}\n
ConfigurationParser.noShell = 警告：仅当在终端中执行任务时支持 shell 配置。
ConfigurationParser.noTaskName = 错误：任务未提供 `label` 属性。已忽略该任务。\n{0}\n
ConfigurationParser.noTaskType = 错误：任务未提供 `type` 属性。已忽略该任务。\n{0}\n
ConfigurationParser.noTypeDefinition = 错误：没有注册任务类型“{0}”。请确认是否安装含有相应任务提供器的扩展。
ConfigurationParser.notCustom = 错误：任务未声明为自定义任务。已忽略该任务。\n{0}\n
ConfigurationParser.unknownMatcherKind = 警告：定义的问题匹配程序未知。支持的类型为 `string | ProblemMatcher | Array<string | ProblemMatcher>`。\n{0}
TaskParse.noOsSpecificGlobalTasks = 任务版本 2.0.0 不支持全局操作系统特定任务。请将他们转换为含有操作系统特定命令的任务。受影响的任务有：\n{0}
taskConfiguration.noCommand = 错误：任务“{0}”没有指定命令。已忽略该任务。其定义为：\n{1}
taskConfiguration.noCommandOrDependsOn = 错误：任务“{0}”没有指定命令，也没有指定 `dependsOn` 属性。已忽略该任务。其定义为：\n{1}

[vs/workbench/contrib/tasks/common/taskDefinitionRegistry]
TaskDefinition.description = 实际任务类型。请以“$”开头的类型仅保留内部使用。
TaskDefinition.properties = 任务类型的其他属性
TaskDefinitionExtPoint = 配置任务种类
TaskTypeConfiguration.noType = 任务类型配置缺少必需的 `taskType` 属性

[vs/workbench/contrib/tasks/common/taskTemplates]
Maven = 执行常见的 maven 命令
dotnetCore = 执行 .NET Core 生成命令
externalCommand = 运行任意外部命令的示例
msbuild = 执行生成目标

[vs/workbench/contrib/tasks/common/tasks]
TaskDefinition.missingRequiredProperty = 错误：任务标识符“{0}”缺失必要属性 `{1}`。将忽略该标识符。

[vs/workbench/contrib/tasks/node/processRunnerDetector]
TaskSystemDetector.buildTaskDetected = 检测到名为“{0}”的生成任务。
TaskSystemDetector.noGruntProgram = 没有安装 Grunt。运行 `npm install -g grunt` 以安装它。
TaskSystemDetector.noGulpProgram = 没有安装 Gulp。运行 `npm install -g gulp-cli` 以安装它。
TaskSystemDetector.noGulpTasks = 没有找到 Gulp 任务。请确认是否运行了 `npm install`。
TaskSystemDetector.noJakeProgram = 没有安装 Jake。运行 `npm install -g jake` 以安装它。
TaskSystemDetector.noJakeTasks = 没有找到 Jake 任务。请确认是否运行了 `npm install`。
TaskSystemDetector.noProgram = 找不到程序 {0}。消息是 {1}
TaskSystemDetector.testTaskDetected = 测试检测到的名为“{0}”的测试任务。

[vs/workbench/contrib/tasks/node/processTaskSystem]
TaskRunnerSystem.cancelRequested = \n已根据用户请求终止了任务“{0}”
TaskRunnerSystem.childProcessError = 启动外部程序{0} {1}失败。
TaskRunnerSystem.unknownError = 在执行任务时发生未知错误。请参见任务输出日志了解详细信息。
TaskRunnerSystem.watchingBuildTaskFinished = \n监视生成任务已完成
unknownProblemMatcher = 未能解析问题匹配程序 {0}。此匹配程序将被忽略
version1_0 = 任务系统配置的版本为 0.1.0（可参见“tasks.json”文件），只能执行自定义任务。请升级到版本 2.0.0 以运行任务：{0}

[vs/workbench/contrib/terminal/browser/terminal.contribution]
quickOpen.terminal = 显示所有已打开的终端
terminal = 终端
terminal.integrated.allowChords = 允许在终端中进行组合键按键映射。开启时将绕过`terminal.Integrated.CommandsToSkipShell`。如果您希望 Ctrl+K 被发送到 shell，请关闭此选项。
terminal.integrated.automationShell.linux = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.automationShell.osx = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.automationShell.windows = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.commandsToSkipShell = 一组命令标识符，其快捷键将不发送到 shell，而始终由 VS Code 进行处理。这样，使用快捷键（通常由 shell 使用）时的效果与终端未对焦时（例如，按 Ctrl+P 启动“快速打开”）时的效果一致。\n默认跳过的命令:\n\n{0}
terminal.integrated.confirmOnExit = 在存在活动终端会话的情况下，是否在退出时进行确认。
terminal.integrated.copyOnSelection = 是否将终端中选定的文本拷贝到粘贴板。
terminal.integrated.cursorBlinking = 使终端光标闪烁。
terminal.integrated.cursorStyle = 终端光标的样式。
terminal.integrated.cwd = 将在其中启动终端的一个显式起始路径，它用作 shell 进程的当前工作目录。
terminal.integrated.detectLocale = 检测“$LANG”环境变量并将其设置为符合 UTF-8 的选项，因为 VS Code 的终端仅支持来自 shell 的 UTF-8 编码数据。
terminal.integrated.detectLocale.auto = 如果现有变量不存在或不以“.UTF-8”结尾，则设置“$LANG”环境变量。
terminal.integrated.detectLocale.off = 不要设置“$LANG”环境变量。
terminal.integrated.detectLocale.on = 始终设置“$LANG”环境变量。
terminal.integrated.drawBoldTextInBrightColors = 终端中的粗体文本是否始终使用 ANSI 的明亮颜色样式。
terminal.integrated.enableBell = 启用声音效果。
terminal.integrated.enableFileLinks = 在终端中启用文件链接。在网络驱动器上工作时，链接速度可能很慢，因为每个文件链接都根据文件系统进行验证。
terminal.integrated.env.linux = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Linux 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.env.osx = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 macOS 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.env.windows = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Windows 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.experimentalRefreshOnResume = 将在系统恢复时刷新终端渲染器的实验性设置。
terminal.integrated.experimentalUseTitleEvent = 将使用下拉标题的终端标题事件的实验性设置。仅适用于新终端。
terminal.integrated.fontFamily = 终端的字体系列，默认为 `#editor.fontFamily#` 的值。
terminal.integrated.fontSize = 终端的字号，以像素为单位。
terminal.integrated.fontWeight = 终端中非粗体字使用的字重。
terminal.integrated.fontWeightBold = 终端中粗体字使用的字重。
terminal.integrated.inheritEnv = 新 shell 是否应从 VS Code 继承其环境。不适用于 Windows。
terminal.integrated.letterSpacing = 终端字符的间距。此项的值为整数，表示在字符间添加的额外像素数。
terminal.integrated.lineHeight = 终端的行高，此数字乘上终端字号得到实际行高，以像素为单位。
terminal.integrated.macOptionClickForcesSelection = 在 macOS 中，是否在按住 Option 键并点击时进行强制选择。这将强制进行常规（行）选择并禁用列选择模式；同时允许使用常规终端选择来进行拷贝与粘贴，例如，可在 tmux 启用了鼠标模式时适用。
terminal.integrated.macOptionIsMeta = 是否在 macOS 终端中，使用 Option 键作为 Meta 键。
terminal.integrated.rendererType = 终端的渲染方式。
terminal.integrated.rendererType.auto = 让 VS Code 决定要使用的渲染器。
terminal.integrated.rendererType.canvas = 使用标准 GPU/基于 canvas 的渲染器。
terminal.integrated.rendererType.dom = 使用基于 DOM 的备用渲染器。
terminal.integrated.rightClickBehavior = 终端对右键点击的响应方式。
terminal.integrated.rightClickBehavior.copyPaste = 当有内容选中时进行拷贝，否则进行粘贴。
terminal.integrated.rightClickBehavior.default = 显示上下文菜单。
terminal.integrated.rightClickBehavior.paste = 右键单击以粘贴。
terminal.integrated.rightClickBehavior.selectWord = 选择光标下的单词并显示上下文菜单。
terminal.integrated.scrollback = 终端保持在缓冲区的最大行数。
terminal.integrated.shellArgs.linux = 在 Linux 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.osx = 在 macOS 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.windows = 在 Windows 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.windows.string = 在 Windows 终端中使用的的命令行参数，须为[命令行格式](https://msdn.microsoft.com/08dfcab2-eb6e-49a4-80eb-87d4076c98c6)[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.showExitAlert = 当退出代码非零时，是否显示“终端进程以某退出代码终止”的警告。
terminal.integrated.splitCwd = 拆分终端的初始工作目录。
terminal.integrated.splitCwd.inherited = 在 macOS 和 Linux 上，一个新的分割终端将使用父终端的工作目录。在Windows上，这与初始值相同。
terminal.integrated.splitCwd.initial = 新拆分终端将使用父终端起始目录作为工作目录。
terminal.integrated.splitCwd.workspaceRoot = 新拆分终端将使用工作区根目录作为工作目录。在多根目录工作区中，可选择要使用的根目录。
terminal.integrated.windowsEnableConpty = 是否将 ConPTY 用于 Windows 终端进程通信（需要 Windows 10 内部版本号 18309 以上）。如果此为 `false`，则将使用 Winpty。
terminalIntegratedConfigurationTitle = 集成终端
viewCategory = 视图

[vs/workbench/contrib/terminal/browser/terminalActions]
quickOpenTerm = 切换活动终端
terminals = 打开终端。
workbench.action.terminal.clear = 清除
workbench.action.terminal.clearSelection = 取消选择
workbench.action.terminal.copySelection = 拷贝所选内容
workbench.action.terminal.copySelection.short = 拷贝
workbench.action.terminal.deleteToLineStart = 删除直到行首的内容
workbench.action.terminal.deleteWordLeft = 删除左侧的字符
workbench.action.terminal.deleteWordRight = 删除右侧的字符
workbench.action.terminal.findNext = 查找下一个
workbench.action.terminal.findPrevious = 查找前一个
workbench.action.terminal.focus = 聚焦到终端
workbench.action.terminal.focusFindWidget = 聚焦到“查找”小组件
workbench.action.terminal.focusNext = 聚焦到下一终端
workbench.action.terminal.focusNextPane = 聚焦到下一窗格
workbench.action.terminal.focusPrevious = 聚焦到下一终端
workbench.action.terminal.focusPreviousPane = 聚焦到上一窗格
workbench.action.terminal.hideFindWidget = 隐藏“查找”小组件
workbench.action.terminal.kill = 终止活动终端实例
workbench.action.terminal.kill.short = 终止终端
workbench.action.terminal.manageWorkspaceShellPermissions = 管理工作区 Shell 权限
workbench.action.terminal.moveToLineEnd = 移动到行尾
workbench.action.terminal.moveToLineStart = 移动到行首
workbench.action.terminal.navigationModeExit = 退出导航模式
workbench.action.terminal.navigationModeFocusNext = 聚焦下一行（导航模式）
workbench.action.terminal.navigationModeFocusPrevious = 聚焦上一行（导航模式）
workbench.action.terminal.new = 新建集成终端
workbench.action.terminal.new.short = 新建终端
workbench.action.terminal.newInActiveWorkspace = 新建集成终端（活动工作区）
workbench.action.terminal.newWithCwd = 在自定义工作目录中创建新的集成终端
workbench.action.terminal.newWithCwd.cwd = 启动终端的目录
workbench.action.terminal.newWorkspacePlaceholder = 选择当前工作目录新建终端
workbench.action.terminal.paste = 粘贴到活动终端中
workbench.action.terminal.paste.short = 粘贴
workbench.action.terminal.quickKill = 终止终端实例
workbench.action.terminal.rename = 重命名
workbench.action.terminal.rename.prompt = 输入终端名称
workbench.action.terminal.resizePaneDown = 向下调整窗格大小
workbench.action.terminal.resizePaneLeft = 向左调整窗格大小
workbench.action.terminal.resizePaneRight = 向右调整窗格大小
workbench.action.terminal.resizePaneUp = 向上调整窗格大小
workbench.action.terminal.runActiveFile = 在活动终端中运行活动文件
workbench.action.terminal.runActiveFile.noFile = 只有硬盘上的文件可在终端上运行
workbench.action.terminal.runSelectedText = 在活动终端运行所选文本
workbench.action.terminal.scrollDown = 向下滚动（行）
workbench.action.terminal.scrollDownPage = 向下滚动（页）
workbench.action.terminal.scrollToBottom = 滚动到底部
workbench.action.terminal.scrollToNextCommand = 滚动到下一条命令
workbench.action.terminal.scrollToPreviousCommand = 滚动到上一条命令
workbench.action.terminal.scrollToTop = 滚动到顶部
workbench.action.terminal.scrollUp = 向上滚动（行）
workbench.action.terminal.scrollUpPage = 向上滚动（页）
workbench.action.terminal.selectAll = 全选
workbench.action.terminal.selectDefaultShell = 选择默认 Shell
workbench.action.terminal.selectToNextCommand = 选择下一条命令所有内容
workbench.action.terminal.selectToNextLine = 选择下一行的所有内容
workbench.action.terminal.selectToPreviousCommand = 选择上一条命令所有内容
workbench.action.terminal.selectToPreviousLine = 选择上一行的所有内容
workbench.action.terminal.sendSequence = 发送自定义序列到终端
workbench.action.terminal.split = 拆分终端
workbench.action.terminal.split.short = 拆分
workbench.action.terminal.splitInActiveWorkspace = 拆分终端（活动工作区）
workbench.action.terminal.switchTerminal = 切换终端
workbench.action.terminal.toggleEscapeSequenceLogging = 切换是否记录转义序列日志
workbench.action.terminal.toggleFindCaseSensitive = 切换区分大小写
workbench.action.terminal.toggleFindRegex = 切换正则表达式
workbench.action.terminal.toggleFindWholeWord = 切换全字匹配
workbench.action.terminal.toggleTerminal = 显示或隐藏集成终端

[vs/workbench/contrib/terminal/browser/terminalConfigHelper]
allow = 允许
disallow = 不允许
install = 安装
terminal.integrated.allowWorkspaceShell = 是否允许此工作区修改您的终端？{0}
useWslExtension.title = 建议使用“{0}”扩展在 WSL 中打开终端。

[vs/workbench/contrib/terminal/browser/terminalInstance]
dontShowAgain = 不再显示
no = 否
terminal.integrated.a11yPromptLabel = 终端输入
terminal.integrated.a11yTooMuchOutput = 输出太多，未能朗读。请手动转到行内进行阅读
terminal.integrated.copySelection.noSelection = 没有在终端中选择要拷贝的内容
terminal.integrated.exitedWithCode = 终端进程已终止，退出代码：{0}
terminal.integrated.exitedWithInvalidCWD = 终端 shell CWD“{0}”不存在
terminal.integrated.exitedWithInvalidPath = 终端 shell 路径“{0}”不存在
terminal.integrated.exitedWithInvalidPathDirectory = 终端 shell 路径“{0}”是一个目录
terminal.integrated.launchFailed = 终端进程命令“{0} {1}”未能启动（退出代码：{2}）
terminal.integrated.launchFailedExtHost = 终端进程启动失败（退出代码：{0}）
terminal.integrated.legacyConsoleModeError = 终端未能正确启动，因为你的系统已启用旧版控制台模式；要解决此问题，请取消选择“使用旧版控制台”cmd.exe 的属性。
terminal.slowRendering = 集成终端的默认渲染器运行性能低。是否切换为基于 DOM 的渲染器？[阅读有关终端设置的更多信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered)
yes = 是

[vs/workbench/contrib/terminal/browser/terminalLinkHandler]
terminalLinkHandler.followLinkAlt = 按住 Alt 键点击可访问链接
terminalLinkHandler.followLinkAlt.mac = 按住 Option 键点击可访问链接
terminalLinkHandler.followLinkCmd = 按住 Command 键点击可访问链接
terminalLinkHandler.followLinkCtrl = 按住 Ctrl 键点击可访问链接

[vs/workbench/contrib/terminal/browser/terminalPanel]
terminal.monospaceOnly = 终端只支持等宽字体。
terminal.useMonospace = 改为“monospace”

[vs/workbench/contrib/terminal/browser/terminalProcessExtHostProxy]
terminal.integrated.starting = 正在启动…

[vs/workbench/contrib/terminal/browser/terminalQuickOpen]
noTerminalsFound = 没有打开终端
noTerminalsMatching = 没有匹配的终端
termCreateEntryAriaLabel = {0}，新建终端
termEntryAriaLabel = {0}，终端选取器
workbench.action.terminal.newplus = $(plus) 新建集成终端

[vs/workbench/contrib/terminal/browser/terminalService]
terminal.integrated.chooseWindowsShell = 选择默认的终端 shell。您可以以后在设置中更改。
terminalService.terminalCloseConfirmationPlural = 有 {0} 个活动的终端会话，是否终止这些会话？
terminalService.terminalCloseConfirmationSingular = 有 1 个活动的终端会话，是否终止此会话？
workbench.action.terminal.allowWorkspaceShell = 允许配置工作区 Shell
workbench.action.terminal.disallowWorkspaceShell = 禁止配置工作区 Shell

[vs/workbench/contrib/terminal/browser/terminalTab]
terminalFocus = 终端 {0}

[vs/workbench/contrib/terminal/common/terminal]
terminalCategory = 终端

[vs/workbench/contrib/terminal/common/terminalColorRegistry]
terminal.ansiColor = 终端中的 ANSI 颜色“{0}”。
terminal.background = 终端的背景色，允许终端的颜色与面板不同。
terminal.border = 分隔终端中拆分窗格的边框颜色。默认为 `panel.border` 的颜色。
terminal.foreground = 终端的前景色。
terminal.selectionBackground = 终端选中内容的背景色。
terminalCursor.background = 终端光标的背景色。允许自定义被块状光标遮住的字符的颜色。
terminalCursor.foreground = 终端光标的前景色。

[vs/workbench/contrib/terminal/common/terminalMenu]
miNewTerminal = 新建终端(&&N)
miRunActiveFile = 运行活动文件(&&A)
miRunSelectedText = 运行所选文本(&&S)
miSplitTerminal = 拆分终端(&&S)
miToggleIntegratedTerminal = 终端(&&T)

[vs/workbench/contrib/terminal/common/terminalShellConfig]
terminal.integrated.shell.linux = 终端在 Linux 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.linux.noDefault = 终端在 Linux 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminal.integrated.shell.osx = 终端在 macOS 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.osx.noDefault = 终端在 macOS 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminal.integrated.shell.windows = 终端在 Windows 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.windows.noDefault = 终端在 Windows 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminalIntegratedConfigurationTitle = 集成终端

[vs/workbench/contrib/terminal/electron-browser/terminalRemote]
workbench.action.terminal.newLocal = 新建集成终端（本地）

[vs/workbench/contrib/themes/browser/themes.contribution]
developer = 开发者
generateColorTheme.label = 使用当前设置生成颜色主题
installColorThemes = 安装其他颜色主题…
installIconThemes = 安装其他文件图标主题…
miSelectColorTheme = 颜色主题(&&C)
miSelectIconTheme = 文件图标主题(&&I)
noIconThemeDesc = 禁用文件图标
noIconThemeLabel = 无
preferences = 首选项
selectIconTheme.label = 文件图标主题
selectTheme.label = 颜色主题
themes.category.dark = 深色主题
themes.category.hc = 高对比度主题
themes.category.light = 浅色主题
themes.selectIconTheme = 选择文件图标主题
themes.selectIconTheme.label = 文件图标主题
themes.selectTheme = 选择颜色主题（按上下箭头键预览）

[vs/workbench/contrib/update/browser/releaseNotesEditor]
releaseNotesInputName = 发行说明：{0}
unassigned = 未分配

[vs/workbench/contrib/update/browser/update]
DownloadingUpdate = 正在下载更新…
checkForUpdates = 检查更新…
checkingForUpdates = 正在检查更新…
download update = 下载更新
installUpdate = 安装更新
installUpdate... = 安装更新…
installingUpdate = 正在安装更新…
later = 稍后
licenseChanged = 我们对许可条款进行了修改，请点击[此处]({0})进行查看。
noUpdatesAvailable = 当前没有可用的更新。
ok = 确定
read the release notes = 欢迎使用 {0} {1} 版本！是否阅读发布说明？
releaseNotes = 发行说明
restartToUpdate = 重启以更新
showReleaseNotes = 显示发行说明
thereIsUpdateAvailable = 有可用的更新。
update service = 更新服务
updateAvailable = 有更新可用：{0} {1}
updateAvailableAfterRestart = 重新启动 {0} 即可应用最新更新。
updateInstalling = 正在后台安装 {0} {1}，我们将在完成后通知您。
updateIsReady = 有新的 {0} 的更新可用。
updateNow = 现在更新

[vs/workbench/contrib/url/common/trustedDomains]
trustedDomain.manageTrustedDomain = 管理受信任的域名
trustedDomain.manageTrustedDomains = 管理受信任的域名
trustedDomain.trustAllDomains = 信任所有域名（禁用链接保护）
trustedDomain.trustDomain = 信任“{0}”
trustedDomain.trustSubDomain = 信任“{0}”及其子域名

[vs/workbench/contrib/url/common/trustedDomainsValidator]
cancel = 取消
configureTrustedDomains = 设置受信任的域名
openExternalLinkAt = 是否要 {0} 打开外部网站？\n{1}
openLink = 打开链接

[vs/workbench/contrib/url/common/url.contribution]
developer = 开发者
openUrl = 打开网址

[vs/workbench/contrib/userData/browser/userData.contribution]
conflicts detected = 由于冲突而无法同步。请解决它们以继续。
continue sync = 同步：继续
resolve = 解决冲突
resolve conflicts = 解决冲突
resolveConflicts = 同步：解决冲突
start sync = 同步：开始
stop sync = 同步：停止
syncing = 正在同步用户设置…
userConfiguration = 用户设置
userConfiguration.enableSync = 同步用户设置，包括设置、按键映射、扩展和代码片段。

[vs/workbench/contrib/userDataSync/browser/userDataSync]
conflicts detected = 由于冲突而无法同步。请解决它们以继续。
continue sync = 设置同步：继续
enter token = 请输入身份验证令牌
resolve = 解决冲突
resolve conflicts = 解决冲突
resolveConflicts = 设置同步：解决冲突
show sign in = 请登录设置同步服务。
sign in = 登录…
sign out = 退出账户
start sync = 设置同步：打开
stop sync = 设置同步：关闭
syncing = 正在同步用户设置…

[vs/workbench/contrib/watermark/browser/watermark]
tips.enabled = 启用后，当没有打开编辑器时将显示水印提示。
watermark.findInFiles = 在文件中查找
watermark.newUntitledFile = 新的无标题文件
watermark.openFile = 打开文件
watermark.openFileFolder = 打开文件或文件夹
watermark.openFolder = 打开文件夹
watermark.openRecent = 打开最近的文件
watermark.quickOpen = 转到文件
watermark.showCommands = 显示所有命令
watermark.startDebugging = 开始调试
watermark.toggleTerminal = 切换终端
workbenchConfigurationTitle = 工作台

[vs/workbench/contrib/webview/browser/webview]
developer = 开发者

[vs/workbench/contrib/webview/browser/webview.contribution]
webview.editor.label = Webview 编辑器

[vs/workbench/contrib/webview/browser/webviewCommands]
refreshWebviewLabel = 重新加载 Webview

[vs/workbench/contrib/webview/electron-browser/webviewCommands]
openToolsLabel = 打开 Webview 开发工具

[vs/workbench/contrib/welcome/overlay/browser/welcomeOverlay]
help = 帮助
hideWelcomeOverlay = 隐藏界面概述
welcomeOverlay = 用户界面概览
welcomeOverlay.commandPalette = 查找并运行所有命令
welcomeOverlay.debug = 启动和调试
welcomeOverlay.explorer = 资源与文件
welcomeOverlay.extensions = 管理扩展
welcomeOverlay.git = 源代码管理
welcomeOverlay.notifications = 显示通知
welcomeOverlay.problems = 查看错误和警告
welcomeOverlay.search = 跨文件搜索
welcomeOverlay.terminal = 切换集成终端

[vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page]
welcomePage.addWorkspaceFolder = 添加工作区文件夹…
welcomePage.colorTheme = 颜色主题
welcomePage.colorThemeDescription = 使 VS Code 呈现您喜欢的外观
welcomePage.customize = 自定义
welcomePage.editingEvolved = 编辑更上一层楼
welcomePage.gitHubRepository = GitHub 存储库
welcomePage.help = 帮助
welcomePage.installExtensionPacks = 工具和语言
welcomePage.installExtensionPacksDescription = 安装 {0} 和{1}的支持
welcomePage.installKeymapDescription = 设置和按键映射
welcomePage.installKeymapExtension = 安装 {0} 或{1}的设置和按键映射
welcomePage.interactivePlayground = 演示与实践
welcomePage.interactivePlaygroundDescription = 通过可交互的演示页面了解 VS Code 的基本功能
welcomePage.interfaceOverview = 界面概览
welcomePage.interfaceOverviewDescription = 查看突出显示用户界面组件的叠加图
welcomePage.introductoryVideos = 介绍视频
welcomePage.keybindingsCheatsheet = 快捷键速查表
welcomePage.learn = 学习
welcomePage.moreExtensions = 更多
welcomePage.moreRecent = 更多…
welcomePage.newFile = 新建文件
welcomePage.newsletterSignup = 订阅资讯邮件
welcomePage.noRecentFolders = 无最近使用文件夹
welcomePage.openFolder = 打开文件夹…
welcomePage.others = 其他
welcomePage.productDocumentation = 产品文档
welcomePage.recent = 最近
welcomePage.showCommands = 查找和运行命令
welcomePage.showCommandsDescription = 使用命令栏快速查找和运行命令（{0}）
welcomePage.showKeymapExtensions = 显示其他按键映射扩展
welcomePage.showLanguageExtensions = 显示更多语言扩展
welcomePage.showOnStartup = 启动时显示欢迎页
welcomePage.stackOverflow = Stack Overflow
welcomePage.start = 开始
welcomePage.tipsAndTricks = 提示与技巧
welcomePage.vscode = Visual Studio Code

[vs/workbench/contrib/welcome/page/browser/welcomePage]
details = 详情
ok = 确定
welcome.title = 欢迎使用
welcomePage = 欢迎使用
welcomePage.atom = Atom
welcomePage.azure = Azure
welcomePage.background = 欢迎页面的背景色。
welcomePage.buttonBackground = 欢迎页按钮的背景色。
welcomePage.buttonHoverBackground = 欢迎页按钮被悬停时的背景色。
welcomePage.docker = Docker
welcomePage.extensionListSeparator = ，
welcomePage.extensionPackAlreadyInstalled = 已安装对 {0} 的支持。
welcomePage.extensionPackNotFound = 找不到对 {0}（ID：{1}）的支持。
welcomePage.installExtensionPack = 安装对 {0} 的额外支持
welcomePage.installKeymap = 安装 {0} 按键映射
welcomePage.installedExtensionPack = 已安装 {0} 支持
welcomePage.installedKeymap = 已安装 {0} 按键映射
welcomePage.installingExtensionPack = 正在安装对 {0} 的额外支持…
welcomePage.installingKeymap = 正在安装 {0} 按键映射…
welcomePage.javaScript = JavaScript
welcomePage.keymapAlreadyInstalled = 已安装 {0} 按键映射。
welcomePage.keymapNotFound = 找不到标识符为 {1} 的 {0} 按键映射。
welcomePage.openFolderWithPath = 打开路径为 {1} 的文件夹 {0}
welcomePage.php = PHP
welcomePage.python = Python
welcomePage.showAzureExtensions = 显示 Azure 扩展
welcomePage.sublime = Sublime
welcomePage.vim = Vim
welcomePage.willReloadAfterInstallingExtensionPack = 安装对 {0} 的额外支持后，将重载窗口。
welcomePage.willReloadAfterInstallingKeymap = 安装 {0} 按键映射后，将重载窗口。

[vs/workbench/contrib/welcome/page/browser/welcomePage.contribution]
help = 帮助
miWelcome = 欢迎使用(&&W)
workbench.startupEditor = 启动时显示的编辑器（适用于不能恢复上次打开的窗口时）。
workbench.startupEditor.newUntitledFile = 显示新的无标题文件（仅在打开空工作区时适用）。
workbench.startupEditor.none = 不显示编辑器。
workbench.startupEditor.readme = 打开包含一个 README 文件的文件夹时，显示该文件，否则显示欢迎页面。
workbench.startupEditor.welcomePage = 显示欢迎页面。
workbench.startupEditor.welcomePageInEmptyWorkbench = 显示欢迎页面（仅在打开空工作区时适用）。
workbenchConfigurationTitle = 工作台

[vs/workbench/contrib/welcome/telemetryOptOut/browser/telemetryOptOut]
telemetryOptOut.OptIn = 好
telemetryOptOut.OptOut = 不
telemetryOptOut.optInNotice = 允许微软收集使用数据来帮助改进 Visual Studio Code。请阅读我们的[隐私声明]({0})并了解如何[开启]({1})。
telemetryOptOut.optOutNotice = 允许微软收集使用数据来帮助改进 Visual Studio Code。请阅读我们的[隐私声明]({0})并了解如何[关闭]({1})。
telemetryOptOut.optOutOption = 允许微软收集使用数据来帮助改进 Visual Studio Code。请阅读我们的[隐私声明]({0})。
telemetryOptOut.readMore = 了解详细信息

[vs/workbench/contrib/welcome/walkThrough/browser/editor/editorWalkThrough]
editorWalkThrough = 演示与实践
editorWalkThrough.title = 演示与实践

[vs/workbench/contrib/welcome/walkThrough/browser/walkThrough.contribution]
help = 帮助
miInteractivePlayground = 演示与实践(&&N)
walkThrough.editor.label = 演示与实践

[vs/workbench/contrib/welcome/walkThrough/browser/walkThroughPart]
walkThrough.embeddedEditorBackground = 嵌入于演示与实践中的编辑器的背景色。
walkThrough.gitNotFound = 找不到 Git 程序。
walkThrough.unboundCommand = 未绑定

[vs/workbench/electron-browser/actions/developerActions]
configureRuntimeArguments = 配置运行时参数
toggleDevTools = 显示或隐藏开发人员工具
toggleSharedProcess = 打开或关闭共享进程

[vs/workbench/electron-browser/actions/windowActions]
close = 关闭窗口
closeWindow = 关闭窗口
current = 当前窗口
quickSwitchWindow = 快速切换窗口…
reloadWindowWithExtensionsDisabled = 禁用扩展后重新加载窗口
switchWindow = 切换窗口…
switchWindowPlaceHolder = 选择切换的窗口
zoomIn = 放大
zoomOut = 缩小
zoomReset = 重置缩放

[vs/workbench/electron-browser/desktop.contribution]
argv.disableColorCorrectRendering = 解决颜色配置文件选择问题。仅当您遇到图形问题时，才更改此选项。
argv.disableHardwareAcceleration = 禁用硬件加速。仅当遇到图形问题时才更改此选项。
argv.locale = 要使用的显示语言。选取其他语言需要安装关联的语言包。
autoDetectHighContrast = 自动切换高对比度主题。
closeWhenEmpty = 当没有打开文件夹时，关闭最后一个编辑器以关闭整个窗口。
developer = 开发者
mergeAllWindowTabs = 合并所有窗口
miCloseWindow = 关闭窗口(&&W)
miExit = 退出(&&X)
miOpenProcessExplorerer = 打开进程管理器(&&P)
miReportIssue = 报告问题（使用英语）(&&I)
miToggleDevTools = 切换开发人员工具(&&T)
miZoomIn = 放大(&&Z)
miZoomOut = 缩小(&&Z)
miZoomReset = 重置缩放(&&R)
moveWindowTabToNewWindow = 将窗口选项卡移动到新窗口
newTab = 新建窗口标签页
newWindowDimensions = 在已有窗口时新开窗口的尺寸。请此设置对第一个打开的窗口无效。第一个窗口将始终恢复关闭前的大小和位置。
openFilesInNewWindow = 是否在新窗口中打开文件。\n此设置可能会被忽略，如在使用 `--new-window` 或 `--reuse-window` 命令行选项时。
openFilesInNewWindowMac = 是否在新窗口中打开文件。\n此设置可能会被忽略，如在使用 `-new-window` 或 `-reuse-window` 命令行选项时。
openWithoutArgumentsInNewWindow = 在另一实例无参启动时，是打开新的空窗口或是聚焦到最后运行的实例。\n此设置可能会被忽略，如在使用 `--new-window` 或 `--reuse-window` 命令行选项时。
preferences = 设置
restoreFullscreen = 若窗口在处于全屏模式时退出，其在恢复时是否还原到全屏模式。
restoreWindows = 窗口在重启后再次打开的方式。
showNextWindowTab = 显示下一个窗口选项卡
showPreviousTab = 显示上一个窗口选项卡
telemetry.enableCrashReporting = 将崩溃报告发送到微软在线服务。需要重新启动。
telemetryConfigurationTitle = 遥测
titleBarStyle = 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。需要重新启动。
toggleWindowTabsBar = 切换窗口选项卡栏
view = 视图
window.clickThroughInactive = 点击非活动窗口后将在激活窗口的同时触发光标之下的元素。
window.doubleClickIconToClose = 双击标题栏中的应用程序图标以关闭窗口（适用于 `#window.titleBarStyle#` 设置为 `"custom"` 时）。
window.nativeFullScreen = 在 macOS 上使用原生全屏。禁用此设置可禁止 macOS 在全屏时创建新空间。
window.nativeTabs = 使用 macOS Sierra 窗口选项卡。需要重新启动。同时，开启原生选项卡将禁用自定义标题栏样式。
window.newWindowDimensions.default = 在屏幕中心打开新窗口。
window.newWindowDimensions.fullscreen = 在全屏模式下打开新窗口。
window.newWindowDimensions.inherit = 以与上一个活动窗口相同的尺寸打开新窗口。
window.newWindowDimensions.maximized = 打开最大化的新窗口。
window.openFilesInNewWindow.default = 在新窗口中打开文件，除非文件从应用程序内进行选取，如通过“文件”菜单。
window.openFilesInNewWindow.defaultMac = 在文件所在文件夹的已有窗口中或在上一个活动窗口中打开文件，除非其通过“程序坞”或“访达”打开。
window.openFilesInNewWindow.off = 在文件所在文件夹的已有窗口中或在上一个活动窗口中打开文件。
window.openFilesInNewWindow.on = 在新窗口中打开文件。
window.openWithoutArgumentsInNewWindow.off = 聚焦到上一活动的运行实例。
window.openWithoutArgumentsInNewWindow.on = 打开一个新的空窗口。
window.reopenFolders.all = 重新打开所有窗口。
window.reopenFolders.folders = 重新打开所有文件夹。空工作区将不会被恢复。
window.reopenFolders.none = 永远不重新打开窗口。总是以一个空窗口启动。
window.reopenFolders.one = 重新打开上一个活动窗口。
windowConfigurationTitle = 窗口
zoomLevel = 调整窗口的缩放级别。原始大小是 0，每次递增（例如 1）或递减（例如 -1）表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。

[vs/workbench/electron-browser/window]
mPreferences = 首选项
runningAsRoot = 不建议以 root 用户身份运行 {0}。

[vs/workbench/services/bulkEdit/browser/bulkEditService]
conflict = 这些文件也已同时更改：{0}
summary.0 = 未做编辑
summary.n0 = 在 1 个文件中进行了 {0} 次编辑
summary.nm = 在 {1} 个文件中进行了 {0} 次编辑

[vs/workbench/services/configuration/common/configurationEditingService]
errorConfigurationFileDirty = 用户设置文件已变更，未能写入。请先保存此文件，然后重试。
errorConfigurationFileDirtyFolder = 文件夹设置文件已变更，未能写入。请先保存“{0}”文件夹设置文件，然后重试。
errorConfigurationFileDirtyWorkspace = 工作区设置文件已变更，未能写入。请先保存此文件，然后重试。
errorInvalidConfiguration = 未能写入用户设置。请打开用户设置并清除错误或警告，然后重试。
errorInvalidConfigurationFolder = 未能写入文件夹设置。请打开“{0}”文件夹设置并清除错误或警告，然后重试。
errorInvalidConfigurationWorkspace = 未能写入工作区设置。请打开工作区设置并清除错误或警告，然后重试。
errorInvalidFolderConfiguration = {0} 不支持文件夹资源域，因此未能写入文件夹设置。
errorInvalidFolderTarget = 未提供资源，因此未能写入文件夹设置。
errorInvalidLaunchConfiguration = 未能写入启动配置文件。请打开文件并更正错误或警告，然后重试。
errorInvalidRemoteConfiguration = 未能写入远程用户设置。请打开远程用户设置以更正其中的错误警告, 然后重试。
errorInvalidTaskConfiguration = 未能写入任务配置文件。请打开文件并更正错误或警告，然后重试。
errorInvalidUserTarget = {0} 不支持全局域，因此未能写入用户设置。
errorInvalidWorkspaceConfigurationApplication = 未能将 {0} 写入工作区设置。此设置只能写于用户设置。
errorInvalidWorkspaceConfigurationMachine = 未能将 {0} 写入工作区设置。此设置只能写于用户设置。
errorInvalidWorkspaceTarget = {0} 不在多文件夹工作区环境下支持工作区作用域，因此未能写入工作区设置。
errorLaunchConfigurationFileDirty = 启动配置文件已变更，未能写入。请先保存此文件，然后重试。
errorNoWorkspaceOpened = 没有打开任何工作区，因此未能写入 {0}。请先打开一个工作区，然后重试。
errorRemoteConfigurationFileDirty = 未能写入远程的用户设置，因为该文件已被污染。请先保存远程用户设置文件, 然后重试。
errorTasksConfigurationFileDirty = 任务配置文件已变更，未能写入。请先保存此文件，然后重试。
errorUnknownKey = 没有注册配置 {1}，因此未能写入 {0}。
folderTarget = 文件夹设置
open = 打开设置
openLaunchConfiguration = 打开启动配置
openTasksConfiguration = 打开任务配置
remoteUserTarget = 远程用户设置
saveAndRetry = 保存并重试
userTarget = 用户设置
workspaceTarget = 工作区设置

[vs/workbench/services/configuration/common/jsonEditingService]
errorFileDirty = 未能写入文件因为其已变更。请先保存此文件，然后重试。
errorInvalidFile = 未能写入文件。请打开文件以更正错误或警告，然后重试。

[vs/workbench/services/configurationResolver/browser/configurationResolverService]
commandVariable.noStringType = 未能替换命令变量“{0}”, 因为命令没有返回字符串类型的结果。
inputVariable.command.noStringType = 未能替换输入变量“{0}”, 因为命令“{1}”没有返回类型字符串的结果。
inputVariable.defaultInputValue = 默认值
inputVariable.missingAttribute = 输入变量“{0}”的类型为“{1}”且必须包含“{2}”。
inputVariable.noInputSection = 必须在调试或任务配置的“{1}”部分中定义变量“{0}”。
inputVariable.undefinedVariable = 遇到未定义的输入变量“{0}”。请删除或定义“{0}”以继续操作。
inputVariable.unknownType = 输入变量“{0}”只能是 `"promptString"`、`"pickString"` 或 `"command"` 类型。

[vs/workbench/services/configurationResolver/common/configurationResolverSchema]
JsonSchema.input.command.args = 传递给命令的可选参数。
JsonSchema.input.command.command = 要为此输入变量执行的命令。
JsonSchema.input.default = 输入的默认值。
JsonSchema.input.description = 当提示用户输入时，将显示说明。
JsonSchema.input.id = 输入的标识符用于与其变量采用 ${input:id} 形式的输入相关联。
JsonSchema.input.options = 用于定义快速选择选项的字符串数组。
JsonSchema.input.type = 要使用的用户输入提示符的类型。
JsonSchema.input.type.command = `"command"` 类型会执行命令。
JsonSchema.input.type.pickString = `"pickString"` 类型显示一个选择列表。
JsonSchema.input.type.promptString = `"promptString"` 类型会打开一个输入框，要求用户输入内容。
JsonSchema.inputs = 用户输入。用于定义用户输入提示，例如自由字符串输入或从多个选项中进行选择。

[vs/workbench/services/configurationResolver/common/configurationResolverUtils]
deprecatedVariables = 已弃用：请改用 `env:`、`config:` 和 `command:`。

[vs/workbench/services/configurationResolver/common/variableResolver]
canNotFindFolder = 找不到文件夹“{1}”，因此未能解析“{0}”。
canNotResolveFile = 未能解析“{0}”。请打开一个编辑器。
canNotResolveLineNumber = 未能解析“{0}”。请确保已在活动编辑器中选择一行内容。
canNotResolveSelectedText = 未能解析“{0}”。请确保已在活动编辑器中选择一些文字。
canNotResolveWorkspaceFolder = 未能解析“{0}”。请打开一个文件夹。
canNotResolveWorkspaceFolderMultiRoot = 未能在多文件夹工作区中解析“{0}”。使用“:”和工作区文件夹名称来限定此变量的作用域。
configNoString = “{1}”为结构类型值，因此未能解析“{0}”。
configNotFound = 未能找到设置“{1}”，因此未能解析“{0}”。
missingConfigName = 未给出设置名称，因此未能解析“{0}”。
missingEnvVarName = 未给出环境变量名称，因此未能解析“{0}”。
noValueForCommand = 命令不含值，因此未能解析“{0}”。

[vs/workbench/services/decorations/browser/decorationsService]
bubbleTitle = 包含强调项

[vs/workbench/services/dialogs/browser/abstractFileDialogService]
filterName.workspace = 工作区
openFile.title = 打开文件
openFileOrFolder.title = 打开文件或文件夹
openFolder.title = 打开文件夹
openWorkspace.title = 打开工作区
saveFileAs.title = 保存为

[vs/workbench/services/dialogs/browser/dialogService]
aboutDetail = 版本：{0}\n提交：{1}\n日期：{2}\n浏览器：{3}
cancelButton = 取消
copy = 复制
ok = 确定
yesButton = 是(&&Y)

[vs/workbench/services/dialogs/browser/simpleFileDialog]
openLocalFile = 打开本地文件…
openLocalFileFolder = 打开本地项目…
openLocalFolder = 打开本地文件夹…
remoteFileDialog.badPath = 路径不存在。
remoteFileDialog.cancel = 取消
remoteFileDialog.invalidPath = 请输入有效的路径。
remoteFileDialog.local = 显示本地
remoteFileDialog.notConnectedToRemote = {0} 的文件系统提供程序不可用。
remoteFileDialog.validateBadFilename = 请输入有效的文件名。
remoteFileDialog.validateExisting = {0} 已存在。确实要覆盖它吗？
remoteFileDialog.validateFileOnly = 请选择一个文件。
remoteFileDialog.validateFolder = 该文件夹已存在，请使用新的文件名。
remoteFileDialog.validateFolderOnly = 请选择一个文件夹。
remoteFileDialog.validateNonexistentDir = 请输入已存在的路径。
saveLocalFile = 保存本地文件…

[vs/workbench/services/dialogs/electron-browser/dialogService]
aboutDetail = 版本：{0}\n提交：{1}\n日期：{2}\nElectron：{3}\nChrome：{4}\nNode.js：{5}\nV8：{6}\n操作系统：{7}
cancelButton = 取消
copy = 复制(&&C)
okButton = 确定
yesButton = 是(&&Y)

[vs/workbench/services/editor/browser/editorService]
compareLabels = {0} ↔ {1}
sideBySideLabels = {0} - {1}

[vs/workbench/services/extensionManagement/common/extensionEnablementService]
noWorkspace = 无工作区

[vs/workbench/services/extensionManagement/common/extensionManagementService]
Manifest is not found = 安装扩展“{0}”失败：找不到清单文件。
multipleDependentsError = 未能卸载扩展“{0}”。扩展“{1}”、“{2}”以及其他扩展都依赖于它。
singleDependentError = 未能卸载扩展“{0}”。扩展“{1}”依赖于它。
twoDependentsError = 未能卸载扩展“{0}”。扩展“{1}”、“{2}”依赖于它。

[vs/workbench/services/extensionManagement/electron-browser/extensionManagementServerService]
local = 本地
remote = 远程

[vs/workbench/services/extensions/browser/extensionUrlHandler]
Installing = 正在安装扩展“{0}”…
Reload = 重载窗口并打开
confirmUrl = 是否允许扩展打开此 URL？
enableAndHandle = 扩展“{0}”已被禁用。是否启用扩展并重载此窗口来打开 URL？
enableAndReload = 启用并打开(&&E)
install = 安装(&&I)
installAndHandle = 扩展“{0}”尚未安装。是否安装扩展并重载此窗口来打开 URL？
manage = 管理授权扩展 URL…
open = 打开(&&O)
reload = 是否重新加载窗口并打开 URL“{0}”？
reloadAndHandle = 扩展“{0}”尚未载入。是否重载此窗口来载入扩展并打开 URL？
reloadAndOpen = 重载窗口并打开(&&R)
rememberConfirmUrl = 不再提醒此扩展

[vs/workbench/services/extensions/common/extensionHostProcessManager]
developer = 开发者
measureExtHostLatency = 测定扩展宿主延迟

[vs/workbench/services/extensions/common/extensionsRegistry]
extensionKind = 定义扩展的类型。可以控制扩展应在本地运行还是在远程运行。
extensionKind.empty = 无法在远程上下文中运行的扩展，既不能在本地上，也不能在远程计算机上运行。
extensionKind.ui-workspace = 可在任意一侧运行的扩展，并首选在本地计算机上运行。
extensionKind.workspace-ui = 可在任意一侧运行的扩展，并首选在远程计算机上运行。
ui = 用户界面扩展。在远程窗口中，用户界面扩展只在本地启用。
vscode.extension.activationEvents = VS Code 扩展的激活事件。
vscode.extension.activationEvents.onCommand = 在调用指定命令时发出的激活事件。
vscode.extension.activationEvents.onDebug = 在用户准备调试或准备设置调试配置时发出的激活事件。
vscode.extension.activationEvents.onDebugAdapterProtocolTracker = 每当即将启动具有特定类型的调试会话并可能需要调试协议跟踪器时, 都会发出激活事件。
vscode.extension.activationEvents.onDebugInitialConfigurations = 在需要创建“launch.json”文件（且需要调用 provideDebugConfigurations 的所有方法）时发出的激活事件。
vscode.extension.activationEvents.onDebugResolve = 在将要启动具有特定类型的调试会话（且需要调用相应的 resolveDebugConfiguration 方法）时发出的激活事件。
vscode.extension.activationEvents.onFileSystem = 在使用给定协议打开文件或文件夹时发出的激活事件。
vscode.extension.activationEvents.onIdentity = 每当指定的用户标识时，都会发出激活事件。
vscode.extension.activationEvents.onLanguage = 在打开被解析为指定语言的文件时发出的激活事件。
vscode.extension.activationEvents.onSearch = 在开始从给定协议的文件夹中搜索时发出的激活事件。
vscode.extension.activationEvents.onUri = 在打开系统范围内并指向此扩展的 URI 时发出的激活事件。
vscode.extension.activationEvents.onView = 在指定视图被展开时发出的激活事件。
vscode.extension.activationEvents.star = 在 VS Code 启动时发出的激活事件。为确保良好的最终用户体验，请仅在其他激活事件组合不适用于您的情况时，才在扩展中使用此事件。
vscode.extension.activationEvents.workspaceContains = 在打开至少包含一个匹配指定 glob 模式的文件的文件夹时发出的激活事件。
vscode.extension.badges = 在 Marketplace 的扩展页边栏中显示的徽章数组。
vscode.extension.badges.description = 徽章说明。
vscode.extension.badges.href = 徽章链接。
vscode.extension.badges.url = 徽章图像 URL。
vscode.extension.categories = VS Code 库用于对扩展进行分类的类别。
vscode.extension.category.languages.deprecated = 已弃用：请改用 `"Programming Languages"`。
vscode.extension.contributes = 由此包表示的 VS Code 扩展的所有贡献。
vscode.extension.contributes.extensionPack = 可一起安装的一组扩展。扩展的标识符始终为 `${publisher}.${name}`，如`"vscode.csharp"`。
vscode.extension.displayName = VS Code 库中使用的扩展的显示名称。
vscode.extension.engines = 引擎兼容性。
vscode.extension.engines.vscode = 对于 VS Code 扩展，指定与其兼容的 VS Code 版本。不能为 *。 例如：^0.10.5 表示最低兼容 VS Code 版本 0.10.5。
vscode.extension.extensionDependencies = 其他扩展的依赖关系。扩展的标识符始终是 `${publisher}.${name}`，如 `"vscode.csharp"`。
vscode.extension.galleryBanner = VS Code 商城使用的横幅。
vscode.extension.galleryBanner.color = VS Code 商城页标题上的横幅颜色。
vscode.extension.galleryBanner.theme = 横幅文字的颜色主题。
vscode.extension.icon = 128 x 128 像素图标的路径。
vscode.extension.markdown = 商店中使用的 Markdown 渲染引擎。可为 `"github"` 或 `"standard"`。
vscode.extension.preview = 在 Marketplace 中设置扩展，将其标记为“预览”。
vscode.extension.publisher = VS Code 扩展的发布者。
vscode.extension.qna = 市场中的“问与答”（Q&A）链接。设置为 `"marketplace"` 可启用市场的默认“问与答”页面。设置为其他字符串可指向自定义的“问与答”页面。设置为 `false` 表示完全禁用“问与答”。
vscode.extension.scripts.prepublish = 包作为 VS Code 扩展发布前执行的脚本。
vscode.extension.scripts.uninstall = VS Code 扩展的卸载钩子。在扩展从 VS Code 卸载且 VS Code 重启（关闭后开启）后执行的脚本。仅支持 Node 脚本。
workspace = 工作区扩展。在远程窗口中，用户界面扩展只在远程启用。

[vs/workbench/services/extensions/electron-browser/cachedExtensionScanner]
extensionCache.invalid = 扩展在硬盘上已被修改。请重新加载窗口。
extensionUnderDevelopment = 正在 {0} 处加载开发扩展
overwritingExtension = 使用扩展 {1} 覆盖扩展 {0}。
reloadWindow = 重新加载窗口

[vs/workbench/services/extensions/electron-browser/extensionHost]
extensionHost.error = 扩展宿主中的错误：{0}
extensionHost.startupFail = 扩展宿主未在 10 秒内启动，这可能是一个问题。
extensionHost.startupFailDebug = 扩展未在 10 秒内启动，可能在第一行已停止，需要调试器才能继续。
reloadWindow = 重新加载窗口

[vs/workbench/services/extensions/electron-browser/extensionService]
Reload = 重新加载
devTools = 打开开发人员工具
extensionService.crash = 扩展宿主意外终止。
extensionService.versionMismatchCrash = 扩展宿主未能启动：版本不匹配。
extensionsDisabled = 已暂时禁用所有安装的扩展。重载此窗口可返回到之前状态。
getEnvironmentFailure = 无法获取远程环境
looping = 扩展“{0}”因包含依赖循环已被禁用。
relaunch = 重新启动 VS Code
resolveAuthorityFailure = 解析来源 `{0}` 失败。
restart = 重启扩展宿主

[vs/workbench/services/extensions/electron-browser/remoteExtensionManagementIpc]
incompatible = 不能安装扩展“{0}”，因为它不兼容 VS Code 版本“{1}”。

[vs/workbench/services/extensions/node/extensionPoints]
extensionDescription.activationEvents1 = `{0}` 属性值（可省略）应是字符串数组。
extensionDescription.activationEvents2 = 属性 `{0}` 和 `{1}` 必须同时指定或同时省略。
extensionDescription.empty = 扩展说明不能为空。
extensionDescription.engines = `{0}` 属性值（不可省略）应是对象。
extensionDescription.engines.vscode = `{0}` 属性值（不可省略）应是字符串。
extensionDescription.extensionDependencies = `{0}` 属性值（可省略）应是字符串数组。
extensionDescription.main1 = `{0}` 属性值（可省略）应是字符串。
extensionDescription.main2 = `main` 属性值（{0}）未包含在扩展所在的文件夹（{1}）内。这可能使扩展不可移植。
extensionDescription.main3 = 属性 `{0}` 和 `{1}` 必须同时指定或同时省略。
extensionDescription.name = `{0}` 属性值（不可省略）应是字符串。
extensionDescription.publisher = `publisher` 属性值（不可省略）应是字符串。
extensionDescription.version = `{0}` 属性值（不可省略）应是字符串。
fileReadFail = 未能读取文件 {0}：{1}。
jsonInvalidFormat = 格式 {0} 无效：应为 JSON 对象。
jsonParseFail = 未能分析 {0}：{1}。
jsonsParseReportErrors = 未能分析 {0}：{1}。
missingNLSKey = 找不到键 {0} 的消息。
notSemver = 扩展版本与 semver 不兼容。

[vs/workbench/services/files/common/workspaceWatcher]
enospcError = 未能在大型工作区中监视文件更改。请按照说明链接来解决此问题。
installNet = 下载 .NET Framework 4.5
learnMore = 说明
netVersionError = 需要微软.NET Framework 4.5。请访问链接安装它。

[vs/workbench/services/files2/common/fileService2]
deleteFailed = 未能删除非空的文件夹“{0}”。
err.readonly = 未能修改资源。
err.trash = 提供程序不支持移动到回收站。
err.write = 未能写入文件“{0}”。
fileExists_fileService2 = 已存在要创建的文件“{0}”。
fileIsDirectoryError = 预期的文件 {0} 实际上是一个目录。
fileModifiedError = 自以下时间已修改的文件：
fileNotFoundError = 找不到文件“{0}”。
invalidPath = 资源“{0}”的路径应是绝对路径
mkdirExistsError = {0} 存在, 但不是目录
unableToMoveCopyError1 = 当源路径与目标路径相同或为其父路径时, 未能移动或拷贝。
unableToMoveCopyError2 = 未能移动或拷贝。文件已存在于目标位置。
unableToMoveCopyError3 = 未能移动或拷贝。文件将替换其所在的文件夹。

[vs/workbench/services/files2/common/workspaceWatcher]
enospcError = 未能在大型工作区中监视文件更改。请按照说明链接来解决此问题。
installNet = 下载 .NET Framework 4.5
learnMore = 说明
netVersionError = 需要微软.NET Framework 4.5。请访问链接安装它。
neverShowAgain = 不再显示

[vs/workbench/services/files2/electron-browser/diskFileSystemProvider]
binFailed = 未能将“{0}”移动到回收站。
trashFailed = 未能将“{0}”移动到废纸篓。

[vs/workbench/services/files2/node/diskFileSystemProvider]
copyError = 未能将“{0}”拷贝到“{1}”（{2}）中。
fileExists_diskFileSystemProvider = 文件已存在。
fileNotExists = 文件不存在。
moveError = 未能将“{0}”移动到“{1}”（{2}）中。

[vs/workbench/services/integrity/node/integrityService]
integrity.dontShowAgain = 不再显示
integrity.moreInformation = 更多信息
integrity.prompt = {0} 安装似乎损坏。请重新安装。

[vs/workbench/services/keybinding/browser/keybindingService]
dispatch = 按键的分派逻辑。可为 `"code"`（推荐）或 `"keyCode"`。
invalid.keybindings = `contributes.{0}` 属性值无效：{1}
keybindings.json.args = 要传递给命令以执行的参数。
keybindings.json.command = 要执行的命令的名称
keybindings.json.key = 键或键序列，用空格分隔。
keybindings.json.title = 快捷键设置
keybindings.json.when = 键处于活动状态时的条件。
keyboardConfigurationTitle = 键盘
nonempty = 属性值不能为空。
optstring = `{0}` 属性值（可省略）应是字符串。
requirestring = `{0}` 属性值（不可省略）应是字符串。
unboundCommands = 以下是其他可用命令：
vscode.extension.contributes.keybindings = 用于快捷键。
vscode.extension.contributes.keybindings.args = 要传递给命令以执行的参数。
vscode.extension.contributes.keybindings.command = 要在触发快捷键时运行的命令的标识符。
vscode.extension.contributes.keybindings.key = 按键或按键序列。用加号分隔按键，用空格分隔序列。例如，Ctrl+O 和 Ctrl+L L（连续按键）。
vscode.extension.contributes.keybindings.linux = Linux 特定的键或键序列。
vscode.extension.contributes.keybindings.mac = macOS 特定的键或键序列。
vscode.extension.contributes.keybindings.when = 键处于活动状态时的条件。
vscode.extension.contributes.keybindings.win = Windows 特定的键或键序列。

[vs/workbench/services/keybinding/common/keybindingEditing]
emptyKeybindingsHeader = 将快捷键放在此文件中以覆盖默认值
errorInvalidConfiguration = 未能写入快捷键配置文件。文件内含有非数组类型对象。请打开文件进行清理，然后重试。
errorKeybindingsFileDirty = 快捷键配置文件已变更，现在未能写入。请先保存此文件，然后重试。
parseErrors = 未能写入快捷键配置文件。请打开文件并更正错误或警告，然后重试。

[vs/workbench/services/keybinding/electron-browser/keybinding.contribution]
keyboardConfigurationTitle = 键盘
touchbar.enabled = 启用键盘上的 macOS 触控栏按钮 (若可用)。
touchbar.ignored = 触摸栏中不应显示的条目的一组标识符，如 `"workbench.action.navigateBack"`。

[vs/workbench/services/label/common/labelService]
untitledWorkspace = 无标题（工作区）
vscode.extension.contributes.resourceLabelFormatters = 提供资源标签格式化规则。
vscode.extension.contributes.resourceLabelFormatters.authority = 要在其上匹配格式化程序的 URI 权限。支持简单的 glob 模式。
vscode.extension.contributes.resourceLabelFormatters.formatting = 用于格式化 URI 资源标签的规则。
vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix = 附加到工作区标签的后缀。
vscode.extension.contributes.resourceLabelFormatters.label = 要显示的标签规则，如支持将 myLabel:/${path}. ${path}、${scheme} 和 ${authority} 用作变量。
vscode.extension.contributes.resourceLabelFormatters.scheme = 要在其上匹配格式化程序的 URI 方案，如 `file:`。支持简单的 glob 模式。
vscode.extension.contributes.resourceLabelFormatters.separator = 要在 URI 标签显示中所用的分隔符，如 `/` 或 `''`。
vscode.extension.contributes.resourceLabelFormatters.tildify = 是否应在可能的情况下按斜体显示 URI 标签的开头。
workspaceName = {0}（工作区）
workspaceNameVerbose = {0}（工作区）

[vs/workbench/services/mode/common/workbenchModeService]
invalid = `contributes.{0}` 属性值必须为数组。
invalid.empty = `contributes.{0}` 属性值不能为空。
opt.aliases = `{0}` 属性值（可省略）应是字符串数组。
opt.configuration = `{0}` 属性值（可省略）应是字符串。
opt.extensions = `{0}` 属性值（可省略）应是字符串数组。
opt.filenames = `{0}` 属性值（可省略）应是字符串数组。
opt.firstLine = `{0}` 属性值（可省略）应是字符串。
opt.mimetypes = `{0}` 属性值（可省略）应是字符串数组。
require.id = `{0}` 属性值（不可省略）应是字符串。
vscode.extension.contributes.languages = 有助于语言声明。
vscode.extension.contributes.languages.aliases = 语言的别名。
vscode.extension.contributes.languages.configuration = 包含语言配置选项的文件的相对路径。
vscode.extension.contributes.languages.extensions = 与语言关联的文件扩展名。
vscode.extension.contributes.languages.filenamePatterns = 与语言关联的文件名 glob 模式。
vscode.extension.contributes.languages.filenames = 与语言关联的文件名。
vscode.extension.contributes.languages.firstLine = 与语言文件的第一行匹配的正则表达式。
vscode.extension.contributes.languages.id = 语言标识符。
vscode.extension.contributes.languages.mimetypes = 与语言关联的 Mime 类型。

[vs/workbench/services/notification/common/notificationService]
neverShowAgain = 不再显示

[vs/workbench/services/preferences/browser/preferencesService]
defaultKeybindings = 默认的快捷键
defaultSettings = 默认设置
emptyKeybindingsHeader = 将快捷键放在此文件中以覆盖默认值
fail.createSettings = 未能创建“{0}”（{1}）。
folderSettingsName = {0}（文件夹设置）
openFolderFirst = 首先打开文件夹以创建工作区设置

[vs/workbench/services/preferences/common/keybindingsEditorModel]
cat.title = {0}：{1}
default = 默认值
meta = 元数据
option = 选项
user = 用户

[vs/workbench/services/preferences/common/preferences]
userSettingsTarget = 用户设置
workspaceSettingsTarget = 工作区设置

[vs/workbench/services/preferences/common/preferencesEditorInput]
keybindingsInputName = 快捷键
settingsEditor2InputName = 设置
settingsEditorName = 默认设置

[vs/workbench/services/preferences/common/preferencesModels]
commonlyUsed = 常用设置
defaultKeybindingsHeader = 将快捷键放入快捷键文件来覆盖快捷键。
validations.exclusiveMax = 值应小于 {0}。
validations.exclusiveMin = 值应大于 {0}。
validations.expectedInteger = 值应是整数。
validations.expectedNumeric = 值应是数字。
validations.max = 值应小于或等于 {0}。
validations.maxLength = 值应有至多 {0} 个字符。
validations.min = 值应大于或等于 {0}。
validations.minLength = 值应有至少 {0} 个字符。
validations.multipleOf = 值应是 {0} 的倍数。
validations.regex = 值应匹配正则表达式“{0}”。
validations.stringArrayItemEnum = 值 {0} 不是 {1} 之一。
validations.stringArrayItemPattern = 值 {0} 应匹配正则表达式 {1}。
validations.stringArrayMaxItem = 数组应有至多 {0} 个项。
validations.stringArrayMinItem = 数组应有至少 {0} 项。
validations.stringArrayUniqueItems = 数组不应有重复项。

[vs/workbench/services/progress/browser/progressService]
cancel = 取消
dismiss = 关闭
progress.text2 = {0}：{1}
progress.title2 = [{0}]：{1}
progress.title3 = [{0}] {1}：{2}
status.progress = 过程消息

[vs/workbench/services/remote/common/abstractRemoteAgentService]
connectionError = 未能连接到远程扩展宿主服务器（错误：{0}）

[vs/workbench/services/textMate/browser/abstractTextMateService]
invalid.embeddedLanguages = `contributes.{0}.embeddedLanguages` 属性值应是从作用域名称到语言的对象映射。提供的值为 {1}
invalid.injectTo = `contributes.{0}.injectTo` 属性值应是语言范围名称数组。提供的值为 {1}
invalid.language = `contributes.{0}.language` 属性值包含未知语言。提供的值为 {1}
invalid.path.0 = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
invalid.scopeName = `contributes.{0}.scopeName` 属性值应是字符串。提供的值为 {1}
invalid.tokenTypes = `contributes.{0}.tokenTypes` 属性值应是从作用域名称到标记类型的对象映射。提供的值为 {1}
neverAgain = 不再显示
too many characters = 出于性能原因，对长行跳过词法分析。长行的长度可通过 `editor.maxTokenizationLineLength` 设置进行配置。

[vs/workbench/services/textMate/common/TMGrammarFactory]
no-tm-grammar = 没有注册这种语言的 TextMate 语法。

[vs/workbench/services/textMate/common/TMGrammars]
vscode.extension.contributes.grammars = 贡献 TextMate 语法。
vscode.extension.contributes.grammars.embeddedLanguages = 如果此语法包含嵌入式语言，则为作用域名称到语言标识符的映射。
vscode.extension.contributes.grammars.injectTo = 此语法注入到的语言范围名称列表。
vscode.extension.contributes.grammars.language = 此语法为其贡献了内容的语言标识符。
vscode.extension.contributes.grammars.path = tmLanguage 文件的路径，相对于扩展文件夹。
vscode.extension.contributes.grammars.scopeName = tmLanguage 文件所用的 TextMate 范围名称。
vscode.extension.contributes.grammars.tokenTypes = 从作用域名到标记类型的映射。

[vs/workbench/services/textfile/browser/textFileService]
allFiles = 所有文件
cancel = 取消
confirmOverwrite = “{0}”已存在，是否进行替换？
dontSave = 不保存(&&N)
fileBinaryError = 文件为二进制文件，不能作为文档打开
files.backup.failSave = 未能将更改的文件写入备份位置（错误：{0}）请先保存您的文件，然后退出。
irreversible = 文件夹 {0} 中已存在同名的文件或文件夹。替换它将覆盖其当前内容。
noExt = 无扩展
replaceButtonLabel = 替换(&&R)
save = 保存(&&S)
saveAll = 全部保存(&&S)
saveAsTitle = 另存为
saveChangesDetail = 如果不保存，更改将丢失。
saveChangesMessage = 是否保存对 {0} 的更改？
saveChangesMessages = 是否保存对下列 {0} 个文件的更改？

[vs/workbench/services/textfile/common/textFileEditorModel]
genericSaveError = 未能保存“{0}”：{1}
saveFileFirst = 文件已更新。请首先保存它，然后再通过另一个编码重新打开它。

[vs/workbench/services/textfile/electron-browser/nativeTextFileService]
fileBinaryError = 文件为二进制文件，不能作为文档打开
fileReadOnlyError = 文件为只读文件

[vs/workbench/services/themes/browser/fileIconThemeData]
error.cannotparseicontheme = 解析文件图标主题时出错：{0}
error.invalidformat = 文件图标主题文件的格式无效：文件内容不是对象。

[vs/workbench/services/themes/browser/fileIconThemeStore]
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
reqarray = 扩展点 `{0}` 应是数组。
reqid = `contributes.{0}.id` 属性值应是字符串。提供的值为 {1}
reqpath = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
vscode.extension.contributes.iconThemes = 贡献文件图标主题。
vscode.extension.contributes.iconThemes.id = 用户设置中使用的图标主题的标识符。
vscode.extension.contributes.iconThemes.label = 显示给用户的图标主题的标签。
vscode.extension.contributes.iconThemes.path = 图标主题文件的路径，相对于扩展文件夹。

[vs/workbench/services/themes/browser/workbenchThemeService]
colorTheme = 指定用在工作台中的颜色主题。
colorThemeError = 主题未知或未安装。
editorColors = 覆盖当前所选颜色主题中的编辑器颜色和字体样式。
editorColors.comments = 设置注释的颜色和样式
editorColors.functions = 设置函数定义与引用的颜色和样式。
editorColors.keywords = 设置关键字的颜色和样式。
editorColors.numbers = 设置数字的颜色和样式。
editorColors.strings = 设置字符串文本的颜色和样式
editorColors.textMateRules = 使用 TextMate 主题规则设置颜色和样式（高级）
editorColors.types = 设置类型定义与引用的颜色和样式。
editorColors.variables = 设置变量定义和引用的颜色和样式。
error.cannotloadtheme = 未能加载 {0}：{1}
iconTheme = 指定在工作台中使用的图标主题，或指定 `null` 以不显示任何文件图标。
iconThemeError = 文件图标主题未知或未安装。
noIconThemeDesc = 无文件图标
workbenchColors = 覆盖当前所选颜色主题的颜色。

[vs/workbench/services/themes/common/colorExtensionPoint]
contributes.color = 提供由扩展定义的主题颜色
contributes.color.description = 主题颜色描述
contributes.color.id = 主题颜色标识符。
contributes.color.id.format = 标识符应满足模式 `aa[.bb]*`。
contributes.defaults.dark = 深色主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
contributes.defaults.highContrast = 高对比度主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
contributes.defaults.light = 浅色主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
invalid.colorConfiguration = `configuration.colors` 属性值应是数组。
invalid.default.colorType = {0} 应是十六进制颜色值（#RRGGBB[AA] 或 #RGB[A]）或是主题颜色标识符，其提供默认值。
invalid.defaults = `configuration.colors.defaults` 属性值（不可省略）必须包含 `"light"`（浅色）、`"dark"`（深色）和 `"highContrast"`（高对比度）。
invalid.description = `configuration.colors.description` 属性值（不可省略）不能为空。
invalid.id = `configuration.colors.id` 属性值（不可省略）不能为空。
invalid.id.format = `configuration.colors.id` 属性值必须满足模式 `word[.word]*`。

[vs/workbench/services/themes/common/colorThemeData]
error.cannotload = 解析 tmTheme 文件 {0} 时出现问题：{1}
error.cannotparse = 解析 tmTheme 文件 {0} 时出现问题。
error.cannotparsejson = 解析 JSON 主题文件 {0} 时出现问题。
error.invalidformat = JSON 颜色主题文件的格式无效：文件内容不是对象。
error.invalidformat.colors = 解析颜色主题文件 {0} 时出现问题。`colors` 属性值不是对象。
error.invalidformat.tokenColors = 解析颜色主题文件 {0} 时出现问题。`tokenColors` 属性值不是指定颜色的数组或指向 TextMate 主题文件的路径。
error.plist.invalidformat = 解析 tmTheme 文件 {0} 时出现问题。`settings` 属性值不是数组。

[vs/workbench/services/themes/common/colorThemeSchema]
schema.colors = 语法突出显示颜色
schema.fontStyle.error = 字体样式应是 `"italic"`（斜体）、`"bold"`（粗体）、`"underline"`（下划线）、上述的组合或空字符串。
schema.properties.name = 规则的描述。
schema.properties.scope = 此规则适用的范围选择器。
schema.token.background.warning = 暂不支持标记背景色。
schema.token.fontStyle = 这条规则的字体样式：`"italic"`（斜体）、`"bold"`（粗体）、`"underline"`（下划线）或是上述的组合。空字符串将清除继承的设置。
schema.token.fontStyle.none = 无（清除继承的设置）
schema.token.foreground = 标记的前景色。
schema.token.settings = 标记的颜色和样式。
schema.tokenColors.path = tmTheme 文件路径（相对于当前文件）
schema.workbenchColors = 工作台中的颜色

[vs/workbench/services/themes/common/colorThemeStore]
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
reqarray = 扩展点 `{0}` 应是数组。
reqpath = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
vscode.extension.contributes.themes = 贡献 TextMate 颜色主题。
vscode.extension.contributes.themes.id = 用户设置中使用的图标主题的标识符。
vscode.extension.contributes.themes.label = 显示给用户的颜色主题标签。
vscode.extension.contributes.themes.path = tmTheme 文件的路径，相对于扩展文件夹。
vscode.extension.contributes.themes.uiTheme = 颜色的基本主题：`"vs"` 是浅色主题，`"vs-dark"` 是深色主题，`"hc-black"` 是深色高对比度主题。

[vs/workbench/services/themes/common/fileIconThemeSchema]
schema.file = 默认文件图标，针对不与任何扩展名、文件名或语言标识符匹配的所有文件显示。
schema.fileExtension = 关联的图标定义的标识符。
schema.fileExtensions = 将文件扩展名关联到图标。对象中的键是文件扩展名。扩展名是文件名的最后一部分，位于最后一个点之后（不包括该点）比较扩展名时不区分大小写。
schema.fileName = 关联的图标定义的标识符。
schema.fileNames = 将文件名关联到图标。对象中的键是完整文件名，其中不含任何路径字段。文件名可以包括点和可能有的文件扩展名。不允许使用模式或通配符。文件名匹配不区分大小写。
schema.folder = 折叠文件夹的文件夹图标，如果未设置 `folderExpanded`，也指展开文件夹的文件夹图标。
schema.folderExpanded = 展开文件夹的文件夹图标。展开文件夹图标是可选的。如果未设置，将显示为文件夹定义的图标。
schema.folderName = 关联的图标定义的标识符。
schema.folderNameExpanded = 关联的图标定义的标识符。
schema.folderNames = 将文件夹名关联到图标。对象中的键是文件夹名，其中不含任何路径字段。不允许使用模式或通配符。文件夹名匹配不区分大小写。
schema.folderNamesExpanded = 将文件夹名关联到展开文件夹的图标。对象中的键是文件夹名，其中不含任何路径字段。不允许使用模式或通配符。文件夹名匹配不区分大小写。
schema.font-format = 字体的格式。
schema.font-path = 相对于当前图标主题文件的字体路径。
schema.font-size = 字体的默认大小。
schema.font-sstyle = 字体的样式。
schema.font-weight = 字体的粗细。
schema.fontCharacter = 使用字形字体时要使用的字体中的字符。
schema.fontColor = 使用字形字体时要使用的颜色。
schema.fontId = 使用某种字体时字体的标识符。默认为第一个字体定义。
schema.fontSize = 使用某种字体时文本字体的字体大小，以百分比表示。默认为字体定义中的大小。
schema.fonts = 图标定义中使用的字体。
schema.hidesExplorerArrows = 隐藏“资源”面板中文件夹前的箭头。
schema.highContrast = 高对比度颜色主题中文件图标的可选关联。
schema.iconDefinition = 图标定义。对象键是定义的标识符。
schema.iconDefinitions = 将文件关联到图标时可以使用的所有图标的说明。
schema.iconPath = 使用 SVG 或 PNG 时到图像的路径，相对于图标设置文件。
schema.id = 字体的标识符。
schema.languageId = 关联的图标定义的标识符。
schema.languageIds = 将语言与图标相关联。对象键是语言贡献点中定义的语言标识符。
schema.light = 浅色主题中文件图标的可选关联。
schema.src = 字体的位置。

[vs/workbench/services/userData/common/settingsSync]
Settings Conflicts = 本地 ↔ 远程（设置冲突）
errorInvalidSettings = 无法同步设置。请在没有任何错误和警告的情况下解决冲突，然后重试。

[vs/workbench/services/workspace/browser/workspaceEditingService]
cancel = 取消
differentSchemeRoots = 不能在一个工作区中打开来自不同文件系统提供程序的文件夹。
doNotSave = 不保存
errorInvalidTaskConfiguration = 未能写入工作区配置文件。请打开文件以更正错误或警告，然后重试。
errorWorkspaceConfigurationFileDirty = 文件已变更，因此未能写入工作区配置文件。请先保存此文件，然后重试。
openWorkspaceConfigurationFile = 打开工作区配置
save = 保存
saveWorkspace = 保存工作区
saveWorkspaceDetail = 若要再次打开此工作区，请先保存。
saveWorkspaceMessage = 您是否将您的工作区配置保存为文件？

[vs/workbench/services/workspace/electron-browser/workspaceEditingService]
ok = 确定
workspaceOpenedDetail = 已在另一个窗口打开工作区。请先关闭该窗口，然后重试。
workspaceOpenedMessage = 未能保存工作区“{0}”

[vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService]
differentSchemeRoots = 同一工作区中不允许来自不同提供程序的工作区文件夹。
errorInvalidTaskConfiguration = 无法写入工作区配置文件。请打开文件以更正错误或警告，然后重试。
errorWorkspaceConfigurationFileDirty = 文件已变更，因此无法写入工作区配置文件。请先保存此文件，然后重试。
openWorkspaceConfigurationFile = 打开工作区配置
save = 保存
saveWorkspace = 保存工作区

[vs/workbench/services/workspaces/electron-browser/workspaceEditingService]
cancel = 取消
doNotSave = 不保存
ok = 确定
save = 保存
saveWorkspaceDetail = 若要再次打开此工作区，请先保存。
saveWorkspaceMessage = 您是否要将您的工作区配置保存为文件？
workspaceOpenedDetail = 已在另一个窗口打开工作区。请先关闭该窗口，然后重试。
workspaceOpenedMessage = 无法保存工作区“{0}”
