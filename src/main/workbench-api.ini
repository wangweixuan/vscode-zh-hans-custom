[vs/workbench/api/browser/mainThreadAuthentication]
allow = 允许
cancel = 拒绝
confirmAuthenticationAccess = 扩展“{0}”正在尝试从 {1} 中访问身份验证信息。
confirmLogin = 扩展“{0}”希望使用{1}登录。
manageExensions = 选择可以访问此帐户的扩展
manageTrustedExtensions = 管理受信任的扩展
showUsage = 使用此帐户显示扩展和功能
signOut = 注销
signOutConfirm = 注销 {0}
signOutMessage = 帐户 {0} 正由以下项使用：\n\n{1}\n\n是否注销这些功能？
signedOut = 已注销。
sync = 设置同步

[vs/workbench/api/browser/mainThreadEditors]
diffLeftRightLabel = {0} ⟷ {1}

[vs/workbench/api/browser/mainThreadExtensionService]
disabledDep = 未能激活“{0}”扩展，因为它依赖于“{1}”扩展，该扩展已禁用。是否启用扩展并重新加载窗口？
enable dep = 启用和重新加载
install missing dep = 安装并重新加载
reload = 重新加载窗口
reload window = 未能激活“{0}”扩展，因为它依赖于未加载的“{1}”扩展。是否重新加载窗口以加载扩展名？
uninstalledDep = 未能激活“{0}”扩展，因为它依赖于未安装的“{1}”扩展。是否安装扩展并重新加载窗口？
unknownDep = 未能激活“{0}”扩展，因为它依赖于未知的“{1}”扩展。

[vs/workbench/api/browser/mainThreadFileSystemEventService]
files.participants.timeout = 终止文件创建、重命名和删除处理程序前的超时（以毫秒为单位）。`0` 表示禁用处理程序。

[vs/workbench/api/browser/mainThreadMessageService]
cancel = 取消
defaultSource = 扩展
extensionSource = {0}（扩展）
manageExtension = 管理扩展
ok = 确定

[vs/workbench/api/browser/mainThreadProgress]
manageExtension = 管理扩展

[vs/workbench/api/browser/mainThreadSaveParticipant]
timeout.onWillSave = 在 1750ms 后终止了存储事件处理程序

[vs/workbench/api/browser/mainThreadTask]
task.label = {0}：{1}

[vs/workbench/api/browser/mainThreadWebview]
defaultEditLabel = 编辑
errorMessage = 还原视图时出错：{0}

[vs/workbench/api/browser/mainThreadWorkspace]
folderStatusChangeFolder = 扩展“{0}”更改了工作区中的文件夹
folderStatusMessageAddMultipleFolders = 扩展“{0}”添加了 {1} 个文件夹到工作区
folderStatusMessageAddSingleFolder = 扩展“{0}”添加了 1 个文件夹到工作区
folderStatusMessageRemoveMultipleFolders = 扩展“{0}”从工作区删除了 {1} 个文件夹
folderStatusMessageRemoveSingleFolder = 扩展“{0}”从工作区删除了 1 个文件夹

[vs/workbench/api/browser/viewsExtensionPoint]
ViewContainerDoesnotExist = 面板“{0}”不存在。添加到其中的子面板将被转移到“资源”面板中。
ViewContainerRequiresProposedAPI = 查看容器“{0}”需要启用“enableProposedApi”以添加到“Remote”。
duplicateView1 = 不能在“{1}”面板中添加多个具有相同标识符 `{0}` 的子面板。
duplicateView2 = 面板“{1}”中已有标识符为 `{0}` 的子面板。
optstring = `{0}` 属性值（可省略）应是字符串。
requirearray = `views` 属性值应是数组。
requireidstring = `{0}` 属性值应是字符串，且只能包含字母、数字、下划线“_”和短横线“-”。
requirestring = `{0}` 属性值应是字符串。
showViewlet = 显示“{0}”
test = 测试
view = 视图
viewcontainer requirearray = `viewsContainers` 属性值应是数组。
views.container.activitybar = 在侧边栏中添加面板
views.container.panel = 向面板提供视图容器
views.contributed = 在自定义面板中添加子面板
views.debug = 在“调试”面板中添加子面板
views.explorer = 在“资源”面板中添加子面板
views.remote = 在活动栏中为远程容器提供视图。要为此容器提供帮助，需要启用“enableProposedApi”。
views.scm = 在“版本”面板中添加子面板
views.test = 在“测试”面板中添加子面板
vscode.extension.contributes.view.group = 视图中的嵌套组。
vscode.extension.contributes.view.id = 子面板的唯一标识符
vscode.extension.contributes.view.name = 显示给用户的子面板名称
vscode.extension.contributes.view.remoteName = 与此视图关联的远程类型的名称。
vscode.extension.contributes.view.when = 显示此子面板的条件
vscode.extension.contributes.views = 在编辑器中添加子面板
vscode.extension.contributes.views.containers.icon = 面板图标的路径。图标大小为 24x24，居中放置在 50x40 的区域内。图片格式不限，推荐使用 SVG
vscode.extension.contributes.views.containers.id = 面板的唯一标识符
vscode.extension.contributes.views.containers.title = 显示给用户的面板名称
vscode.extension.contributes.viewsContainers = 在编辑器中添加面板

[vs/workbench/api/common/configurationExtensionPoint]
invalid.allOf = 已弃用：请将多个配置单元作为数组传递给 `configuration` 贡献点。
invalid.properties = `configuration.properties` 属性值应是对象。
invalid.property = `configuration.property` 属性值应是字符串。
invalid.title = `configuration.title` 属性值应是字符串。
scope.application.description = 应用程序特定的配置，只能在本地用户设置中配置。
scope.deprecationMessage = 设置后，该属性将被标记为已弃用，并将给定的消息显示为解释。
scope.description = 配置适用的范围。可用范围有 `"application"`、`"machine"`、`"window"`和 `"resource"`。
scope.enumDescriptions = 枚举值的说明。
scope.language-overridable.description = 可在语言特定设置中配置的资源配置。
scope.machine-overridable.description = 也可在工作区或文件夹设置中配置的计算机配置。
scope.machine.description = 特定于计算机的配置，只能在本地和远程用户设置中配置。
scope.markdownDeprecationMessage = 将属性标记为弃用，并显示给定的 Markdown 消息。
scope.markdownDescription = Markdown 格式的说明。
scope.markdownEnumDescriptions = Markdown 格式的枚举值说明。
scope.resource.description = 特定于资源的配置，可在用户设置、工作区设置或文件夹设置中配置。
scope.window.description = 特定于窗口的配置，可在用户设置或工作区设置中配置。
unknownWorkspaceProperty = 未知的工作区配置属性。
vscode.extension.contributes.configuration = 用于配置字符串。
vscode.extension.contributes.configuration.properties = 配置属性的描述。
vscode.extension.contributes.configuration.title = 设置摘要。此标签将在设置文件中用作分隔注释。
vscode.extension.contributes.defaultConfiguration = 按语言提供默认编辑器配置设置。
workspaceConfig.extensions.description = 工作区扩展。
workspaceConfig.folders.description = 将载入到工作区的文件夹列表。
workspaceConfig.launch.description = 工作区启动配置。
workspaceConfig.name.description = 文件夹的可选名称。
workspaceConfig.path.description = 文件路径。相对路径应相对于工作区根目录。
workspaceConfig.remoteAuthority = 工作区所在的远程服务器。仅适用于未存储的远程工作区。
workspaceConfig.settings.description = 工作区设置。
workspaceConfig.tasks.description = 工作区任务配置。
workspaceConfig.uri.description = 文件夹的 URI。

[vs/workbench/api/common/extHost.api.impl]
extensionLabel = {0}（扩展）

[vs/workbench/api/common/extHostDiagnostics]
limitHit = 还有 {0} 个问题。

[vs/workbench/api/common/extHostExtensionActivator]
activationError = 激活扩展“{0}”出错：{1}。
failedDep1 = 未能激活扩展“{0}”，因为它依赖于未能激活的扩展“{1}”。

[vs/workbench/api/common/extHostExtensionService]
extensionTestError = 路径 {0} 未指向有效的扩展测试运行程序。

[vs/workbench/api/common/extHostProgress]
extensionSource = {0}（扩展）

[vs/workbench/api/common/extHostStatusBar]
status.extensionMessage = 扩展状态

[vs/workbench/api/common/extHostTreeViews]
treeView.duplicateElement = 标识符为 {0} 的元素已被注册。
treeView.notRegistered = 没有标识符为 {0} 的树视图。

[vs/workbench/api/common/extHostWorkspace]
updateerror = 扩展“{0}”未能更新工作区文件夹：{1}

[vs/workbench/api/common/jsonValidationExtensionPoint]
contributes.jsonValidation = 提供 JSON Schema。
contributes.jsonValidation.fileMatch = 要匹配的 JSON 文件的模式，如 `"package.json"` 或 `"*.launch"`。
contributes.jsonValidation.url = JSON Schema 文件的位置。可为使用 `http:` 或 `https:` 协议的 URL，或相对于扩展所在文件夹的相对路径。
invalid.fileMatch = `configuration.jsonValidation.fileMatch` 属性不能省略。
invalid.jsonValidation = `configuration.jsonValidation` 属性值应是数组。
invalid.path.1 = `contributes.{0}.url` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
invalid.url = `configuration.jsonValidation.url` 属性值应是 URL 或相对路径。
invalid.url.fileschema = `configuration.jsonValidation.url` 属性值是无效的相对 URL：{0}。
invalid.url.schema = `configuration.jsonValidation.url` 属性值必须以 `http:`，`https:` 或 `./` 开头。

[vs/workbench/api/common/menusExtensionPoint]
comment.actions = 提供的“评论”面板上下文菜单，显示为“评论”编辑器中的按钮。
comment.title = 提供的“评论”面板上下文菜单
commentThread.actions = 提供的评论条目上下文菜单，显示为“评论”编辑器中的按钮。
commentThread.title = 提供的评论条目上下文菜单
dup = 命令 `{0}` 在 `commands` 部分重复出现。
dupe.command = 菜单项引用的命令中默认和替代命令相同
menuId.invalid = `{0}` 不是有效的菜单标识符
menus.commandPalette = 命令栏
menus.debugCallstackContext = 调试调用堆栈上下文菜单
menus.editorContext = 编辑器上下文菜单
menus.editorTabContext = 编辑器选项卡上下文菜单
menus.editorTitle = 编辑器标题菜单
menus.explorerContext = “资源”面板上下文菜单
menus.extensionContext = 扩展上下文菜单
menus.resourceGroupContext = 版本控制资源组上下文菜单
menus.resourceStateContext = 版本控制资源状态上下文菜单
menus.scmSourceControl = 版本控制菜单
menus.scmTitle = 版本控制标题菜单
menus.touchBar = 触控栏（macOS）
missing.altCommand = 菜单项引用的替代命令 `{0}` 未在 `commands` 部分定义。
missing.command = 菜单项引用的命令 `{0}` 未在 `commands` 部分定义。
nonempty = 应为非空值。
opticon = `icon` 属性值（可省略）应是字符串，如 `{dark, light}`。
optstring = `{0}` 属性值（可省略）应是字符串。
proposedAPI.invalid = 菜单标识符“{0}”是测试中的 API，仅当使用测试版本，或打开以下命令行开关时才可用：--enable-proposed-api {1}
requireStringOrObject = `{0}` 属性值（不可省略）应是字符串或对象。
requirearray = 菜单项应是数组。
requirestring = `{0}` 属性值（不可省略）应是字符串。
requirestrings = `{0}` 和 `{1}` 属性值（不可省略）应是字符串。
view.itemContext = 提供的视图中的项目的上下文菜单。
view.timelineContext = 时间线视图项上下文菜单
view.timelineTitle = 时间线视图标题菜单
view.viewTitle = 提供的视图的标题菜单。
vscode.extension.contributes.commandType.category = （可选）类别字符串，命令在界面中根据此项分组。
vscode.extension.contributes.commandType.command = 要执行的命令的标识符。
vscode.extension.contributes.commandType.icon = （可选）在界面中显示的命令图标，可为文件路径或主题配置。
vscode.extension.contributes.commandType.icon.dark = 使用暗主题时的图标路径。
vscode.extension.contributes.commandType.icon.light = 使用浅色主题时的图标路径。
vscode.extension.contributes.commandType.precondition = （可选）使命令可用的条件。
vscode.extension.contributes.commandType.title = 显示给用户的命令标题。
vscode.extension.contributes.commands = 对命令栏提供命令。
vscode.extension.contributes.menuItem.alt = 要执行的替代命令的标识符。该命令必须定义在 `commands` 部分中。
vscode.extension.contributes.menuItem.command = 要执行的命令的标识符。该命令必须定义在 `commands` 部分中。
vscode.extension.contributes.menuItem.group = 此命令所属的组。
vscode.extension.contributes.menuItem.when = 显示此项目的条件。
vscode.extension.contributes.menus = 向编辑器提供菜单项。

[vs/workbench/api/node/extHostDebugService]
debug.terminal.title = 调试对象
