[vs/workbench/contrib/codeActions/common/codeActionsContribution]
codeActionsOnSave = 在存储时运行的代码操作类型。
codeActionsOnSave.fixAll = 在存储文件时运行自动修复操作。
codeActionsOnSave.generic = 在存储文件时运行“{0}”操作。
codeActionsOnSaveTimeout = 在存储文件时允许的代码操作的超时时间，以毫秒为单位。

[vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint]
contributes.codeActions = 配置资源要使用的编辑器。
contributes.codeActions.description = 代码操作的说明。
contributes.codeActions.kind = 代码操作的种类。
contributes.codeActions.languages = 启用代码操作的语言模式。
contributes.codeActions.title = 用户界面中使用的代码操作的标签。

[vs/workbench/contrib/codeActions/common/documentationExtensionPoint]
contributes.documentation = 贡献的文档。
contributes.documentation.refactoring = 为重构提供了文档。
contributes.documentation.refactoring.command = 命令已执行。
contributes.documentation.refactoring.title = UI 中使用的文档的标签。
contributes.documentation.refactoring.when = when 子句。
contributes.documentation.refactorings = 为重构提供了文档。

[vs/workbench/contrib/codeEditor/browser/accessibility/accessibility]
ShowAccessibilityHelpAction = 显示辅助功能帮助
auto_off = 编辑器被配置为自动检测是否附加了屏幕阅读器，当前未检测到。
auto_on = 编辑器自动检测到已附加屏幕阅读器。
auto_unknown = 编辑器被配置为使用平台 API 以检测是否附加了屏幕阅读器，但当前运行时不支持此功能。
changeConfigToOnMac = 要设置对屏幕阅读器优化，请按 Command+E。
changeConfigToOnWinLinux = 要设置为对屏幕阅读器优化，请按 Ctrl+E。
configuredOff = 已设置为不对屏幕阅读器优化。
configuredOn = 已设置为对屏幕阅读器优化，您可以更改 `editor.accessibilitySupport` 设置。
emergencyConfOn = 现在将 `editor.accessibilitySupport` 设置更改为 `"on"`。
introMsg = 感谢试用 VS Code 的辅助功能选项。
openDocMac = 按 Command+H 键以打开浏览器窗口，其中包含更多有关 VS Code 辅助功能的信息。
openDocWinLinux = 按 Ctrl+H 键以打开浏览器窗口，其中包含更多有关 VS Code 辅助功能的信息。
openingDocs = 正在打开 VS Code 辅助功能文档页面。
outroMsg = 按 Esc 键或 Shift+Esc 键以消除此工具提示并返回到编辑器。
status = 状态：
tabFocusModeOffMsg = 在当前编辑器中按 Tab 键将插入制表符。通过按 {0} 切换此行为。
tabFocusModeOffMsgNoKb = 在当前编辑器中按 Tab 键会插入制表符。当前未能通过快捷键触发命令 {0}。
tabFocusModeOnMsg = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。通过按 {0} 切换此行为。
tabFocusModeOnMsgNoKb = 在当前编辑器中按 Tab 键会将焦点移动到下一个可聚焦的元素。当前未能通过快捷键触发命令 {0}。

[vs/workbench/contrib/codeEditor/browser/diffEditorHelper]
hintTimeout = 差异算法已提前停止（在 {0} 毫秒后）
hintWhitespace = 显示空白差异
removeTimeout = 删除限制

[vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget]
label.closeButton = 关闭
label.find = 查找
label.nextMatchButton = 下一个匹配项
label.previousMatchButton = 上一个匹配项
placeholder.find = 查找

[vs/workbench/contrib/codeEditor/browser/inspectKeybindings]
developer = 开发者
workbench.action.inspectKeyMap = 开发者：检查键盘映射
workbench.action.inspectKeyMapJSON = 检查键盘映射（JSON）

[vs/workbench/contrib/codeEditor/browser/inspectTMScopes/inspectTMScopes]
inspectTMScopes = 开发者：检查 TextMate 作用域
inspectTMScopesWidget.loading = 正在加载…

[vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint]
formatError = {0}：格式无效，应为 JSON 对象。
parseErrors = 错误分析 {0}：{1}
schema.autoCloseBefore = 在自动闭合设置为 `"languageDefined"` 时，定义使括号或引号自动闭合的光标后面的字符。通常是不会成为表达式开头的一组字符。
schema.autoClosingPairs = 定义括号对。当输入左方括号时，将自动插入右方括号。
schema.autoClosingPairs.notIn = 定义禁用了自动配对的作用域列表。
schema.blockComment.begin = 作为块注释开头的字符序列。
schema.blockComment.end = 作为块注释结尾的字符序列。
schema.blockComments = 定义块注释的标记方式。
schema.brackets = 定义增加和减少缩进的括号。
schema.closeBracket = 右方括号字符或字符串序列。
schema.comments = 定义注释符号
schema.folding = 此语言的折叠设置。
schema.folding.markers = 语言特定的折叠标记，如 `"#region"` 与 `"#endregion"`。开始与结束标记的正则表达式需设计得效率高，因其将对每一行的内容进行测试。
schema.folding.markers.end = 结束标记的正则表达式模式。其应以 `^` 开始。
schema.folding.markers.start = 开始标记的正则表达式模式。其应以 `^` 开始。
schema.folding.offSide = 在使用缩进标记代码块（off-side rule）的语言中，空白行将属于其之后的代码块。
schema.indentationRules = 语言的缩进设置。
schema.indentationRules.decreaseIndentPattern = 如果某行文本匹配此模式，则其后所有行都应被取消缩进一次（直到匹配其他规则）
schema.indentationRules.decreaseIndentPattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.decreaseIndentPattern.flags = decreaseIndentPattern 的正则表达式开关。
schema.indentationRules.decreaseIndentPattern.pattern = decreaseIndentPattern 的正则表达式模式。
schema.indentationRules.increaseIndentPattern = 如果一行文本匹配此模式，则之后所有内容都应被缩进一次（直到匹配其他规则）。
schema.indentationRules.increaseIndentPattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.increaseIndentPattern.flags = increaseIndentPattern 的正则表达式开关。
schema.indentationRules.increaseIndentPattern.pattern = increaseIndentPattern 的正则表达式模式。
schema.indentationRules.indentNextLinePattern = 如果某一行匹配此模式，那么仅此行之后的**下一行**应缩进一次。
schema.indentationRules.indentNextLinePattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.indentNextLinePattern.flags = indentNextLinePattern 的正则表达式开关。
schema.indentationRules.indentNextLinePattern.pattern = indentNextLinePattern 的正则表达式模式。
schema.indentationRules.unIndentedLinePattern = 如果某一行匹配此模式，那么不应更改此行的缩进，且不应针对其他规则对其进行计算。
schema.indentationRules.unIndentedLinePattern.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.indentationRules.unIndentedLinePattern.flags = unIndentedLinePattern 的正则表达式开关。
schema.indentationRules.unIndentedLinePattern.pattern = unIndentedLinePattern 的正则表达式模式。
schema.lineComment = 作为行注释开头的字符序列。
schema.openBracket = 左方括号字符或字符串序列。
schema.surroundingPairs = 定义可用于包围所选字符串的括号对。
schema.wordPattern = 定义在编程语言里什么东西会被当做是一个单词。
schema.wordPattern.flags = 用于匹配文本的正则表达式开关。
schema.wordPattern.flags.errorMessage = 必须匹配模式 `/^([gimuy]+)$/`。
schema.wordPattern.pattern = 用于匹配文本的正则表达式模式。

[vs/workbench/contrib/codeEditor/browser/largeFileOptimizations]
largeFile = {0}：为减少内存使用并避免卡顿或崩溃，我们已关闭对此大型文件内容的标记、折行和折叠。
removeOptimizations = 强制启用功能
reopenFilePrompt = 请重新打开文件以使此设置生效。

[vs/workbench/contrib/codeEditor/browser/toggleMinimap]
miShowMinimap = 显示小地图(&&M)
toggleMinimap = 显示或隐藏小地图
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier]
miMultiCursorAlt = 切换为按住 Alt 键添加光标
miMultiCursorCmd = 切换为按住 Command 键添加光标
miMultiCursorCtrl = 切换为按住 Ctrl 键添加光标
toggleLocation = 切换多行修改键

[vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter]
miToggleRenderControlCharacters = 渲染控制字符(&&C)
toggleRenderControlCharacters = 显示或隐藏控制字符
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace]
miToggleRenderWhitespace = 渲染空格(&&R)
toggleRenderWhitespace = 显示或隐藏空格
view = 视图

[vs/workbench/contrib/codeEditor/browser/toggleWordWrap]
miToggleWordWrap = 打开或关闭自动换行(&&W)
toggle.wordwrap = 视图：打开或关闭自动换行
unwrapMinified = 在此文件禁用折行
wordWrap.notInDiffEditor = 不能在差异编辑器中打开或关闭自动换行。
wrapMinified = 在此文件启用折行

[vs/workbench/contrib/customEditor/browser/commands]
reopenWith.title = 重新打开方式
viewCategory = 视图

[vs/workbench/contrib/customEditor/browser/customEditors]
openWithCurrentlyActive = 当前处于活动状态
promptOpenWith.defaultEditor = VS Code 的标准文本编辑器
promptOpenWith.placeHolder = 选择要用于“{0}”的编辑器…

[vs/workbench/contrib/customEditor/browser/extensionPoint]
contributes.displayName = 自定义编辑器的可读名称。在选择要使用的编辑器时，会向用户显示该信息。
contributes.priority = 何时使用自定义编辑器。可能已被用户覆盖。
contributes.priority.builtin = 如果没有为资源注册其他默认或内置编辑器，则自动使用该编辑器。
contributes.priority.default = 如果没有为资源注册其他默认自定义编辑器，编辑器将自动用于资源。
contributes.priority.option = 不自动使用编辑器，但用户可选用它。
contributes.selector = 启用自定义编辑器的 glob 模式集。
contributes.selector.filenamePattern = 启用自定义编辑器的 glob 模式。
contributes.viewType = 自定义编辑器的唯一标识符。
contributes.webviewEditors = 参与 Web 视图编辑器。

[vs/workbench/contrib/customEditor/browser/webviewEditor.contribution]
editor.editorAssociations = 配置资源要使用的编辑器。
editor.editorAssociations.filenamePattern = 编辑器应被应用于的 glob 模式。
editor.editorAssociations.mime = 编辑器可应用的 mime 类型。这用于二进制文件。
editor.editorAssociations.viewType = 编辑器视图类型。

[vs/workbench/contrib/emmet/browser/actions/expandAbbreviation]
expandAbbreviationAction = 展开 Emmet 缩写
miEmmetExpandAbbreviation = 展开 Emmet 缩写(&&X)

[vs/workbench/contrib/emmet/browser/actions/showEmmetCommands]
miShowEmmetCommands = Emmet(&&M)…
showEmmetCommands = 显示 Emmet 命令

[vs/workbench/contrib/format/browser/formatActionsMultiple]
config = 配置默认格式化程序…
config.bad = 扩展“{0}”配置为格式化程序，但不可用。选择其他默认格式化程序以继续。
config.needed = {0} 文件有多个格式化程序。选择一个默认格式化程序以继续操作。
def = （默认值）
do.config = 配置…
format.placeHolder = 选择格式化程序
formatDocument.label.multiple = 格式化文档，方法是使用…
formatSelection.label.multiple = 格式选择与…
formatter.default = 定义一个默认格式化程序，该格式化程序优先于所有其他格式化程序设置。应是提供格式化程序的扩展的标识符。
miss = 扩展“{0}”未能格式化“{1}”
nullFormatterDescription = 没有
select = 为 {0} 文件选择默认格式化程序

[vs/workbench/contrib/format/browser/formatActionsNone]
formatDocument.label.multiple = 设置文档的格式
install.formatter = 安装格式化程序…
no.provider = 当前没有安装“{0}”文件的格式化程序。

[vs/workbench/contrib/snippets/browser/configureSnippets]
bad_name1 = 文件名无效
bad_name2 = “{0}”不是有效的文件名
bad_name3 = “{0}”已存在
global.1 = （{0}）
global.scope = （全局）
group.global = 现有代码片段
miOpenSnippets = 代码片段(&&S)
name = 代码片段名称
new.folder = 新建“{0}”文件夹的代码片段文件…
new.global = 新建全局代码片段文件…
new.global.sep = 新代码片段
new.global_scope = 全局
new.workspace_scope = {0} 工作区
openSnippet.label = 配置代码片段
openSnippet.pickLanguage = 选择代码片段文件或创建代码片段
preferences = 设置
userSnippets = 代码片段

[vs/workbench/contrib/snippets/browser/insertSnippet]
sep.extSnippet = 扩展代码片段
sep.userSnippet = 代码片段
sep.workspaceSnippet = 工作区代码片段
snippet.suggestions.label = 插入片段

[vs/workbench/contrib/snippets/browser/snippetCompletionProvider]
detail.snippet = {0}（{1}）
snippetSuggest.longLabel = {0}，{1}

[vs/workbench/contrib/snippets/browser/snippets.contribution]
snippetSchema.json = 代码片段配置
snippetSchema.json.body = 代码片段的内容。使用 `$1` 和 `${1:defaultText}` 定义光标位置，使用 `$0` 定义最终光标位置。使用 `${varName}` 和 `${varName:defaultText}` 插入变量值，例如 `This is file: $TM_FILENAME`。
snippetSchema.json.default = 空代码片段
snippetSchema.json.description = 代码片段描述。
snippetSchema.json.prefix = 在智能感知中选择代码片段时将使用的前缀
snippetSchema.json.scope = 此代码片段适用语言的名称列表，例如 `"typescript,javascript"`。

[vs/workbench/contrib/snippets/browser/snippetsFile]
source.userSnippet = 代码片段
source.userSnippetGlobal = 全局代码片段
source.workspaceSnippetGlobal = 工作区代码片段

[vs/workbench/contrib/snippets/browser/snippetsService]
badFile = 未能读取代码片段文件 `{0}`。
badVariableUse = 扩展 `{0}` 中的一个或多个代码片段很可能混淆了片段变量和片段占位符（详细信息请见 https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax）
invalid.language = `contributes.{0}.language` 属性值包含未知语言。提供的值为 {1}
invalid.language.0 = 省略语言时，`contributes.{0}.path` 属性值必须指向一个“.code-snippets”文件。提供的值为 {1}
invalid.path.0 = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
invalid.path.1 = `contributes.{0}.url` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
vscode.extension.contributes.snippets = 贡献代码段。
vscode.extension.contributes.snippets-language = 此代码片段参与的语言标识符。
vscode.extension.contributes.snippets-path = 代码片段文件的路径，相对于扩展文件夹。

[vs/workbench/contrib/testCustomEditors/browser/testCustomEditors]
openCustomEditor = 测试打开自定义编辑器
testCustomEditor = 测试自定义编辑器
