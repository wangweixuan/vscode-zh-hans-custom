[vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution]
globalConsoleAction = 打开新终端
scopedConsoleAction = 在终端中打开

[vs/workbench/contrib/externalTerminal/node/externalTerminalService]
console.title = VS Code 控制台
explorer.openInTerminalKind = 自定义要启动的终端类型。
ext.term.app.not.found = 找不到终端应用程序 "{0}"
linux.term.failed = “{0}”失败，退出代码为 {1}
mac.terminal.script.failed = 脚本“{0}”失败，退出代码为 {1}
mac.terminal.type.not.supported = 不支持“{0}”
press.any.key = 按任意键继续…
terminal.explorerKind.external = 使用设定的外部终端。
terminal.explorerKind.integrated = 使用 VS Code 的集成终端。
terminal.external.linuxExec = 自定义要在 Linux 上运行的终端。
terminal.external.osxExec = 定义在 macOS 上运行的终端应用程序。
terminal.external.windowsExec = 自定义要在 Windows 上运行的终端。
terminalConfigurationTitle = 外部终端

[vs/workbench/contrib/terminal/browser/links/terminalLinkManager]
followLink = 访问链接
terminalLinkHandler.followLinkAlt = 按住 Alt 键点击可访问链接
terminalLinkHandler.followLinkAlt.mac = 按住 Option 键点击可访问链接
terminalLinkHandler.followLinkCmd = 按住 Command 键点击可访问链接
terminalLinkHandler.followLinkCtrl = 按住 Ctrl 键点击可访问链接

[vs/workbench/contrib/terminal/browser/links/terminalWordLinkProvider]
searchWorkspace = 搜索工作区

[vs/workbench/contrib/terminal/browser/terminal.contribution]
quickOpen.terminal = 显示所有已打开的终端
terminal = 终端

[vs/workbench/contrib/terminal/browser/terminalActions]
quickOpenTerm = 切换活动终端
terminals = 打开终端。
workbench.action.terminal.clear = 清除
workbench.action.terminal.clearSelection = 取消选择
workbench.action.terminal.copySelection = 拷贝所选内容
workbench.action.terminal.copySelection.short = 拷贝
workbench.action.terminal.deleteToLineStart = 删除直到行首的内容
workbench.action.terminal.deleteWordLeft = 删除左侧的字符
workbench.action.terminal.deleteWordRight = 删除右侧的字符
workbench.action.terminal.findNext = 查找下一个
workbench.action.terminal.findPrevious = 查找前一个
workbench.action.terminal.focus = 聚焦到终端
workbench.action.terminal.focusFindWidget = 聚焦到“查找”小组件
workbench.action.terminal.focusNext = 聚焦到下一终端
workbench.action.terminal.focusNextPane = 聚焦到下一窗格
workbench.action.terminal.focusPrevious = 聚焦到下一终端
workbench.action.terminal.focusPreviousPane = 聚焦到上一窗格
workbench.action.terminal.hideFindWidget = 隐藏“查找”小组件
workbench.action.terminal.kill = 终止活动终端实例
workbench.action.terminal.kill.short = 终止终端
workbench.action.terminal.manageWorkspaceShellPermissions = 管理工作区 Shell 权限
workbench.action.terminal.moveToLineEnd = 移动到行尾
workbench.action.terminal.moveToLineStart = 移动到行首
workbench.action.terminal.navigationModeExit = 退出导航模式
workbench.action.terminal.navigationModeFocusNext = 聚焦下一行（导航模式）
workbench.action.terminal.navigationModeFocusPrevious = 聚焦上一行（导航模式）
workbench.action.terminal.new = 新建集成终端
workbench.action.terminal.new.short = 新建终端
workbench.action.terminal.newInActiveWorkspace = 新建集成终端（活动工作区）
workbench.action.terminal.newWithCwd = 在自定义工作目录中创建新的集成终端
workbench.action.terminal.newWithCwd.cwd = 启动终端的目录
workbench.action.terminal.newWorkspacePlaceholder = 选择当前工作目录新建终端
workbench.action.terminal.paste = 粘贴到活动终端中
workbench.action.terminal.paste.short = 粘贴
workbench.action.terminal.quickKill = 终止终端实例
workbench.action.terminal.rename = 重命名
workbench.action.terminal.rename.prompt = 输入终端名称
workbench.action.terminal.renameWithArg = 重命名当前活动终端
workbench.action.terminal.renameWithArg.name = 终端的新名称
workbench.action.terminal.renameWithArg.noName = 未提供名称参数
workbench.action.terminal.renameWithArg.noTerminal = 没有要重命名的活动终端
workbench.action.terminal.resizePaneDown = 向下调整窗格大小
workbench.action.terminal.resizePaneLeft = 向左调整窗格大小
workbench.action.terminal.resizePaneRight = 向右调整窗格大小
workbench.action.terminal.resizePaneUp = 向上调整窗格大小
workbench.action.terminal.runActiveFile = 在活动终端中运行活动文件
workbench.action.terminal.runActiveFile.noFile = 只有硬盘上的文件可在终端上运行
workbench.action.terminal.runSelectedText = 在活动终端运行所选内容
workbench.action.terminal.scrollDown = 向下滚动（行）
workbench.action.terminal.scrollDownPage = 向下滚动（页）
workbench.action.terminal.scrollToBottom = 滚动到底部
workbench.action.terminal.scrollToNextCommand = 滚动到下一条命令
workbench.action.terminal.scrollToPreviousCommand = 滚动到上一条命令
workbench.action.terminal.scrollToTop = 滚动到顶部
workbench.action.terminal.scrollUp = 向上滚动（行）
workbench.action.terminal.scrollUpPage = 向上滚动（页）
workbench.action.terminal.selectAll = 全选
workbench.action.terminal.selectDefaultShell = 选择默认 Shell
workbench.action.terminal.selectToNextCommand = 选择下一条命令所有内容
workbench.action.terminal.selectToNextLine = 选择下一行的所有内容
workbench.action.terminal.selectToPreviousCommand = 选择上一条命令所有内容
workbench.action.terminal.selectToPreviousLine = 选择上一行的所有内容
workbench.action.terminal.sendSequence = 发送自定义序列到终端
workbench.action.terminal.split = 拆分终端
workbench.action.terminal.split.short = 拆分
workbench.action.terminal.splitInActiveWorkspace = 拆分终端（活动工作区）
workbench.action.terminal.switchTerminal = 切换终端
workbench.action.terminal.toggleEscapeSequenceLogging = 切换是否记录转义序列日志
workbench.action.terminal.toggleFindCaseSensitive = 切换区分大小写
workbench.action.terminal.toggleFindRegex = 切换正则表达式
workbench.action.terminal.toggleFindWholeWord = 切换全字匹配
workbench.action.terminal.toggleTerminal = 显示或隐藏集成终端

[vs/workbench/contrib/terminal/browser/terminalConfigHelper]
allow = 允许
disallow = 不允许
install = 安装
terminal.integrated.allowWorkspaceShell = 是否允许此工作区修改您的终端？{0}
useWslExtension.title = 建议使用“{0}”扩展在 WSL 中打开终端。

[vs/workbench/contrib/terminal/browser/terminalInstance]
dontShowAgain = 不再显示
no = 否
terminal.integrated.a11yPromptLabel = 终端输入
terminal.integrated.a11yTooMuchOutput = 输出太多，未能朗读。请手动转到行内进行阅读
terminal.integrated.copySelection.noSelection = 没有在终端中选择要拷贝的内容
terminal.integrated.exitedWithCode = 终端进程已终止，退出代码：{0}
terminal.integrated.exitedWithInvalidCWD = 终端 shell 的工作目录“{0}”不存在
terminal.integrated.exitedWithInvalidPath = 终端 shell 路径“{0}”不存在
terminal.integrated.exitedWithInvalidPathDirectory = 终端 shell 路径“{0}”是一个目录
terminal.integrated.launchFailed = 终端进程命令“{0} {1}”未能启动（退出代码：{2}）
terminal.integrated.launchFailedExtHost = 终端进程启动失败（退出代码：{0}）
terminal.integrated.legacyConsoleModeError = 终端未能正确启动，因为您的系统已启用旧版控制台模式；要解决此问题，请取消选择“使用旧版控制台”cmd.exe 的属性。
terminal.slowRendering = 集成终端的默认渲染器运行性能低。是否切换为基于 DOM 的渲染器？[阅读有关终端设置的更多信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered)
terminalStaleTextBoxAriaLabel = 终端 {0} 环境已过时，请运行“显示环境信息”命令以获取详细信息
terminalTextBoxAriaLabel = 终端 {0}
yes = 是

[vs/workbench/contrib/terminal/browser/terminalProcessExtHostProxy]
terminal.integrated.starting = 正在启动…

[vs/workbench/contrib/terminal/browser/terminalQuickAccess]
killTerminal = 终止终端
renameTerminal = 重命名终端
workbench.action.terminal.newplus = 新建终端

[vs/workbench/contrib/terminal/browser/terminalQuickOpen]
noTerminalsFound = 没有打开终端
noTerminalsMatching = 没有匹配的终端
termCreateEntryAriaLabel = {0}，新建终端
termEntryAriaLabel = {0}，终端选取器
workbench.action.terminal.newplus = $(plus) 新建集成终端

[vs/workbench/contrib/terminal/browser/terminalService]
terminal.integrated.chooseWindowsShell = 选择默认的终端 shell。您可以以后在设置中更改。
terminalService.terminalCloseConfirmationPlural = 有 {0} 个活动的终端会话，是否终止这些会话？
terminalService.terminalCloseConfirmationSingular = 有 1 个活动的终端会话，是否终止此会话？
workbench.action.terminal.allowWorkspaceShell = 允许配置工作区 Shell
workbench.action.terminal.disallowWorkspaceShell = 禁止配置工作区 Shell

[vs/workbench/contrib/terminal/browser/terminalView]
terminal.monospaceOnly = 终端只支持等宽字体。
terminal.useMonospace = 改为“monospace”

[vs/workbench/contrib/terminal/common/terminal]
terminalCategory = 终端

[vs/workbench/contrib/terminal/common/terminalColorRegistry]
terminal.ansiColor = 终端中的 ANSI 颜色“{0}”。
terminal.background = 终端的背景色，允许终端的颜色与面板不同。
terminal.border = 分隔终端中拆分窗格的边框颜色。默认为 `panel.border` 的颜色。
terminal.foreground = 终端的前景色。
terminal.selectionBackground = 终端选中内容的背景色。
terminalCursor.background = 终端光标的背景色。允许自定义被块状光标遮住的字符的颜色。
terminalCursor.foreground = 终端光标的前景色。

[vs/workbench/contrib/terminal/common/terminalConfiguration]
terminal.integrated.allowChords = 允许在终端中进行组合键快捷键。开启时将绕过 `terminal.Integrated.CommandsToSkipShell`。如果您希望 Ctrl + K 被发送到 shell，请关闭此选项。
terminal.integrated.automationShell.linux = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.automationShell.osx = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.automationShell.windows = 替代 {0} 并忽略 {1} 个值的路径，用于与自动化相关的终端使用（如任务和调试）。
terminal.integrated.commandsToSkipShell = 一组命令标识符，其快捷键将不发送到 shell，而始终由 VS Code 进行处理。这样，使用快捷键（通常由 shell 使用）时的效果与终端未对焦时（例如，按 Ctrl+P 启动“快速打开”）时的效果一致。\n默认跳过的命令:\n\n{0}
terminal.integrated.confirmOnExit = 在存在活动终端会话的情况下，是否在退出时进行确认。
terminal.integrated.copyOnSelection = 是否将终端中选定的文本拷贝到粘贴板。
terminal.integrated.cursorBlinking = 使终端光标闪烁。
terminal.integrated.cursorStyle = 终端光标的样式。
terminal.integrated.cursorWidth = 光标的宽度（适用于 `#terminal.integrated.cursorStyle#` 设置为 `"line"` 时）。
terminal.integrated.cwd = 将在其中启动终端的一个显式起始路径，它用作 shell 进程的当前工作目录。
terminal.integrated.detectLocale = 检测“$LANG”环境变量并将其设置为符合 UTF-8 的选项，因为 VS Code 的终端仅支持来自 shell 的 UTF-8 编码数据。
terminal.integrated.detectLocale.auto = 如果现有变量不存在或不以“.UTF-8”结尾，则设置“$LANG”环境变量。
terminal.integrated.detectLocale.off = 不要设置“$LANG”环境变量。
terminal.integrated.detectLocale.on = 始终设置“$LANG”环境变量。
terminal.integrated.drawBoldTextInBrightColors = 终端中的粗体文本是否始终使用 ANSI 的明亮颜色样式。
terminal.integrated.enableBell = 启用声音效果。
terminal.integrated.enableFileLinks = 在终端中启用文件链接。在网络驱动器上工作时，链接速度可能很慢，因为每个文件链接都根据文件系统进行验证。
terminal.integrated.env.linux = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Linux 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.env.osx = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 macOS 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.env.windows = 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Windows 终端使用。设置为 `null` 表示清除该环境变量。
terminal.integrated.experimentalUseTitleEvent = 将使用下拉标题的终端标题事件的实验性设置。仅适用于新终端。
terminal.integrated.fastScrollSensitivity = 按下 Alt 键时加快滚动速度。
terminal.integrated.fontFamily = 终端的字体系列，默认为 `#editor.fontFamily#` 的值。
terminal.integrated.fontSize = 终端的字号，以像素为单位。
terminal.integrated.fontWeight = 终端中非粗体字使用的字重。
terminal.integrated.fontWeightBold = 终端中粗体字使用的字重。
terminal.integrated.inheritEnv = 新 shell 是否应从 VS Code 继承其环境。不适用于 Windows。
terminal.integrated.letterSpacing = 终端字符的间距。此项的值为整数，表示在字符间添加的额外像素数。
terminal.integrated.lineHeight = 终端的行高，此数字乘上终端字号得到实际行高，以像素为单位。
terminal.integrated.macOptionClickForcesSelection = 在 macOS 中，是否在按住 Option 键并点击时进行强制选择。这将强制进行常规（行）选择并禁用列选择模式；同时允许使用常规终端选择来进行拷贝与粘贴，例如，可在 tmux 启用了鼠标模式时适用。
terminal.integrated.macOptionIsMeta = 是否在 macOS 终端中，使用 Option 键作为 Meta 键。
terminal.integrated.minimumContrastRatio = 调亮或调暗终端中对比度过低的内容的颜色，使其达到指定的对比度。示例值：\n\n- 1：默认值，不改变颜色。\n- 4.5：[WCAG AA compliance](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) 标准的最小值。\n- 7：[WCAG AAA compliance](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html) 标准的最小值。\n- 21：完全黑白。
terminal.integrated.mouseWheelScrollSensitivity = 用鼠标滚轮滚动时的速度。
terminal.integrated.rendererType = 终端的渲染方式。
terminal.integrated.rendererType.auto = 让 VS Code 决定要使用的渲染器。
terminal.integrated.rendererType.canvas = 使用标准 GPU/基于 canvas 的渲染器。
terminal.integrated.rendererType.dom = 使用基于 DOM 的备用渲染器。
terminal.integrated.rendererType.experimentalWebgl = 使用基于 WebGL 的实验性渲染器。此功能存在一些[已知问题](https://github.com/xtermjs/xterm.js/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%2Faddon%2Fwebgl)，并且仅能在新终端中启用（不能热切换）。
terminal.integrated.rightClickBehavior = 终端对右键点击的响应方式。
terminal.integrated.rightClickBehavior.copyPaste = 当有内容选中时进行拷贝，否则进行粘贴。
terminal.integrated.rightClickBehavior.default = 显示上下文菜单。
terminal.integrated.rightClickBehavior.paste = 右键点击以粘贴。
terminal.integrated.rightClickBehavior.selectWord = 选择光标下的单词并显示上下文菜单。
terminal.integrated.scrollback = 终端保持在缓冲区的最大行数。
terminal.integrated.shellArgs.linux = 在 Linux 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.osx = 在 macOS 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.windows = 在 Windows 终端上使用的命令行参数。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shellArgs.windows.string = 在 Windows 终端中使用的的命令行参数，须为[命令行格式](https://msdn.microsoft.com/08dfcab2-eb6e-49a4-80eb-87d4076c98c6)[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.showExitAlert = 当退出代码非零时，是否显示“终端进程以某退出代码终止”的警告。
terminal.integrated.splitCwd = 拆分终端的初始工作目录。
terminal.integrated.splitCwd.inherited = 在 macOS 和 Linux 上，一个新的分割终端将使用父终端的工作目录。在 Windows 上，这与初始值相同。
terminal.integrated.splitCwd.initial = 新拆分终端将使用父终端起始目录作为工作目录。
terminal.integrated.splitCwd.workspaceRoot = 新拆分终端将使用工作区根目录作为工作目录。在多根目录工作区中，可选择要使用的根目录。
terminal.integrated.unicodeVersion = 在处理中不同宽度字符时使用的 Unicode 软件版本。如果您发现表情符号或其他宽字符没有以正确的大小显示，或者删除文字时出现错误，那么可能需要调整此设置。
terminal.integrated.unicodeVersion.eleven = 第 11 版 Unicode 软件。此版本在现代系统上有更好的支持。
terminal.integrated.unicodeVersion.six = 第 6 版 Unicode 软件。此版本可用于较旧的系统。
terminal.integrated.windowsEnableConpty = 在 Windows 终端进程通信时使用 ConPTY（需要 Windows 10 内部版本号 18309 以上）。默认使用 Winpty。
terminalIntegratedConfigurationTitle = 集成终端
viewCategory = 视图

[vs/workbench/contrib/terminal/common/terminalMenu]
miNewTerminal = 新建终端(&&N)
miRunActiveFile = 运行活动文件(&&A)
miRunSelectedText = 运行所选内容(&&S)
miSplitTerminal = 拆分终端(&&S)
miToggleIntegratedTerminal = 终端(&&T)

[vs/workbench/contrib/terminal/common/terminalShellConfig]
terminal.integrated.shell.linux = 终端在 Linux 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.linux.noDefault = 终端在 Linux 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminal.integrated.shell.osx = 终端在 macOS 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.osx.noDefault = 终端在 macOS 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminal.integrated.shell.windows = 终端在 Windows 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)
terminal.integrated.shell.windows.noDefault = 终端在 Windows 上使用的 shell 的路径。[阅读有关配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
terminalIntegratedConfigurationTitle = 集成终端

[vs/workbench/contrib/terminal/electron-browser/terminalRemote]
workbench.action.terminal.newLocal = 新建集成终端（本地）
