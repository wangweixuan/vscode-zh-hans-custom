[vs/workbench/services/bulkEdit/browser/bulkEditService]
conflict = 这些文件也已同时更改：{0}
summary.0 = 未做编辑
summary.n0 = 在 1 个文件中进行了 {0} 次编辑
summary.nm = 在 {1} 个文件中进行了 {0} 次编辑

[vs/workbench/services/configuration/common/configurationEditingService]
errorConfigurationFileDirty = 用户设置文件已变更，未能写入。请先存储此文件，然后重试。
errorConfigurationFileDirtyFolder = 文件夹设置文件已变更，未能写入。请先存储“{0}”文件夹设置文件，然后重试。
errorConfigurationFileDirtyWorkspace = 工作区设置文件已变更，未能写入。请先存储此文件，然后重试。
errorInvalidConfiguration = 未能写入用户设置。请打开用户设置并清除错误或警告，然后重试。
errorInvalidConfigurationFolder = 未能写入文件夹设置。请打开“{0}”文件夹设置并清除错误或警告，然后重试。
errorInvalidConfigurationWorkspace = 未能写入工作区设置。请打开工作区设置并清除错误或警告，然后重试。
errorInvalidFolderConfiguration = {0} 不支持文件夹资源域，因此未能写入文件夹设置。
errorInvalidFolderTarget = 未提供资源，因此未能写入文件夹设置。
errorInvalidLaunchConfiguration = 未能写入启动配置文件。请打开文件并更正错误或警告，然后重试。
errorInvalidRemoteConfiguration = 未能写入远程用户设置。请打开远程用户设置以更正其中的错误警告，然后重试。
errorInvalidTaskConfiguration = 未能写入任务配置文件。请打开文件并更正错误或警告，然后重试。
errorInvalidUserTarget = {0} 不支持全局域，因此未能写入用户设置。
errorInvalidWorkspaceConfigurationApplication = 未能将 {0} 写入工作区设置。此设置只能写于用户设置。
errorInvalidWorkspaceConfigurationMachine = 未能将 {0} 写入工作区设置。此设置只能写于用户设置。
errorInvalidWorkspaceTarget = {0} 不在多文件夹工作区环境下支持工作区作用域，因此未能写入工作区设置。
errorLaunchConfigurationFileDirty = 启动配置文件已变更，未能写入。请先存储此文件，然后重试。
errorNoWorkspaceOpened = 没有打开任何工作区，因此未能写入 {0}。请先打开一个工作区，然后重试。
errorRemoteConfigurationFileDirty = 未能写入远程的用户设置，因为该文件已被污染。请先存储远程用户设置文件，然后重试。
errorTasksConfigurationFileDirty = 任务配置文件已变更，未能写入。请先存储此文件，然后重试。
errorUnknownKey = 没有注册配置 {1}，因此未能写入 {0}。
folderTarget = 文件夹设置
open = 打开设置
openLaunchConfiguration = 打开启动配置
openTasksConfiguration = 打开任务配置
remoteUserTarget = 远程用户设置
saveAndRetry = 存储并重试
userTarget = 用户设置
workspaceTarget = 工作区设置

[vs/workbench/services/configuration/common/jsonEditingService]
errorFileDirty = 未能写入文件因为其已变更。请先存储此文件，然后重试。
errorInvalidFile = 未能写入文件。请打开文件以更正错误或警告，然后重试。

[vs/workbench/services/configurationResolver/browser/configurationResolverService]
commandVariable.noStringType = 未能替换命令变量“{0}”，因为命令没有返回字符串类型的结果。
inputVariable.command.noStringType = 未能替换输入变量“{0}”，因为命令“{1}”没有返回类型字符串的结果。
inputVariable.defaultInputValue = 默认值
inputVariable.missingAttribute = 输入变量“{0}”的类型为“{1}”且必须包含“{2}”。
inputVariable.noInputSection = 必须在调试或任务配置的“{1}”部分中定义变量“{0}”。
inputVariable.undefinedVariable = 遇到未定义的输入变量“{0}”。请删除或定义“{0}”以继续操作。
inputVariable.unknownType = 输入变量“{0}”只能是 `"promptString"`、`"pickString"` 或 `"command"` 类型。

[vs/workbench/services/configurationResolver/common/configurationResolverSchema]
JsonSchema.input.command.args = 传递给命令的可选参数。
JsonSchema.input.command.command = 要为此输入变量执行的命令。
JsonSchema.input.default = 输入的默认值。
JsonSchema.input.description = 当提示用户输入时，将显示说明。
JsonSchema.input.id = 输入的标识符用于与其变量采用 ${input:id} 形式的输入相关联。
JsonSchema.input.options = 用于定义快速选择选项的字符串数组。
JsonSchema.input.type = 要使用的用户输入提示符的类型。
JsonSchema.input.type.command = `"command"` 类型会执行命令。
JsonSchema.input.type.pickString = `"pickString"` 类型显示一个选择列表。
JsonSchema.input.type.promptString = `"promptString"` 类型会打开一个输入框，要求用户输入内容。
JsonSchema.inputs = 用户输入。用于定义用户输入提示，例如自由字符串输入或从多个选项中进行选择。

[vs/workbench/services/configurationResolver/common/configurationResolverUtils]
deprecatedVariables = 已弃用：请改用 `env:`、`config:` 和 `command:`。

[vs/workbench/services/configurationResolver/common/variableResolver]
canNotFindFolder = 找不到文件夹“{1}”，因此未能解析“{0}”。
canNotResolveFile = 未能解析“{0}”。请打开一个编辑器。
canNotResolveLineNumber = 未能解析“{0}”。请确保已在活动编辑器中选择一行内容。
canNotResolveSelectedText = 未能解析“{0}”。请确保已在活动编辑器中选择一些文字。
canNotResolveWorkspaceFolder = 未能解析“{0}”。请打开一个文件夹。
canNotResolveWorkspaceFolderMultiRoot = 未能在多文件夹工作区中解析“{0}”。使用“:”和工作区文件夹名称来限定此变量的作用域。
configNoString = “{1}”为结构类型值，因此未能解析“{0}”。
configNotFound = 未能找到设置“{1}”，因此未能解析“{0}”。
missingConfigName = 未给出设置名称，因此未能解析“{0}”。
missingEnvVarName = 未给出环境变量名称，因此未能解析“{0}”。
noValueForCommand = 命令不含值，因此未能解析“{0}”。

[vs/workbench/services/decorations/browser/decorationsService]
bubbleTitle = 包含强调项

[vs/workbench/services/dialogs/browser/abstractFileDialogService]
cancel = 取消
dontSave = 不存储(&&N)
filterName.workspace = 工作区
openFile.title = 打开文件
openFileOrFolder.title = 打开文件或文件夹
openFolder.title = 打开文件夹
openWorkspace.title = 打开工作区
save = 存储(&&S)
saveAll = 全部存储(&&S)
saveChangesDetail = 如果不存储，更改将丢失。
saveChangesMessage = 是否要存储 {0} 的更改？
saveChangesMessages = 是否要存储以下 {0} 个文件的更改？
saveFileAs.title = 存储为

[vs/workbench/services/dialogs/browser/dialogService]
aboutDetail = 版本：{0}\n提交：{1}\n日期：{2}\n浏览器：{3}
cancelButton = 取消
copy = 复制
ok = 确定
yesButton = 是(&&Y)

[vs/workbench/services/dialogs/browser/simpleFileDialog]
openLocalFile = 打开本地文件…
openLocalFileFolder = 打开本地项目…
openLocalFolder = 打开本地文件夹…
remoteFileDialog.badPath = 路径不存在。
remoteFileDialog.cancel = 取消
remoteFileDialog.invalidPath = 请输入有效的路径。
remoteFileDialog.local = 显示本地
remoteFileDialog.notConnectedToRemote = {0} 的文件系统提供程序不可用。
remoteFileDialog.validateBadFilename = 请输入有效的文件名。
remoteFileDialog.validateExisting = {0} 已存在。确实要覆盖它吗？
remoteFileDialog.validateFileOnly = 请选择一个文件。
remoteFileDialog.validateFolder = 该文件夹已存在，请使用新的文件名。
remoteFileDialog.validateFolderOnly = 请选择一个文件夹。
remoteFileDialog.validateNonexistentDir = 请输入已存在的路径。
saveLocalFile = 存储本地文件…

[vs/workbench/services/dialogs/electron-browser/dialogService]
aboutDetail = 版本：{0}\n提交：{1}\n日期：{2}\nElectron：{3}\nChrome：{4}\nNode.js：{5}\nV8：{6}\n操作系统：{7}
cancelButton = 取消
copy = 复制(&&C)
okButton = 确定
yesButton = 是(&&Y)

[vs/workbench/services/editor/browser/editorService]
compareLabels = {0} ↔ {1}
sideBySideLabels = {0} - {1}

[vs/workbench/services/extensionManagement/common/extensionEnablementService]
noWorkspace = 无工作区

[vs/workbench/services/extensionManagement/common/extensionManagementService]
Manifest is not found = 安装扩展“{0}”失败：找不到清单文件。
cannot be installed = 未能安装扩展“{0}”，因为它无法在远程服务器中启用。
multipleDependentsError = 未能卸载扩展“{0}”。扩展“{1}”、“{2}”以及其他扩展都依赖于它。
singleDependentError = 未能卸载扩展“{0}”。扩展“{1}”依赖于它。
twoDependentsError = 未能卸载扩展“{0}”。扩展“{1}”、“{2}”依赖于它。

[vs/workbench/services/extensionManagement/electron-browser/extensionManagementServerService]
local = 本地
remote = 远程

[vs/workbench/services/extensions/browser/extensionUrlHandler]
Installing = 正在安装扩展“{0}”…
Reload = 重载窗口并打开
confirmUrl = 是否允许扩展打开此 URL？
enableAndHandle = 扩展“{0}”已被禁用。是否启用扩展并重载此窗口来打开 URL？
enableAndReload = 启用并打开(&&E)
install = 安装(&&I)
installAndHandle = 扩展“{0}”尚未安装。是否安装扩展并重载此窗口来打开 URL？
manage = 管理授权扩展 URL…
open = 打开(&&O)
reload = 是否重新加载窗口并打开 URL“{0}”？
reloadAndHandle = 扩展“{0}”尚未载入。是否重载此窗口来载入扩展并打开 URL？
reloadAndOpen = 重载窗口并打开(&&R)
rememberConfirmUrl = 不再提醒此扩展

[vs/workbench/services/extensions/common/extensionHostProcessManager]
developer = 开发者
measureExtHostLatency = 测定扩展宿主延迟

[vs/workbench/services/extensions/common/extensionsRegistry]
extensionKind = 定义扩展的类型。可以控制扩展应在本地运行还是在远程运行。
extensionKind.empty = 无法在远程上下文中运行的扩展，既不能在本地上，也不能在远程计算机上运行。
extensionKind.ui = 连接到远程窗口时，扩展只能运行在本地计算机上。
extensionKind.ui-workspace = 可在任意一侧运行的扩展，并首选在本地计算机上运行。
extensionKind.workspace = 连接到远程窗口时，扩展只能运行在远程计算机上。
extensionKind.workspace-ui = 可在任意一侧运行的扩展，并首选在远程计算机上运行。
ui = 用户界面扩展。在远程窗口中，用户界面扩展只在本地启用。
vscode.extension.activationEvents = VS Code 扩展的激活事件。
vscode.extension.activationEvents.onCommand = 在调用指定命令时发出的激活事件。
vscode.extension.activationEvents.onDebug = 在用户准备调试或准备设置调试配置时发出的激活事件。
vscode.extension.activationEvents.onDebugAdapterProtocolTracker = 每当即将启动具有特定类型的调试会话并可能需要调试协议跟踪器时，都会发出激活事件。
vscode.extension.activationEvents.onDebugInitialConfigurations = 在需要创建“launch.json”文件（且需要调用 provideDebugConfigurations 的所有方法）时发出的激活事件。
vscode.extension.activationEvents.onDebugResolve = 在将要启动具有特定类型的调试会话（且需要调用相应的 resolveDebugConfiguration 方法）时发出的激活事件。
vscode.extension.activationEvents.onFileSystem = 在使用给定协议打开文件或文件夹时发出的激活事件。
vscode.extension.activationEvents.onIdentity = 每当指定的用户标识时，都会发出激活事件。
vscode.extension.activationEvents.onLanguage = 在打开被解析为指定语言的文件时发出的激活事件。
vscode.extension.activationEvents.onSearch = 在开始从给定协议的文件夹中搜索时发出的激活事件。
vscode.extension.activationEvents.onUri = 在打开系统范围内并指向此扩展的 URI 时发出的激活事件。
vscode.extension.activationEvents.onView = 在指定视图被展开时发出的激活事件。
vscode.extension.activationEvents.star = 在 VS Code 启动时发出的激活事件。为确保良好的最终用户体验，请仅在其他激活事件组合不适用于您的情况时，才在扩展中使用此事件。
vscode.extension.activationEvents.workspaceContains = 在打开至少包含一个匹配指定 glob 模式的文件的文件夹时发出的激活事件。
vscode.extension.badges = 在 Marketplace 的扩展页边栏中显示的徽章数组。
vscode.extension.badges.description = 徽章说明。
vscode.extension.badges.href = 徽章链接。
vscode.extension.badges.url = 徽章图像 URL。
vscode.extension.categories = VS Code 库用于对扩展进行分类的类别。
vscode.extension.category.languages.deprecated = 已弃用：请改用 `"Programming Languages"`。
vscode.extension.contributes = 由此包表示的 VS Code 扩展的所有贡献。
vscode.extension.contributes.extensionPack = 可一起安装的一组扩展。扩展的标识符始终为 `${publisher}.${name}`，如`"vscode.csharp"`。
vscode.extension.displayName = VS Code 库中使用的扩展的显示名称。
vscode.extension.engines = 引擎兼容性。
vscode.extension.engines.vscode = 对于 VS Code 扩展，指定与其兼容的 VS Code 版本。不能为 *。 例如：^0.10.5 表示最低兼容 VS Code 版本 0.10.5。
vscode.extension.extensionDependencies = 其他扩展的依赖关系。扩展的标识符始终是 `${publisher}.${name}`，如 `"vscode.csharp"`。
vscode.extension.galleryBanner = VS Code 商城使用的横幅。
vscode.extension.galleryBanner.color = VS Code 商城页标题上的横幅颜色。
vscode.extension.galleryBanner.theme = 横幅文字的颜色主题。
vscode.extension.icon = 128 x 128 像素图标的路径。
vscode.extension.markdown = 商店中使用的 Markdown 渲染引擎。可为 `"github"` 或 `"standard"`。
vscode.extension.preview = 在 Marketplace 中设置扩展，将其标记为“预览”。
vscode.extension.publisher = VS Code 扩展的发布者。
vscode.extension.qna = 市场中的“问与答”（Q&A）链接。设置为 `"marketplace"` 可启用市场的默认“问与答”页面。设置为其他字符串可指向自定义的“问与答”页面。设置为 `false` 表示完全禁用“问与答”。
vscode.extension.scripts.prepublish = 包作为 VS Code 扩展发布前执行的脚本。
vscode.extension.scripts.uninstall = VS Code 扩展的卸载钩子。在扩展从 VS Code 卸载且 VS Code 重新启动（关闭后开启）后执行的脚本。仅支持 Node 脚本。
workspace = 工作区扩展。在远程窗口中，用户界面扩展只在远程启用。

[vs/workbench/services/extensions/electron-browser/cachedExtensionScanner]
extensionCache.invalid = 扩展在硬盘上已被修改。请重新加载窗口。
extensionUnderDevelopment = 正在 {0} 处加载开发扩展
overwritingExtension = 使用扩展 {1} 覆盖扩展 {0}。
reloadWindow = 重新加载窗口

[vs/workbench/services/extensions/electron-browser/extensionHost]
extensionHost.error = 扩展宿主中的错误：{0}
extensionHost.startupFail = 扩展宿主未在 10 秒内启动，这可能是一个问题。
extensionHost.startupFailDebug = 扩展未在 10 秒内启动，可能在第一行已停止，需要调试器才能继续。
reloadWindow = 重新加载窗口

[vs/workbench/services/extensions/electron-browser/extensionService]
Reload = 重新加载
devTools = 打开开发人员工具
extensionService.crash = 扩展宿主意外终止。
extensionService.versionMismatchCrash = 扩展宿主未能启动：版本不匹配。
extensionsDisabled = 已暂时禁用所有安装的扩展。重载此窗口可返回到之前状态。
getEnvironmentFailure = 无法获取远程环境
looping = 扩展“{0}”因包含依赖循环已被禁用。
relaunch = 重新启动 VS Code
resolveAuthorityFailure = 解析来源 `{0}` 失败。
restart = 重新启动扩展宿主

[vs/workbench/services/extensions/electron-browser/remoteExtensionManagementIpc]
incompatible = 不能安装扩展“{0}”，因为它不兼容 VS Code 版本“{1}”。

[vs/workbench/services/extensions/node/extensionPoints]
extensionDescription.activationEvents1 = `{0}` 属性值（可省略）应是字符串数组。
extensionDescription.activationEvents2 = 属性 `{0}` 和 `{1}` 必须同时指定或同时省略。
extensionDescription.empty = 扩展说明不能为空。
extensionDescription.engines = `{0}` 属性值（不可省略）应是对象。
extensionDescription.engines.vscode = `{0}` 属性值（不可省略）应是字符串。
extensionDescription.extensionDependencies = `{0}` 属性值（可省略）应是字符串数组。
extensionDescription.main1 = `{0}` 属性值（可省略）应是字符串。
extensionDescription.main2 = `main` 属性值（{0}）未包含在扩展所在的文件夹（{1}）内。这可能使扩展不可移植。
extensionDescription.main3 = 属性 `{0}` 和 `{1}` 必须同时指定或同时省略。
extensionDescription.name = `{0}` 属性值（不可省略）应是字符串。
extensionDescription.publisher = `publisher` 属性值（不可省略）应是字符串。
extensionDescription.version = `{0}` 属性值（不可省略）应是字符串。
fileReadFail = 未能读取文件 {0}：{1}。
jsonInvalidFormat = 格式 {0} 无效：应为 JSON 对象。
jsonParseFail = 未能分析 {0}：{1}。
jsonsParseReportErrors = 未能分析 {0}：{1}。
missingNLSKey = 找不到键 {0} 的消息。
notSemver = 扩展版本与 semver 不兼容。

[vs/workbench/services/files/common/workspaceWatcher]
enospcError = 未能在大型工作区中监视文件更改。请按照说明链接来解决此问题。
installNet = 下载 .NET Framework 4.5
learnMore = 说明
netVersionError = 需要微软.NET Framework 4.5。请访问链接安装它。

[vs/workbench/services/files2/node/diskFileSystemProvider]
copyError = 未能将“{0}”拷贝到“{1}”（{2}）中。
fileExists_diskFileSystemProvider = 文件已存在。
fileNotExists = 文件不存在。
moveError = 未能将“{0}”移动到“{1}”（{2}）中。

[vs/workbench/services/integrity/node/integrityService]
integrity.dontShowAgain = 不再显示
integrity.moreInformation = 更多信息
integrity.prompt = {0} 安装似乎损坏。请重新安装。

[vs/workbench/services/keybinding/browser/keybindingService]
dispatch = 按键的分派逻辑。可为 `"code"`（推荐）或 `"keyCode"`。
invalid.keybindings = `contributes.{0}` 属性值无效：{1}
keybindings.json.args = 要传递给命令以执行的参数。
keybindings.json.command = 要执行的命令的名称
keybindings.json.key = 键或键序列，用空格分隔。
keybindings.json.title = 快捷键设置
keybindings.json.when = 键处于活动状态时的条件。
keyboardConfigurationTitle = 键盘
nonempty = 属性值不能为空。
optstring = `{0}` 属性值（可省略）应是字符串。
requirestring = `{0}` 属性值（不可省略）应是字符串。
unboundCommands = 以下是其他可用命令：
vscode.extension.contributes.keybindings = 用于快捷键。
vscode.extension.contributes.keybindings.args = 要传递给命令以执行的参数。
vscode.extension.contributes.keybindings.command = 要在触发快捷键时运行的命令的标识符。
vscode.extension.contributes.keybindings.key = 按键或按键序列。用加号分隔按键，用空格分隔序列。例如，Ctrl+O 和 Ctrl+L L（连续按键）。
vscode.extension.contributes.keybindings.linux = Linux 特定的键或键序列。
vscode.extension.contributes.keybindings.mac = macOS 特定的键或键序列。
vscode.extension.contributes.keybindings.when = 键处于活动状态时的条件。
vscode.extension.contributes.keybindings.win = Windows 特定的键或键序列。

[vs/workbench/services/keybinding/common/keybindingEditing]
emptyKeybindingsHeader = 将快捷键放在此文件中以覆盖默认值
errorInvalidConfiguration = 未能写入快捷键配置文件。文件内含有非数组类型对象。请打开文件进行清理，然后重试。
errorKeybindingsFileDirty = 快捷键配置文件已变更，现在未能写入。请先存储此文件，然后重试。
parseErrors = 未能写入快捷键配置文件。请打开文件并更正错误或警告，然后重试。

[vs/workbench/services/keybinding/electron-browser/keybinding.contribution]
keyboardConfigurationTitle = 键盘
touchbar.enabled = 启用键盘上的 macOS 触控栏按钮 (若可用)。
touchbar.ignored = 触摸栏中不应显示的条目的一组标识符，如 `"workbench.action.navigateBack"`。

[vs/workbench/services/label/common/labelService]
untitledWorkspace = 无标题（工作区）
vscode.extension.contributes.resourceLabelFormatters = 提供资源标签格式化规则。
vscode.extension.contributes.resourceLabelFormatters.authority = 要在其上匹配格式化程序的 URI 权限。支持简单的 glob 模式。
vscode.extension.contributes.resourceLabelFormatters.formatting = 用于格式化 URI 资源标签的规则。
vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix = 附加到工作区标签的后缀。
vscode.extension.contributes.resourceLabelFormatters.label = 要显示的标签规则，如支持将 myLabel:/${path}、${path}、${scheme} 和 ${authority} 用作变量。
vscode.extension.contributes.resourceLabelFormatters.scheme = 要在其上匹配格式化程序的 URI 方案，如 `file:`。支持简单的 glob 模式。
vscode.extension.contributes.resourceLabelFormatters.separator = 要在 URI 标签显示中所用的分隔符，如 `/` 或 `''`。
vscode.extension.contributes.resourceLabelFormatters.tildify = 是否应在可能的情况下按斜体显示 URI 标签的开头。
workspaceName = {0}（工作区）
workspaceNameVerbose = {0}（工作区）

[vs/workbench/services/mode/common/workbenchModeService]
invalid = `contributes.{0}` 属性值必须为数组。
invalid.empty = `contributes.{0}` 属性值不能为空。
opt.aliases = `{0}` 属性值（可省略）应是字符串数组。
opt.configuration = `{0}` 属性值（可省略）应是字符串。
opt.extensions = `{0}` 属性值（可省略）应是字符串数组。
opt.filenames = `{0}` 属性值（可省略）应是字符串数组。
opt.firstLine = `{0}` 属性值（可省略）应是字符串。
opt.mimetypes = `{0}` 属性值（可省略）应是字符串数组。
require.id = `{0}` 属性值（不可省略）应是字符串。
vscode.extension.contributes.languages = 有助于语言声明。
vscode.extension.contributes.languages.aliases = 语言的别名。
vscode.extension.contributes.languages.configuration = 包含语言配置选项的文件的相对路径。
vscode.extension.contributes.languages.extensions = 与语言关联的文件扩展名。
vscode.extension.contributes.languages.filenamePatterns = 与语言关联的文件名 glob 模式。
vscode.extension.contributes.languages.filenames = 与语言关联的文件名。
vscode.extension.contributes.languages.firstLine = 与语言文件的第一行匹配的正则表达式。
vscode.extension.contributes.languages.id = 语言标识符。
vscode.extension.contributes.languages.mimetypes = 与语言关联的 Mime 类型。

[vs/workbench/services/notification/common/notificationService]
neverShowAgain = 不再显示

[vs/workbench/services/preferences/browser/preferencesService]
defaultKeybindings = 默认的快捷键
defaultSettings = 默认设置
emptyKeybindingsHeader = 将快捷键放在此文件中以覆盖默认值
fail.createSettings = 未能创建“{0}”（{1}）。
folderSettingsName = {0}（文件夹设置）
openFolderFirst = 首先打开文件夹以创建工作区设置

[vs/workbench/services/preferences/common/keybindingsEditorModel]
cat.title = {0}：{1}
default = 默认值
meta = 元数据
option = 选项
user = 用户

[vs/workbench/services/preferences/common/preferences]
userSettingsTarget = 用户设置
workspaceSettingsTarget = 工作区设置

[vs/workbench/services/preferences/common/preferencesEditorInput]
keybindingsInputName = 快捷键
settingsEditor2InputName = 设置
settingsEditorName = 默认设置

[vs/workbench/services/preferences/common/preferencesModels]
commonlyUsed = 常用设置
defaultKeybindingsHeader = 将快捷键放入快捷键文件来覆盖快捷键。
validations.exclusiveMax = 值应小于 {0}。
validations.exclusiveMin = 值应大于 {0}。
validations.expectedInteger = 值应是整数。
validations.expectedNumeric = 值应是数字。
validations.max = 值应小于或等于 {0}。
validations.maxLength = 值应有至多 {0} 个字符。
validations.min = 值应大于或等于 {0}。
validations.minLength = 值应有至少 {0} 个字符。
validations.multipleOf = 值应是 {0} 的倍数。
validations.regex = 值应匹配正则表达式“{0}”。
validations.stringArrayItemEnum = 值 {0} 不是 {1} 之一。
validations.stringArrayItemPattern = 值 {0} 应匹配正则表达式 {1}。
validations.stringArrayMaxItem = 数组应有至多 {0} 个项。
validations.stringArrayMinItem = 数组应有至少 {0} 项。
validations.stringArrayUniqueItems = 数组不应有重复项。

[vs/workbench/services/progress/browser/progressService]
cancel = 取消
dismiss = 关闭
progress.text2 = {0}：{1}
progress.title2 = [{0}]：{1}
progress.title3 = [{0}] {1}：{2}
status.progress = 过程消息

[vs/workbench/services/remote/common/abstractRemoteAgentService]
connectionError = 未能连接到远程扩展宿主服务器（错误：{0}）

[vs/workbench/services/textMate/browser/abstractTextMateService]
invalid.embeddedLanguages = `contributes.{0}.embeddedLanguages` 属性值应是从作用域名称到语言的对象映射。提供的值为 {1}
invalid.injectTo = `contributes.{0}.injectTo` 属性值应是语言范围名称数组。提供的值为 {1}
invalid.language = `contributes.{0}.language` 属性值包含未知语言。提供的值为 {1}
invalid.path.0 = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
invalid.scopeName = `contributes.{0}.scopeName` 属性值应是字符串。提供的值为 {1}
invalid.tokenTypes = `contributes.{0}.tokenTypes` 属性值应是从作用域名称到标记类型的对象映射。提供的值为 {1}
neverAgain = 不再显示
too many characters = 出于性能原因，对长行跳过词法分析。长行的长度可通过 `editor.maxTokenizationLineLength` 设置进行配置。

[vs/workbench/services/textMate/common/TMGrammarFactory]
no-tm-grammar = 没有注册这种语言的 TextMate 语法。

[vs/workbench/services/textMate/common/TMGrammars]
vscode.extension.contributes.grammars = 贡献 TextMate 语法。
vscode.extension.contributes.grammars.embeddedLanguages = 如果此语法包含嵌入式语言，则为作用域名称到语言标识符的映射。
vscode.extension.contributes.grammars.injectTo = 此语法注入到的语言范围名称列表。
vscode.extension.contributes.grammars.language = 此语法为其贡献了内容的语言标识符。
vscode.extension.contributes.grammars.path = tmLanguage 文件的路径，相对于扩展文件夹。
vscode.extension.contributes.grammars.scopeName = tmLanguage 文件所用的 TextMate 范围名称。
vscode.extension.contributes.grammars.tokenTypes = 从作用域名到标记类型的映射。

[vs/workbench/services/textfile/browser/textFileService]
allFiles = 所有文件
confirmOverwrite = “{0}”已存在，是否进行替换？
fileBinaryError = 文件为二进制文件，不能作为文档打开
files.backup.failSave = 未能将更改的文件写入备份位置（错误：{0}）请先存储您的文件，然后退出。
irreversible = 文件夹 {0} 中已存在同名的文件或文件夹。替换它将覆盖其当前内容。
noExt = 无扩展
replaceButtonLabel = 替换(&&R)
saveAsTitle = 储存为…

[vs/workbench/services/textfile/common/textFileEditorModel]
genericSaveError = 未能存储“{0}”：{1}
saveFileFirst = 文件已更新。请首先存储它，然后再通过另一个编码重新打开它。

[vs/workbench/services/textfile/electron-browser/nativeTextFileService]
fileBinaryError = 文件为二进制文件，不能作为文档打开
fileReadOnlyError = 文件为只读文件

[vs/workbench/services/themes/browser/fileIconThemeData]
error.cannotparseicontheme = 解析文件图标主题时出错：{0}
error.invalidformat = 文件图标主题文件的格式无效：文件内容不是对象。

[vs/workbench/services/themes/browser/fileIconThemeStore]
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
reqarray = 扩展点 `{0}` 应是数组。
reqid = `contributes.{0}.id` 属性值应是字符串。提供的值为 {1}
reqpath = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
vscode.extension.contributes.iconThemes = 贡献文件图标主题。
vscode.extension.contributes.iconThemes.id = 用户设置中使用的图标主题的标识符。
vscode.extension.contributes.iconThemes.label = 显示给用户的图标主题的标签。
vscode.extension.contributes.iconThemes.path = 图标主题文件的路径，相对于扩展文件夹。

[vs/workbench/services/themes/browser/workbenchThemeService]
colorTheme = 指定用在工作台中的颜色主题。
colorThemeError = 主题未知或未安装。
editorColors = 覆盖当前所选颜色主题中的编辑器颜色和字体样式。
editorColors.comments = 设置注释的颜色和样式
editorColors.functions = 设置函数定义与引用的颜色和样式。
editorColors.keywords = 设置关键字的颜色和样式。
editorColors.numbers = 设置数字的颜色和样式。
editorColors.strings = 设置字符串文本的颜色和样式
editorColors.textMateRules = 使用 TextMate 主题规则设置颜色和样式（高级）
editorColors.types = 设置类型定义与引用的颜色和样式。
editorColors.variables = 设置变量定义和引用的颜色和样式。
editorColorsTokenStyles = 覆盖当前颜色主题中的标记颜色和样式。
error.cannotloadtheme = 未能加载 {0}：{1}
iconTheme = 指定在工作台中使用的图标主题，或指定 `null` 以不显示任何文件图标。
iconThemeError = 文件图标主题未知或未安装。
noIconThemeDesc = 无文件图标
workbenchColors = 覆盖当前颜色主题的颜色。

[vs/workbench/services/themes/common/colorExtensionPoint]
contributes.color = 提供由扩展定义的主题颜色
contributes.color.description = 主题颜色描述
contributes.color.id = 主题颜色标识符。
contributes.color.id.format = 标识符应满足模式 `aa[.bb]*`。
contributes.defaults.dark = 深色主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
contributes.defaults.highContrast = 高对比度主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
contributes.defaults.light = 浅色主题的默认颜色。应为十六进制颜色值（#RRGGBB[AA]）或是主题颜色标识符，其提供默认值。
invalid.colorConfiguration = `configuration.colors` 属性值应是数组。
invalid.default.colorType = {0} 应是十六进制颜色值（#RRGGBB[AA] 或 #RGB[A]）或是主题颜色标识符，其提供默认值。
invalid.defaults = `configuration.colors.defaults` 属性值（不可省略）必须包含 `"light"`（浅色）、`"dark"`（深色）和 `"highContrast"`（高对比度）。
invalid.description = `configuration.colors.description` 属性值（不可省略）不能为空。
invalid.id = `configuration.colors.id` 属性值（不可省略）不能为空。
invalid.id.format = `configuration.colors.id` 属性值必须满足模式 `word[.word]*`。

[vs/workbench/services/themes/common/colorThemeData]
error.cannotload = 解析 tmTheme 文件 {0} 时出现问题：{1}
error.cannotparse = 解析 tmTheme 文件 {0} 时出现问题。
error.cannotparsejson = 解析 JSON 主题文件 {0} 时出现问题。
error.invalidformat = JSON 颜色主题文件的格式无效：文件内容不是对象。
error.invalidformat.colors = 解析颜色主题文件 {0} 时出现问题。`colors` 属性值不是对象。
error.invalidformat.tokenColors = 解析颜色主题文件 {0} 时出现问题。`tokenColors` 属性值不是指定颜色的数组或指向 TextMate 主题文件的路径。
error.plist.invalidformat = 解析 tmTheme 文件 {0} 时出现问题。`settings` 属性值不是数组。

[vs/workbench/services/themes/common/colorThemeSchema]
schema.colors = 语法突出显示颜色
schema.fontStyle.error = 字体样式应是 `"italic"`（斜体）、`"bold"`（粗体）、`"underline"`（下划线）、上述的组合或空字符串。
schema.properties.name = 规则的描述。
schema.properties.scope = 此规则适用的范围选择器。
schema.token.background.warning = 暂不支持标记背景色。
schema.token.fontStyle = 这条规则的字体样式：`"italic"`（斜体）、`"bold"`（粗体）、`"underline"`（下划线）或是上述的组合。空字符串将清除继承的设置。
schema.token.fontStyle.none = 无（清除继承的设置）
schema.token.foreground = 标记的前景色。
schema.token.settings = 标记的颜色和样式。
schema.tokenColors.path = tmTheme 文件路径（相对于当前文件）
schema.workbenchColors = 工作台中的颜色

[vs/workbench/services/themes/common/colorThemeStore]
invalid.path.1 = `contributes.{0}.path` 属性值（{1}）未包含在扩展所在的文件夹（{2}）内。这可能使扩展不可移植。
reqarray = 扩展点 `{0}` 应是数组。
reqpath = `contributes.{0}.path` 属性值应是字符串。提供的值为 {1}
vscode.extension.contributes.themes = 贡献 TextMate 颜色主题。
vscode.extension.contributes.themes.id = 用户设置中使用的图标主题的标识符。
vscode.extension.contributes.themes.label = 显示给用户的颜色主题标签。
vscode.extension.contributes.themes.path = tmTheme 文件的路径，相对于扩展文件夹。
vscode.extension.contributes.themes.uiTheme = 颜色的基本主题：`"vs"` 是浅色主题，`"vs-dark"` 是深色主题，`"hc-black"` 是深色高对比度主题。

[vs/workbench/services/themes/common/fileIconThemeSchema]
schema.file = 默认文件图标，针对不与任何扩展名、文件名或语言标识符匹配的所有文件显示。
schema.fileExtension = 关联的图标定义的标识符。
schema.fileExtensions = 将文件扩展名关联到图标。对象中的键是文件扩展名。扩展名是文件名的最后一部分，位于最后一个点之后（不包括该点）比较扩展名时不区分大小写。
schema.fileName = 关联的图标定义的标识符。
schema.fileNames = 将文件名关联到图标。对象中的键是完整文件名，其中不含任何路径字段。文件名可以包括点和可能有的文件扩展名。不允许使用模式或通配符。文件名匹配不区分大小写。
schema.folder = 折叠文件夹的文件夹图标，如果未设置 `folderExpanded`，也指展开文件夹的文件夹图标。
schema.folderExpanded = 展开文件夹的文件夹图标。展开文件夹图标是可选的。如果未设置，将显示为文件夹定义的图标。
schema.folderName = 关联的图标定义的标识符。
schema.folderNameExpanded = 关联的图标定义的标识符。
schema.folderNames = 将文件夹名关联到图标。对象中的键是文件夹名，其中不含任何路径字段。不允许使用模式或通配符。文件夹名匹配不区分大小写。
schema.folderNamesExpanded = 将文件夹名关联到展开文件夹的图标。对象中的键是文件夹名，其中不含任何路径字段。不允许使用模式或通配符。文件夹名匹配不区分大小写。
schema.font-format = 字体的格式。
schema.font-path = 相对于当前图标主题文件的字体路径。
schema.font-size = 字体的默认大小。
schema.font-sstyle = 字体的样式。
schema.font-weight = 字体的粗细。
schema.fontCharacter = 使用字形字体时要使用的字体中的字符。
schema.fontColor = 使用字形字体时要使用的颜色。
schema.fontId = 使用某种字体时字体的标识符。默认为第一个字体定义。
schema.fontSize = 使用某种字体时文本字体的字体大小，以百分比表示。默认为字体定义中的大小。
schema.fonts = 图标定义中使用的字体。
schema.hidesExplorerArrows = 隐藏“资源”面板中文件夹前的箭头。
schema.highContrast = 高对比度颜色主题中文件图标的可选关联。
schema.iconDefinition = 图标定义。对象键是定义的标识符。
schema.iconDefinitions = 将文件关联到图标时可以使用的所有图标的说明。
schema.iconPath = 使用 SVG 或 PNG 时到图像的路径，相对于图标设置文件。
schema.id = 字体的标识符。
schema.languageId = 关联的图标定义的标识符。
schema.languageIds = 将语言与图标相关联。对象键是语言贡献点中定义的语言标识符。
schema.light = 浅色主题中文件图标的可选关联。
schema.src = 字体的位置。

[vs/workbench/services/userData/common/settingsSync]
Settings Conflicts = 本地 ↔ 远程（设置冲突）
errorInvalidSettings = 无法同步设置。请在没有任何错误和警告的情况下解决冲突，然后重试。

[vs/workbench/services/workspace/browser/workspaceEditingService]
cancel = 取消
differentSchemeRoots = 不能在一个工作区中打开来自不同文件系统提供程序的文件夹。
doNotSave = 不存储
errorInvalidTaskConfiguration = 未能写入工作区配置文件。请打开文件以更正错误或警告，然后重试。
errorWorkspaceConfigurationFileDirty = 文件已变更，因此未能写入工作区配置文件。请先存储此文件，然后重试。
openWorkspaceConfigurationFile = 打开工作区配置
save = 存储
saveWorkspace = 存储工作区
saveWorkspaceDetail = 若要再次打开此工作区，请先存储。
saveWorkspaceMessage = 您是否将您的工作区配置存储为文件？

[vs/workbench/services/workspace/electron-browser/workspaceEditingService]
ok = 确定
workspaceOpenedDetail = 已在另一个窗口打开工作区。请先关闭该窗口，然后重试。
workspaceOpenedMessage = 未能存储工作区“{0}”

[vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService]
differentSchemeRoots = 同一工作区中不允许来自不同提供程序的工作区文件夹。
errorInvalidTaskConfiguration = 无法写入工作区配置文件。请打开文件以更正错误或警告，然后重试。
errorWorkspaceConfigurationFileDirty = 文件已变更，因此无法写入工作区配置文件。请先存储此文件，然后重试。
openWorkspaceConfigurationFile = 打开工作区配置
save = 存储
saveWorkspace = 存储工作区

[vs/workbench/services/workspaces/electron-browser/workspaceEditingService]
cancel = 取消
doNotSave = 不存储
ok = 确定
save = 存储
saveWorkspaceDetail = 若要再次打开此工作区，请先存储。
saveWorkspaceMessage = 您是否要将您的工作区配置存储为文件？
workspaceOpenedDetail = 已在另一个窗口打开工作区。请先关闭该窗口，然后重试。
workspaceOpenedMessage = 无法存储工作区“{0}”
